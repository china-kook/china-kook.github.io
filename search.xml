<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[在生活与写作中学到什么？]]></title>
      <url>/2018/01/26/view-text-04/</url>
      <content type="html"><![CDATA[<blockquote>
<p>这篇文章内容节选自：TED - 我从生活和写作中学到的 12 个真理；演讲者：Anne Lamott。</p>
</blockquote>
 <a id="more"></a>
<p> 在 TED 看了这段演讲感触很深，整理其中的片段给大家，希望对大家也所有帮助，完整视频点击「阅读原文」</p>
<p><br></p>
<p>第一，也是最真实的事情就是，所有事实的真相都是有对立面的。</p>
<p>就像人生的艰难和喜悦。我们都知道，生命是精美绝伦的无价之宝，但从另一方面看，它又是完全相反的。相信你也有过这样的感受，生命如此的艰辛，每做一个抉择都是那么纠结和困难，有时候甚至会怀疑自己是不是被耍了。但是，生命同时又充满了令人感到温暖的甜蜜和感动。印象中最深刻的一个画面就是一位老爷爷深情的亲吻老奶奶的脸颊，老奶奶的脸上洋溢着无法言表的幸福和甜蜜。</p>
<p><img src="https://meto.chinakook.com/blog-images/18.01.26-00.jpg" alt=""></p>
<p><br></p>
<p>第二：几乎不存在什么外在力量，可以长久的帮助你自己。</p>
<p>我们无法为心爱的人去安排一条无风无雨的路，他们必须通过自身的努力找到自己的路和答案。你不能在孩子成为英雄的征途中替他们遮风挡雨。你必须给他们自由，不这么做就是不尊重他们。凡事都得靠自己，别人的帮助往往是杯水车薪，重要的是能否在自身找到力量。</p>
<p><br></p>
<p>第三：每个人都是糟糕的、破碎的、依赖的、胆小的，甚至有些人会同时拥有这些负面情绪，要相信他们其实和你差不多，所以别拿自己的内在和别人的外表比较。</p>
<p>攀比几乎是这个社会的通病，那些痛苦、不安，都是由于比较产生的。去了解了解那些有梦想的人吧，他们不会和别人攀比，因为，在这个世界上还有很多重要的事去实现。和别人攀比显得毫无意义。</p>
<p><br><br>第四：写作。那些成功的作家，初稿都写得很糟糕，但他们会坚持钉在凳子上。这就是生活的秘密。</p>
<p>一开始写作可能抓不着头脑，但是任何东西都不是一蹴而就的，写作能力也不是短时间内就可以练就的，它需要常年累月的坚持，实践，总结。俗语说 :万事开头难。但写作这件事，开头简单，坚持难。成功的秘诀就是坚持下来，所以，要把写作渐渐的当成一种习惯。当你习惯做一件事的时候，你自然而然的就会去做。</p>
<p><br><br><br>ikook<br>2018.01.26</p>
]]></content>
      
        <categories>
            
            <category> 观文记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> TED </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac 工具启示录「下」]]></title>
      <url>/2018/01/23/mac-software03/</url>
      <content type="html"><![CDATA[<p>这篇文章是「Mac 工具启示录」系列的最后一篇。这系列的三篇文章，基本涵盖了我自己使用的较为优秀的工具，但愿能有帮助到大家，对大家有所启示。<br><a id="more"></a></p>
<p><br></p>
<h4 id="清理工具"><a href="#清理工具" class="headerlink" title="清理工具"></a><strong>清理工具</strong></h4><p>首先 macOS 基本上是不需要进行系统清理的， 但使用过程中会产生一些可被清理的东西，像缓存文件、历史日志、临时文件、软件使用中产生的文件等；Mac 卸载软件只需将其丢到废纸篓，但软件使用过程中生成的文件不会被清理，虽然对系统使用没任何影响，但强迫症患者简直不能忍，尤其是有系统洁癖的童鞋。</p>
<p>CleanMyMac，作为 Mac 最强大最知名的清理工具，刚好可以拯救强迫症 + 系统洁癖的我，简直不能再好用。简单的操作，只需选择智能清理，再点击扫描，一切都交由 CleanMyMac 去做，它会智能的将你不需要的文件和残留文件找出来，然后再点击清理，整个世界都干净了。卸载软件也变得再轻松不过，选择需要卸载的软件，点击卸载就 ok 了，它会自动清除有关要卸载的软件的一切。同时，还可以用它来优化你的 Mac，重建 Spotlight 索引、运行维护脚本优化 Mac，等等。</p>
<p>Mac 清理和优化有它，足够了。收费的，老规矩，关注我的公众号（文章底部扫码关注，下同），回复「CleanMyMac」收货。</p>
<p><br></p>
<h4 id="知识管理工具"><a href="#知识管理工具" class="headerlink" title="知识管理工具"></a><strong>知识管理工具</strong></h4><p>Evernote，印象笔记，就是那个大象头。印象笔记知名度非常高，其强大之处不必多言，集整理、同步、收集、搜索等于一体，不论是图片、文字、录音均可存储，强大的拓展能力，全平台支持。有免费、标准和高级三种选择，高级账户按年付费 ￥12.33/月，蛮实惠的。</p>
<p>有道云笔记。网易出品，必属精品。分类整理、文件同步、支持文件上传和下载、支持 Markdown、云协作等等，全平台支持，相比印象笔记更符合国人使用习惯，同样也是我日常使用最多的软件。有免费版和收费版，免费版足够日常使用；收费版 198/年。</p>
<p>幕布。极简舒爽的界面，没有半点多余的元素，令人心驰神往。写笔记、思维整理、内容创作、任务管理，还可以一键生成思维导图，简直不能再爽。幕布简单易用，同样支持云同步，同样支持全平台，非常好用。无论是整理思维、内容创作还是任务管理，都完成的游刃有余，可以说是一款非常优秀的辅助思考软件。有免费版和高级版，高级版支持插入图片、高级导出、文档数量无上限等特点，￥9/月、￥90/年、￥199/3年，够实惠不？</p>
<p>XMind ZEN。XMind 团队推出的一款全新的思维导图软件。XMind 据说是最好用的思维导图软件之一，使用 ZEN 之前，也是一直在使用 XMind，确实很好用。但是用上 XMind ZEN 之后，再也不想回到 XMind 了。全新的引擎、优秀的主题、「禅」模式，导出为 Markdown 格式，更加简洁清爽的界面，兼容 XMind 8。XMind ZEN 也许是最好用的思维导图软件了吧，这次没有之一。XMind ZEN 公测时我就用上了，可以使用所有功能。正式上线后分为免费版和完整版，完整版 ￥380/2 年，也还买的起，第一时间进行了订阅。</p>
<p><br></p>
<h4 id="解压缩工具"><a href="#解压缩工具" class="headerlink" title="解压缩工具"></a><strong>解压缩工具</strong></h4><p>Mac 上原生的解压缩软件支持的格式比较少，所以一款优秀的解压缩软件是必需品。</p>
<p>BetterZip，这是一款功能非常强大的解压缩软件，不必解压就能够快速地检查压缩的文档，能执行文件之间的合并并提供密码，可以更加快捷的向压缩包中添加和删除文件。支持多种格式：zip、gz、bz、bz2、tar、rar、7-zip、iso、chm、rpm 等等。收费，后台回复「BetterZip」</p>
<p><br></p>
<h4 id="写作工具"><a href="#写作工具" class="headerlink" title="写作工具"></a><strong>写作工具</strong></h4><p>写作工具我只选择支持 Markdown 语法的，自从我开始写博客就使用  Markdown，深深地被它所吸引。Markdown 是一门标记语言，简单易用还易学，使用 Markdown 可以使你专注于写作，而不必在意排版。所以，下面的工具全都支持 Markdown  ^_^</p>
<p>MWeb，据说是程序员专属 Markdown 工具，全面支持 Github Flavored Markdown 语法，实时预览，生成静态博客等，还支持表格、流程图和数学公式的撰写。原生的 macOS 应用，运行速度更快，系统结合更加完美，拥有更好的写作体验。对了，还支持 iOS。收费的，98 RMB，不过，后台回复「MWeb」看看？</p>
<p>Day One，日记工具。可能是 Mac 平台上最好用的、最简洁漂亮的日记工具了。Day One 一直以来以界面简洁、功能易用著称。使用它只需专注于打字，它会自动生成美观、耐看的界面，还可以添加时间、地点、天气、运动步数，可以新建日记分类，插入多张照片，添加标签，颜色区分，云同步等等。如果使用 iOS 版，它还能记录你去过的地点。收费的，还挺贵，想要 Mac 版后台回复「DayOne」试试。</p>
<p>Ulysses，支持 iPhone、iPad、Mac，支持 iCloud 同步，在 Mac 没写完的文章可以在移动端无缝连接，接着之前的文章继续写；沉浸式的写作体验；文档的集中管理等，非常适合写非技术类文章，技术类文章略显不足。噢，对了，它还可以设置写作目标字数，设置之后会显示一个进度圆环，当圆环充满，文章也就差不多写完了。使用需付费订阅，可以免费体验 14 天，一年 ￥218。偶尔使用，不想花钱？回复「Ulysses」，不过会影响使用体验：不时的崩溃，然后我订阅了。</p>
<p><br></p>
<h4 id="影音工具"><a href="#影音工具" class="headerlink" title="影音工具"></a><strong>影音工具</strong></h4><p>MPlayerX，macOS 通用播放器，基本适配所有影音格式，基于 Mplayer 强力后端，界面简洁，操作方便。也正是因为基于 Mplayer，所以稍微有些过时，不再有大幅的更新，免费。</p>
<p>QuickTime，macOS 自带播放器，支持格式较少，不做过多介绍。</p>
<p>IINA，一个基于 mpv、契合 macOS 设计风格、力求做到最佳用户体验、轻便且功能强大的视频播放器，几乎支持所有格式，极好看的 UI，强大的解码能力，字幕挂载能力，毛玻璃特效的进度条和标题栏，画中画模式，强大的功能设置（涵盖了视频播放的方方面面），支持流播放，可谓真正面向现代的播放器。IINA 还有很多贴心的细节，大家自己去体验，毫不夸张的说，它是 macOS 上最好最完美的播放器。最重要的是，IINA 完全免费开源。</p>
<p><br></p>
<h4 id="办公工具"><a href="#办公工具" class="headerlink" title="办公工具"></a><strong>办公工具</strong></h4><p>iWork，包含 Pages、Keynote、Numbers，Mac 办公软件的标配，容易上手，学习成本低，简洁美观。免费使用，这么一想苹果还是很良心的。</p>
<p>Microsoft Office，无需多言，能够做出极其复杂的文档、PPT、表格，当然学习成本很高，想要用好 Office 比较困难，毕竟计算机二级考试中通过率才 22% 左右。但 Office 功能完备，强大，这是毋庸置疑的，更适合专业人群。收费，毕竟微软。既然这样，那赶紧后台回复「Office」吧。</p>
<p><br></p>
<h4 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a><strong>虚拟机</strong></h4><p>Parallels Desktop，Mac 上最优秀的虚拟机，简单易用。在 Mac 上轻松使用 Win 和 Linux 等其他操作系统，使用过 Mac 基本对它不会陌生。收费的，而且升级新版本还要另外掏钱，这不坑爹么。后台回复「Parallels」拿走。</p>
<p>免费的虚拟机工具：VirtualBox，我没有在 macOS 上用过，以前使用 Win 的时候用过不少，还可以，想必在 Mac 上也不错。</p>
<p><br></p>
<h4 id="云存储工具"><a href="#云存储工具" class="headerlink" title="云存储工具"></a><strong>云存储工具</strong></h4><p>我过的比较多。国外的 Dropbox，国内的坚果云、百度网盘。百度网盘我是真不想再用（原因不想再说，百毒必败），但是之前存的东西太多，转移成本太大，就这样用着吧。建议大家使用坚果云，体验还可以。有条件的可以使用 Dropbox，很好用。</p>
<p><br></p>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a><strong>其他</strong></h4><p>FreshBackMac，壁纸软件，我觉得非常好用，上面的壁纸都很好看，壁纸源有 500px、Pixabay 等等，图片资源非常丰富。</p>
<p>Navicat Premium，数据库客户端。我一般在终端中操作数据库，导致前两篇文章忘记了，这里补上。Navicat Premium，非常著名，非常好用，非常贵，奇贵。个人用户一般不会买，毕竟几千大洋。后台回复「Navicat」拿去耍。</p>
<hr>
<p>后台回复「Mac工具」可以获取这个系列文章中所有“可回复获取的软件”。</p>
<p>如果文章对大家有所帮助，希望大家积极转发分享，感谢。同时，如果这个系列文章对大家有帮助，我之后会考虑将其整理成文档，以便大家查阅，如果有需要，大家可以在文章底部留言告知我。</p>
<p>到此我使用的 Mac 工具基本介绍完了，文章中哪些工具对大家有帮助呢？你又有哪些好用的工具推荐给大家呢？欢迎大家积极留言交流。</p>
<p><br></p>
<h5 id="相关文章："><a href="#相关文章：" class="headerlink" title="相关文章："></a>相关文章：</h5><p><a href="https://ikookblog.com/2018/01/18/mac-software01/">Mac 工具启示录「上」</a></p>
<p><a href="https://ikookblog.com/2018/01/21/mac-software02/">Mac 工具启示录「中」</a></p>
<p><br></p>
<p><br>ikook<br>2018.01.23</p>
]]></content>
      
        <categories>
            
            <category> 软件说 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> Mac </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac 工具启示录「中」]]></title>
      <url>/2018/01/21/mac-software02/</url>
      <content type="html"><![CDATA[<p>大家周末愉快啊，这两天比较忙，所以本来早该推送的文章愣是拖到了今天。<a id="more"></a>这篇文章是《<a href="https://ikookblog.com/2018/01/18/mac-software01/"> Mac 工具启示录「上」</a>》的续集，上篇只给大家介绍了浏览器、IDE、编辑器三个部分，今天来给大家介绍下其他一些好用的工具。</p>
<p><br></p>
<h4 id="搜索工具"><a href="#搜索工具" class="headerlink" title="搜索工具"></a><strong>搜索工具</strong></h4><p>Spotlight，macOS 本身自带的强大的搜索工具，可以查找你计算机上所有的内容，像文件、文件夹、应用程序、邮件、歌曲等等。Spotlight 可以实现“随打即显”，意思就是在你键入的时候会随时匹配你想要的内容。用过 macOS 基本都知道有这么个工具，但用的人可能并不是很多，一部分是没用过的，对于这部分人建议去用一用，可以极大的提高效率；另一部分是使用它的替代者：Alfred。</p>
<p>Alfred，这是 Mac 专属的一个神器中的神器。想必你就算没有用过也听说过，如果没有听说过，那好吧（打脸）。Alfred 是一个可以让我们丢掉鼠标的神器，堪称 Mac 上最强大的效率工具，它在 Spotlight 基础上优化了快速启动和搜索的功能，还加入了 Workflows 等强大的扩展功能。关于 Alfred 不做过多介绍了，去 Google 了解。收费的，个人版 19 欧元，是欧元。暂时没钱？关注我的公众号（文章底部扫码关注，下同）后台回复「Alfred」收货。</p>
<p>Dash，用一句话概括：它是一个 API 文档浏览器，以及代码片段管理工具。如果你是搞编程的，那么它就是你要找的必须拥有的工具。它带有超过 200+ 的 API，也就是说无论你要查哪个技术的文档，基本都能找到。并且它能够集成在大量的编程工具和效率工具中，像上篇提到的 JetBrains 系列、Eclipse 系列、Xcode、Atom、Sublime Text、VSCode，还有今天的 Alfred，而且还能集成在你的 Terminal(终端) 中。Dash + Alfred 简直不能再爽，关于如何在 Alfred 集成 Dash，自行 Google。Dash 可免费使用，但几天(具体几天我忘了)之后搜索 API 会有延迟，好像 10 秒左右，作为程序员，简直不能忍。不能忍就去花 $24.99 买授权，还是有困难就后台回复「Dash」，我给你。</p>
<p><br></p>
<h4 id="终端"><a href="#终端" class="headerlink" title="终端"></a><strong>终端</strong></h4><p>iTerm 2，macOS 上优秀的开源免费的终端工具。macOS 自带的 Terminal 其实还算是蛮不错的，相比 Windows 的 cmd 简直不知道好到哪里去了，我是疯了才会去和 cmd 比较吧。但 Terminal 和 iTerm 2 相比就有些逊色了，关于 iTerm 2 的使用大家自己查阅。</p>
<p>Oh My Zsh。介绍 Oh My Zsh 之前先说下 Shell，Shell 起到一个媒介的作用，可以理解成“代理人”，它负责外界与 Unix/Linux 内核的交互。也就是把接受到的用户或者应用程序的命令转化成内核能够理解的东西，然后传送给内核。Shell 有很多种，用过 Linux 的朋友肯定知道 bash，bash 就是 Shell 的一种，其他还有很多。Mac 中默认使用的 Shell 也是 bash，但最牛掰的还数深藏不露的 zsh，但是 zsh 配置太复杂，很少有人使用，于是就有人弄了 Oh My Zsh。Oh My Zsh 是用来管理 zsh 配置的，自带了很多好用的基本配置，基本就是 zsh 的标配，有了 Oh My Zsh 不用我们再配置复杂的 zsh，也能快速上手体验牛掰的 zsh 了。开源免费，如何使用呢？自己 Google：iTerm 2 + Oh My Zsh，然后配置你牛掰吊炸天的终端去装 b 吧。</p>
<p>tmux，它是一个终端复用器，使用它可以让你轻松地在一个终端的几个程序之间切换，进行窗口分割，多窗口等，但它最大的优点是：远程 SSH 访问服务器，并能够持久地保存工作状态，即使是非正常掉线。开源免费，经常需要远程连接服务器的朋友赶紧用起来。</p>
<p>Homebrew，它是 macOS 的包管理工具，使用它可以非常容易的安装、卸载、更新、搜索软件包，使用它只需简单的一条指令，就可以实现包管理，再也不需要关心各种依赖和文件路径。快速搜索使用，体验 hacker 的 feel。</p>
<p><br></p>
<h4 id="文件比较工具"><a href="#文件比较工具" class="headerlink" title="文件比较工具"></a><strong>文件比较工具</strong></h4><p>FileMerge，macOS 原生工具。文件比较对于我们开发的人来说应该是经常做的事情，FileMerge 基本可以满足我们日常的需求，不过比较速度较慢，对非 ASCII 内容的文件支持不友好。</p>
<p>VisualDiffer，它是通过 UNIX diff 命令快速、标准、可靠的进行文件和文件夹的比较，操作非常简单，比较速度非常快。还支持文件过滤、颜色标注等。收费的，30 RMB，不贵，这个价格我觉得非常值。如果实在拮据，后台回复「VD」</p>
<p><br></p>
<h4 id="设计类工具"><a href="#设计类工具" class="headerlink" title="设计类工具"></a><strong>设计类工具</strong></h4><p>Photoshop，根本不需要我多说，大家都知道。收费的，没钱赶紧后台回复「PS」，可以获取全套的「Adobe CC 2017」工具。类似的工具 Mac 上有个叫 Pixelmator 的，可以说是精简版的 PS，适合非专业人士使用，收费的。我用过几次，因为之前都是使用 PS，所以用不惯，就舍弃了，安装包也不知道跑哪儿去了，有兴趣的可以去 App Store 购买下载使用，或者在网上找找看。</p>
<p>墨刀，原型设计工具。可以说是傻瓜式的工具，对非专业人士很友好，简单易用。如果是独立开发者，使用墨刀就可以自己设计出完美的原型图。有免费版，不过有限制，个人版 149 元/年，蛮实惠。</p>
<p>Sketch，官方是这么介绍的：轻量、易用的矢量设计工具，让 UI 设计更简单、更高效。就是一个简单易用的设计图工具，如果是独立开发者，Sketch 也是你的选择，不需要去学 PS、Illustrator，使用它就可以替代。付费的，可以免费体验。还想着后台回复？没有 ^_^</p>
<p>不过，后台回复「Mac 工具」可以获取文章中所有“可回复获取的软件和链接”，有点绕口。</p>
<p>后台提供的这些免费的工具，仅仅帮助那些暂时比较拮据的人，如果资金比较富裕或是还可以，建议去购买正版，是一种支持。试想一下，如果别人用着你开发的付费工具，却没有花钱，你什么感受？</p>
<hr>
<p>我使用的与技术相关的、专业的软件工具基本都介绍完了，还有一些其他的通用的工具，本想着一口气写完的，可是我又要去约会了，哎，太忧伤了。</p>
<p>上次的文章转发了没？没有，赶紧转发这篇吧，你离女朋友就差一个分享转发了 ^_^</p>
<p>哈哈，希望大家多多转发分享，毕竟整理起来也蛮辛苦的，转发留言点赞都是对我的支持。</p>
<p><br></p>
<p><br>ikook<br>2018.01.21</p>
]]></content>
      
        <categories>
            
            <category> 软件说 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> Mac </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Markdown 使用汇总]]></title>
      <url>/2018/01/19/markdown/</url>
      <content type="html"><![CDATA[<p>汇总 Markdown 使用过程中遇见的一些较为“偏”的实现方法<br><br></p>
<a id="more"></a>
<h3 id="如何实现段首空格的显示-？"><a href="#如何实现段首空格的显示-？" class="headerlink" title="如何实现段首空格的显示 ？"></a>如何实现段首空格的显示 ？</h3><p>半方大的空白 <code>&amp;ensp;</code> 或 <code>&amp;#8194;</code></p>
<p>全方大的空白 <code>&amp;emsp;</code> 或 <code>&amp;#8195;</code></p>
<p>不断行的空白格 <code>&amp;nbsp;</code> 或 <code>&amp;#160;</code><br><br></p>
<h3 id="图片如何添加超链接？"><a href="#图片如何添加超链接？" class="headerlink" title="图片如何添加超链接？"></a>图片如何添加超链接？</h3><p>插入图片：</p>
<p><code>![alt text](http://path/to/img.jpg &quot;title&quot;)</code></p>
<p>文字链接：</p>
<p><code>[Title](你的链接地址)</code></p>
<p>图片加链接：</p>
<p><code>[![alt text](http://path/to/img.jpg &quot;title&quot;)](你的链接地址)</code></p>
<p>其实就是 图片 和 文字链接 2种语法结合起来用。</p>
<p><br><br><br>ikook<br>2018.01.19</p>
]]></content>
      
        <categories>
            
            <category> 软件说 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac 工具启示录「上」]]></title>
      <url>/2018/01/18/mac-software01/</url>
      <content type="html"><![CDATA[<p>上次的调查反映还算是蛮强烈的，投票结果显示大多数人是需要这么一篇文章的，可能本身就需要这么一篇文章，也可能就是想知道我用的什么工具吧，哈哈。<br><br></p>
<a id="more"></a>
<p>首先，和大家说下 Mac 电脑吧。虽然我使用的只是 macOS，只是黑苹果系统，但依然可以体验到这款高效、安全、简洁、优雅、美观的操作系统的威力，更何况，macOS 还有点文艺青年的感觉。当然，macOS 就是为 Mac 电脑而生的，只有在真正的 Mac 上才能发挥其威力，软件系统和硬件的完美结合，流畅、优雅操作的手感，这在黑苹果上是无法体验的。</p>
<p>个人认为，macOS 是最完美的计算机操作系统，也是最适合所有专业人士使用的系统，不只是程序员，还有设计师、视频编辑、音频制作等等。如果是玩游戏，那还是算了吧，Mac 真的非常不适合玩游戏，这里多句嘴，买来 Mac 电脑把 macOS 替换成 Win 的人，我真的想问一句，是不是脑残？</p>
<p>关于选择 Mac 的原因有太多了，我就不给大家介绍了，毕竟不是这篇文章的重点。想知道的朋友可以关注池建强老师维护的公众号「MacTalk」，有很多关于 Mac 的文章，大家可以去看看。</p>
<p>文章涉及的所有软件、工具均是我亲自使用之后推荐给大家的，只是在我个人角度上来推荐的，并不代表某些工具就是最好用的，而且很多也都有替代品，我之所以觉得好用，可能正好符合我的需求吧。</p>
<p>还要告诉大家的是，工具就只是工具而已，只要能提高我们的工作效率就是好工具，不必纠结于到底使用哪个。我们的目的只有一个，那就是提高效率，当然，在保证效率的前提下，要是能有美观、优雅这些附加条件就再好不过了。</p>
<p>先给大家看下我「Launchpad」首屏。</p>
<p><img src="https://meto.chinakook.com/blog-images/180118-1.png" alt=""><br><br></p>
<p><strong>浏览器</strong></p>
<p>当然首选 Chrome，它的强大之处不必多说。Chrome 支持任何平台，这里推荐给不知道的人。以前写过一篇 Chrome 插件的文章，对大家更加优雅的使用 Chrome 很有帮助，在这儿：<a href="https://ikookblog.com/2017/09/01/chrome-extended/">无扩展，不 Chrome</a></p>
<p>Safari 是 Mac 上自带的浏览器，也非常好用，其阅读器非常强大，同样是我喜欢的浏览器，也许很多人都没用过 Safari，相信我，用过之后你会感谢我的。</p>
<p><br></p>
<p><strong>IDE</strong></p>
<p>JetBrains 旗下 IDE，基本都是精品，比如我现在用的就有：IntelliJ IDEA、WebStorm、PyCharm，分别对应：Java、Web 开发、Python，IntelliJ IDEA 还天然支持 Kotlin，而且 Kotlin 本身就是由 JetBrains 团队开发的。当然，不止支持这些，还有很多，像 PHP、Ruby、Swift、C/C++、Go 等，几乎一应俱全。并且都非常优秀，著名的 Android Studio 也是在其基础上开发出来的。不过，JetBrains 的 IDE 都是收费的，并且还挺贵，拿 IntelliJ IDEA 来说，一年 $499，也可以购买支持旗下所有产品的注册码，一年 $649。学生可以免费申请正版授权，创业公司支持 5 折购买。像我们这些穷屌丝，看这里：<a href="http://idea.lanyus.com/" target="_blank" rel="external">http://idea.lanyus.com/</a>。需要声明的是，资金允许，还是去购买正版吧，省心，也是对开发者的一种支持。</p>
<p>Eclipse，曾经的王者，几乎支持所有常用的编程语言，并且是免费的，插件丰富，现在非常多的开发者依然站在 Eclipse 的阵营中。无需多说。</p>
<p>Xcode，Mac 上独有的非常优秀的 IDE，基本上我们使用的所有 Mac App 和 iOS App 都是用它开发出来的。并且 The Xcode suite 还支持 C/C++、Java、Python 等。可以在 Mac App Store 上免费下载。</p>
<p>HBuilder，非常好用的 Web 开发 IDE，HBuilder 本身主体由 Java 开发，基于 Eclipse，兼容 Eclipse 的插件。据说“快”，是 HBuilder 最大的优势，大幅度提升了 Web 开发效率。嗯，确实挺快的，完整的语法提示和代码输入法、代码块等，用着很爽，免费。</p>
<p><br><br><strong>编辑器</strong></p>
<p>TextMate，Mac 下专有神级编辑器，目前已经免费开源了，以前收费。我用的不多，倒不是不好用，受不了“那朵花”。</p>
<p>Atom，开源免费。简洁直观的图形界面，跨平台，有丰富的主题、插件。是 GitHub 专门为程序员开发的，目前非常火，很多人追随，其中就有我。</p>
<p>Sublime Text，最性感的编辑器。可免费使用，但会时不时弹出烦人的提示框要你购买注册码。拥有很多优秀的前端开发插件，有重多前端开发者追随。小巧绿色速度快，没谁了。受不了弹框看这里：<a href="https://fatesinger.com/100121" target="_blank" rel="external">https://fatesinger.com/100121</a>，支持 Sublime Text 3 3143。</p>
<p>Visual Studio Code，微软开发的跨平台文本编辑器，开源免费，支持调试。颜值也是蛮高的，并且是由微软开发的，实力保障啊。它可以说是前端开发者的福音，插件丰富。我最近使用比较多，非常爽。</p>
<hr>
<p>写着写着发现今天写不完了，还有不少好的软件和工具推荐给大家，如果接着写下去，我估计得写到明天凌晨。那不行啊，那不得耽搁我约会啊，不说了，我去约会了，改天见。</p>
<p><br>ikook<br>2018.01.18</p>
]]></content>
      
        <categories>
            
            <category> 软件说 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> Mac </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[浅谈 JavaScript 闭包]]></title>
      <url>/2018/01/12/js-closure/</url>
      <content type="html"><![CDATA[<p>相信学习 JavaScript 的同学都知道「<strong>闭包(Closure)</strong>」<a id="more"></a>，这个概念在 JavaScript 中是非常重要的，并且在大多数人看来闭包是非常难以理解的概念。既然这样，那今天就带大家一起来看看这到底是何方神圣。</p>
<p>维基百科是这样解释的：</p>
<blockquote>
<p>闭包，又称词法闭包或函数闭包，是引用了自由变量的函数，这个被引用的自由变量将和这个函数一同存在，即使离开了创造它的环境也不例外，所以，<strong>闭包是由函数和与其相关的引用环境组合而成的实体</strong>。</p>
</blockquote>
<p>说了半天一句也没看懂，那我们来看看 JS 官方是怎么解释的：</p>
<blockquote>
<p>闭包是指多个变量和绑定了这些变量的环境的表达式( 通常是一个函数 )，因而这些变量也是该表达式的一部分。</p>
</blockquote>
<p>我去，这又是什么东西？<strong>只看出闭包是个函数</strong>，其他的还是一概不知。</p>
<p>既然这样不知道它们在说些什么，不如跟着我的思路来看一看到底是个什么。</p>
<p>要理解闭包，首先我们要弄明白什么是<strong>词法作用域</strong>和<strong>作用域链</strong>。</p>
<p>作用域一般有两种常见的模型，一种叫做<strong>词法作用域</strong>，另一种叫做<strong>动态作用域</strong>。我们的 JavaScript 就是基于词法作用域的语言。</p>
<p>简单来讲，<strong>词法作用域就是一个变量的作用在出生(定义)时就已经被设定好了，当在本作用域中找不到变量时，就会一直向父作用域中去查找，直到直到为止</strong>。如果不明白的话，看下面的代码大概就能理解了。</p>
<p><img src="https://meto.chinakook.com/blog-images/%E4%BB%A3%E7%A0%811.png" alt=""></p>
<p>代码中 fun1 在其内部已经定义了变量 y，所以在查找 y 时在该作用域(内部函数 fun1 中)内可以找到，则无需再往父作用域中去查找；如果在其作用域内没有查找到，则会在父作用域内查找，也就是使用 fun 函数中的变量 y。</p>
<p>既然 JavaScript 中的函数和变量都有其作用域，那么作用域之间就会产生一条链，我们称之为<strong>作用域链</strong>。假设我们编写了一段 JS 代码，那这段代码就会有一个与之关联的作用域链。这个作用域链就是由全局对象(如：window)、我们自定义的对象(函数，局部变量)组成。比如上面的代码，其作用域链上是这样的：函数 fun1、变量 y ==&gt; 函数 fun、变量 x、y ==&gt; 全局对象。这就是所谓的<strong>作用域链</strong>。</p>
<p>理解了上面的内容，就可以来看看咱们今天的主人公「闭包」了。</p>
<p><strong>函数对象可以通过作用域链相互关联起来，函数体内部的变量都可以保存在函数作用域内，也就是函数变量可以被藏在作用域链之内，这种特性在计算机科学文献中称为闭包</strong>。看上去变量被“封闭包裹”了起来。由此可见，从理论上讲，所有的 JavaScript 函数全都是闭包的，因为它们都是对象，它们都关联在作用域链上。</p>
<p>那么怎么才能<strong>显式</strong>的形成闭包呢？先来看下面的例子。</p>
<p><img src="https://meto.chinakook.com/blog-images/%E4%BB%A3%E7%A0%812.png" alt=""></p>
<p>注意这段代码中标记的地方：内部函数 fun1 在执行前通过外部函数被返回了，外部函数被赋值给了变量 result。这时，变量 result 的值就变成了函数 fun1，也就是说内部变量 name 在所属函数外部被调用了。我们来证实一下：</p>
<center><img src="https://meto.chinakook.com/blog-images/%E4%BB%A3%E7%A0%813.png" alt=""></center>

<p>可以看到 result 的值就是函数 fun1，那为什么还可以读取变量 name 呢？答案就是 result 变成闭包了。</p>
<p>result 由两部分组成：<strong>函数以及创建该函数的环境。函数就是被外部函数返回的内部函数，而环境就是由闭包创建时在作用域中的任何局部变量组成的</strong>。在我们的例子中，result 是一个闭包，由<strong>函数 fun1 </strong>和闭包创建时存在的「<strong>“Google”</strong>」字符串形成。</p>
<p>现在想想，维基百科说的好像就是这么回事：<strong>闭包是由函数和与其相关的引用环境组合而成的实体</strong>。这就解释了为什么可以读取变量 name 了，因为 result 引用的环境是 fun1 函数相关的引用环境，可以理解为： result 处在 fun1 所处的作用域链的位置，既然这样，那自然可以读取变量 name 了。</p>
<p>这就是闭包，现在看来也就是这么回事么，没什么难理解的。</p>
<p>既然已经理解了，那我们再来看一个例子(引用自廖雪峰老师的 JS 教程)：</p>
<p><img src="https://meto.chinakook.com/blog-images/%E4%BB%A3%E7%A0%814.png" alt=""></p>
<p>这个例子中，每次循环，都创建了一个新的函数，然后，把创建的 3 个函数都添加到数组 arr 中返回了。</p>
<p>那么调用 f1() 、f2()、f3() 的结果是什么呢？不就是 1，4，9 吗? 不是。</p>
<center><img src="https://meto.chinakook.com/blog-images/%E4%BB%A3%E7%A0%815.png" alt=""></center>

<p>你没看错，答案就是 16，全部都是！原因在于闭包 results 返回的数组中的函数引用了变量 i，但这个返回的数组中的函数并不是立刻执行的，等到执行时，它们所引用的变量 i 已经变成 4 了，所以结果为 16。还是没明白？上面我们说了，<strong>闭包是由函数和其相关的引用环境组合而成的</strong>，既然所处的环境还是在作用域链原来的位置，那么变量 i 就会在 for 循环的作用下变成 4，而到了你去调用闭包的时候，闭包引用的变量 i 的值自然为 4 了，所以结果自然就是 16 了。</p>
<p>这个例子要提醒大家的是：<strong>返回的函数，不要引用任何循环变量和变量值后续会发生变化的变量</strong>。这一点在使用闭包时一定要牢记。</p>
<p>还要说明的一点就是，<strong>避免滥用闭包</strong>。原因：使用闭包之后，闭包中函数所处的环境会一直存在，所以闭包会使得函数中的变量都被保存在内存中，不会被“垃圾回收机制”回收，进而内存消耗过大，造成网页性能下降。</p>
<p>最后，理解清楚作用域链的概念不但对掌握闭包非常重要，并且对其他知识点（比如 with 语句）同样很重要。</p>
<p><br>ikook<br>2018.01.12</p>
]]></content>
      
        <categories>
            
            <category> 技术栈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Web </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[你不是迷茫，只是缺乏目标]]></title>
      <url>/2018/01/09/do-not-confused/</url>
      <content type="html"><![CDATA[<p>不知道大家有没有这样的体会：时不时就会莫名的迷茫，特别迷茫，干什么都投入不进去。<a id="more"></a>我经常这样，每个月都有，就和女生定期来「某事」一样。</p>
<p>但是，总不能任由自己迷茫下去吧。这时候学会调节自己的状态显得非常重要，我们要正视迷茫，正确的认识迷茫，进而走出迷茫，去做自己该做的事情。</p>
<p>我相信大多数人都会迷茫，而且有时迷茫倒成了现代人的一个标签了。有时我就在想：到底从什么时候开始，迷茫成了一个「时髦」的词了？这个词尤其符合大学生。现在有些同学大学四年多半是混过来的，每天无所事事，上完课就不知道去做什么了；有些人干脆不去上课，日复一日的躲在宿舍打游戏。不去上课其实说的过去，谁还不逃课啊，但要分去干什么，逃课的前提是：你将要去做的事产生的价值，比你在课堂上产生的价值要高，如果是这样，那么但逃无妨。</p>
<p>我觉得，迷茫可以分为两种：短期迷茫和长期迷茫。上面说的，躲在宿舍整天打游戏的同学就是长期迷茫典型案例。</p>
<p>相反，有些拥有长期目标的人，虽然也会迷茫，但他们明白自己想要什么，经过短暂迷茫期，更有动力的向着自己目标努力。</p>
<p>所以，迷茫不可怕，可怕的是长期迷茫。</p>
<p>大多数人之所以会长期迷茫下去，就是不知道自己要干什么，换句话说，就是缺乏长期目标，不能踏踏实实的做事。</p>
<p>举个例子，有些同学看上去蛮好学的，平时没事也学别人泡图书馆。可是，是真的在学习吗。还是只为了拍个照片、视频发朋友圈，换个地方刷微博？这样做只不过是为了寻求心理的慰藉、逃避迷茫罢了。这样的人，根本原因就是没有找到自己想要做的事，没有目标，不能稳下心去做事。</p>
<p>还有那些懒癌晚期的人，把自己的努力看的特别宝贵。他们往往会说，我不是不想努力，我只是不屑于努力。他们把努力当做杀手锏，生怕一亮出来把世人都吓坏了，殊不知，没有人会真的在意。说实话，这只是在逃避，逃避自己。</p>
<p>解决迷茫的良方就是：先去做。20多岁，出错的成本并不高。所以说，现在开始就去做。不要站在原点，动起来，哪怕去试错。你说不喜欢当下的事，那就去做另一件你喜欢的事。给这件事五年时间，在这五年里，付出至少一万个小时的努力，你一定会成为这个领域的专业人士。 </p>
<p>找到自己的长期目标，找到自己想做的喜欢做的事，坚持下去。哪怕有时迷茫，没什么可怕的，稍事休息，过后撸起袖子，更加努力的去做。</p>
<p>从现在开始，Just Do It ！！！</p>
<p><br>ikook<br>2018.01.09</p>
]]></content>
      
        <categories>
            
            <category> 随笔集 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 感悟 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[利用谷歌云免费搭建你想要的服务]]></title>
      <url>/2018/01/04/google-cloud/</url>
      <content type="html"><![CDATA[<p>由于众所周知的原因，在国内不能够在网络上自由的浏览信息，但是有没有解决方法呢？<a id="more"></a>肯定是没有啊，身处国门之内，要学会遵守规则不要踩踏红线。</p>
<p>明确说明，<strong>这篇文章只是教给大家如何利用谷歌云「学习」搭建一个免费的服务器，学习搭建服务</strong>这个技术。至于利用谷歌云做什么，与本文及本人无关。</p>
<p>要想利用谷歌云搭建服务有两个前提条件：</p>
<ol>
<li>拥有其中一张信用卡：Visa、MasterCard、JCB；</li>
<li>有一个可以临时「自由访问」的网络。</li>
</ol>
<p>这两个条件都是硬性条件，缺一不可。信用卡，可以在某宝淘，临时注册用，也就 20 来块，不易搜索，大家用心寻找应该能找到，需要提醒的是：超过 20 块的不要买，更高价格就更不用说了，完全可以找到 20 以下的，某宝还是有不良商家的；临时「自由访问」网络，这个在“百毒”上可以搜索到，比如那个带颜色的灯，可以免费使用，如果实在找不到，那就再找找。</p>
<p>首先，要拥有一个谷歌账户，只要可以「自由访问」网络便可注册，这里就不赘述了，谷歌全家桶都使用这一个账户登录，谷歌云也不例外。</p>
<p>打开谷歌云：<a href="https://cloud.google.com/" target="_blank" rel="external">https://cloud.google.com/</a>，登录你的谷歌账户然后点击免费试用。</p>
<center><img src="https://meto.chinakook.com/blog-images/0.jpeg" alt=""></center>

<p>然后如下所示：</p>
<center><img src="https://meto.chinakook.com/blog-images/1.jpeg" alt=""></center>

<p>地区请选择<strong>美国</strong>，当然任性选择中国我也没辙，只是有什么问题就自己受着吧。继续之后出现如下信息：</p>
<center><img src="https://meto.chinakook.com/blog-images/2.jpeg" alt=""></center>

<p>账号选择个人，然后填写「名称和地址」，不知道怎么填？我教你。在浏览器打开：<a href="http://t.cn/Rt85282" target="_blank" rel="external">http://t.cn/Rt85282</a>，会随机生成一个美国公民的身份，然后按照提示填写即可。需要注意的是，如果有去广告插件先把该站点加入白名单。随机生成的身份如下：</p>
<center><img src="https://meto.chinakook.com/blog-images/3.jpeg" alt=""></center>

<p>不要填写图中的信息，自己去生成。</p>
<p>然后填写「付款方式」中的「信用卡卡号」，当然是填写淘到的卡号了。如果自己有支持的信用卡的话，直接用就可以了，就是直接填写自己的信用卡卡号，不会扣费，到期之后也不会。谷歌不会这么干，某些公司会，你懂！！！</p>
<center><img src="https://meto.chinakook.com/blog-images/4.png" alt=""></center>

<p>如果你是在某宝上买的虚拟信用卡，「持卡人姓名」填写上面生成的名字即可。如果你是使用自己的信用卡，请填写自己的姓名。</p>
<p>然后点击开始免费试用，再进入「我的控制台」，会创建一个默认项目，项目名称是自己生成的，不用我们管，创建之后如下：</p>
<center><img src="https://meto.chinakook.com/blog-images/05.jpeg" alt=""></center>

<p>点击左上角按钮，然后点击「结算」查看谷歌赠送给的 $300 是否到位了。</p>
<center><img src="https://meto.chinakook.com/blog-images/6.jpeg" alt=""></center>

<p>我的用过了，所以是这样的，刚注册会显示剩余的赠金：$300，剩余天数：365。</p>
<p>然后点击：计算 - Compute Engine - VM 实例 - 创建实例。如下：</p>
<center><img src="https://meto.chinakook.com/blog-images/7.png" alt=""></center>


<center><img src="https://meto.chinakook.com/blog-images/8.png" alt=""></center>

<p>按照下图中标注的信息填写，其他默认即可。</p>
<center><img src="https://meto.chinakook.com/blog-images/9.jpeg" alt=""></center>

<p>正在创建：</p>
<center><img src="https://meto.chinakook.com/blog-images/10.png" alt=""></center>

<p>创建完成：</p>
<center><img src="https://meto.chinakook.com/blog-images/11.png" alt=""></center>

<p>创建完成之后，「外部 IP」就是服务器的地址，我这里不适合给你们看。因为我之前创建过一个实例，所以会显示两个，大家如果第一次，肯定是一个。</p>
<p>然后去测试一下实例的速度如何，当然也可以不测试，基本是没问题的。测试地址：<a href="http://t.cn/Ry2GtDf" target="_blank" rel="external">http://t.cn/Ry2GtDf</a>。下图中框起来的地方，大家选择离自己所在地最近的即可。</p>
<center><img src="https://meto.chinakook.com/blog-images/12.jpeg" alt=""></center>

<p>可见速度杠杠的，只要均在 100 毫秒之内，说明就没问题，如果超出就删除这个实例，重新建一个实例试试。</p>
<p>配置服务器，这一步非常关键，非常关键，非常关键。务必仔细操作。</p>
<p>首先，连接 SSH 服务器，如下所示：</p>
<center><img src="https://meto.chinakook.com/blog-images/13.png" alt=""></center>

<center><img src="https://meto.chinakook.com/blog-images/14.png" alt=""></center>

<p>之后提到的所有关于代码的部分均在类似下图窗口中输入：</p>
<center><img src="https://meto.chinakook.com/blog-images/15.jpeg" alt=""></center>

<p>1.输入：sudo -i（注意，sudo 之后有个空格），回车。</p>
<p>2.输入下列代码（注意，这里的代码为一行，中间切不可有回车）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/FunctionClub/YankeeBBR/master/bbr.sh &amp;&amp; bash bbr.sh install</div></pre></td></tr></table></figure>
<p>输入之后回车。然后耐心等待，直到出现第三步中的窗口。</p>
<p>3.出现如下窗口：</p>
<center><img src="https://meto.chinakook.com/blog-images/16.jpeg" alt=""></center>

<p>按键盘上的 <strong>Tab</strong> 键，选择 <no>，然后会跳回刚才的窗口：</no></p>
<center><img src="https://meto.chinakook.com/blog-images/17.png" alt=""></center>

<p>然后输入 <strong>y</strong>，回车。可以等待重启，或者直接关闭该窗口，重新打开，不记得怎么打开就往上翻。</p>
<p>4.输入：sudo -i（和第一步一样）</p>
<p>5.输入：bash bbr.sh start</p>
<p>6.输入以下代码（注意，代码中间没有回车）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.sh &amp;&amp; chmod +x shadowsocksR.sh</div></pre></td></tr></table></figure>
<p>7.输入：./shadowsocksR.sh</p>
<p>出现下图所示内容，则证明上面的工作成功。</p>
<center><img src="https://meto.chinakook.com/blog-images/18.png" alt=""></center>

<p>8.设置密码和端口。在上面所示窗口中输入密码，随便，自己记住就可以，回车；然后会提示输入端口，也是随便，只要在 1-65535 之间就行，我设置的是 789。</p>
<p>9.设置完密码和端口，会提示输入编码方式、混淆方式等，这里直接默认就好，一路回车。如下图所示（图中有提示，认真看）：</p>
<center><img src="https://meto.chinakook.com/blog-images/019.png" alt=""></center>

<p>10.在上一步骤回车之后，大约需要等待 5、6 分钟，这个过程是在配置服务器，耐心等待就好，千万不要关闭窗口，更不要关闭浏览器，更更不能关闭电脑，马上就完工，现在放弃就可惜了。</p>
<p>11.出现以下画面，嗯，恭喜，你成功了。当然，先别记着关闭，复制红色部分到你的电脑中，之后会用到的。然后就可以关闭这个 SSH 窗口了。</p>
<center><img src="https://meto.chinakook.com/blog-images/20.png" alt=""></center>

<p>配置防火墙规则，这是最后的设置了。</p>
<p>1.点击边栏中：网络 - VPC 网络 - 防火墙规则。</p>
<center><img src="https://meto.chinakook.com/blog-images/21.png" alt=""></center>

<p>2.设置协议端口：</p>
<center><img src="https://meto.chinakook.com/blog-images/22.jpeg" alt=""></center>

<p>把端口号设置成刚才我们自己规定的端口号，我的是 789。修改时输入：tcp:789; udp:789，注意，分号“；”后面紧跟一个空格。只设置图中圈红的两个，这两个必须设置，不要漏掉，其余默认。</p>
<p>到此，谷歌云搭建完毕。</p>
<p>搭建完就可以在你的设备上使用了，全平台支持，只需要下载对应的客户端。Mac、Windows、Android 的客户端可以在 GitHub 上搜索 shadowsocks 自行查找。iOS 的客户端需要 App Store 登录国外 ID，然后搜索 Shadowrocket 或者 Wingy。这些客户端如何使用自行搜索，我不知道怎么使用，你懂。</p>
<p>这个速度怎么样呢，反正看某 tube 视频网站的 4k 视频毫无压力，能说明速度如何了吗？</p>
<p>今天的文章主要和大家交流<strong>如何搭建服务器，其他任何目的都没有</strong>。那为什么要以谷歌云为例子呢？因为它可以免费使用一年啊。学会这篇文章之后，再搭建类似服务的服务器时，比如在国内的阿里云、腾讯云上搭建；在自己买的国外服务器上搭建，原理是一模一样的，流程基本一样。对了，话说亚马逊也有免费一年的优惠。</p>
<hr>
<p>写这篇文章我是忐忑的，我是不安的，考虑了很长时间才动笔，大约在一个多月之前就开始思考了。虽然只讨论技术，但毕竟有些不妥之处，希望大家珍重。</p>
<p>现在终于写完了，这篇文章从下午 4 点钟开始下笔，一直写到 8 点多钟，期间要通过操作模拟流程，比较麻烦，也比较辛苦，希望大家能够多多支持，能够分享转发一下让更多人学习。留言、转发都是对我的支持。</p>
<p>我也知道这篇文章可能不会存在太久，但也希望能发挥它的作用。</p>
<p><strong>需要再次声明的是，本文只讨论搭建服务这项技术，请不要用作其他任何商业用途，否则后果自负。</strong></p>
<p><br>ikook<br>2018.01.04</p>
]]></content>
      
        <categories>
            
            <category> 技术栈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 网络 </tag>
            
            <tag> 工具 </tag>
            
            <tag> Google </tag>
            
            <tag> 科学上网 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[回顾 2017，展望 2018]]></title>
      <url>/2017/12/31/old2017_new2018/</url>
      <content type="html"><![CDATA[<p>又到年末了，今天是 2017 年的最后一天。<a id="more"></a>去年开始养成了写年终总结的习惯，毕竟过了一年，也该回顾一下，审视一下自己，以便在下一年有更好的发展。</p>
<p>今天提笔之前看了下<a href="http://ikookblog.com/2017/01/07/old2016_new2017/"> 16 年的总结</a>，恩，我过了糟糕的一年，非常糟糕。</p>
<h4 id="回顾-2017"><a href="#回顾-2017" class="headerlink" title="回顾 2017"></a>回顾 2017</h4><p>年初定下的目标完成量非常差劲，尤其是技术方面，没有长进。年初目标：深入学习 Android 开发，学习 Java 后端开发，接触了解 React Native，学习英语。</p>
<p>Android，倒是没有放弃，但还是停留在表层，没有深入学习。其实我自己是非常热爱 Android 的，它是我在编程这条路上入的第一个坑，对它真的是有特殊情感，可以说，没有 Android 也许我可能不会那么主动的去自学编程。当初凑热闹参加比赛，无奈学校还没有开设 Java、Android 课程，只好自己折腾，从此自学之路开始。</p>
<p>虽然国内 Android 开发现状「惨淡」，其实我心里还是很清楚的，「惨淡」只适用于停留在搬砖阶段的开发者，只要技术够硬，难不成还愁找不到工作？</p>
<p>前端技术蓬勃发展，开始走向大前端，也许在不久的将来就没有前端开发工程师和移动开发工程师之分了。Android、iOS 原生开发技术和前端开发技术配合使用，原生技术的使用将会更加广泛。池老师领导开发的 APP「极客时间」就是一个典型的例子。</p>
<p>Java，当初自学 Android 的时候国内基本还没几个人知道 Kotlin，所以首选语言当然是 Java。当初学习 Java 的时候那叫一个激动，感觉这门语言简直太好了，真简单，比那什么 C 语言强多了，从来不关心什么指针，它爱指向谁就指向谁，管它呢。 后来知道了后端开发，自己有 Java 基础，自然也就继续 Java 的坑了。惭愧的是，这一年下来其实真的没怎么学，只学习了 Java web 的基础，做了几个小的练手项目，还是在近两个月。</p>
<p>React Native 直接没搭理；英语坚持了大约有两个月；健身嘛，也没坚持几天。说到这里真是无地自容，实在有点看不起自己。幸亏自己坚持了阅读和写作，不然这一年真是白活，不可原谅了。</p>
<p>今年 7 月份入手了一款 kindle，也看了几本书。阅读这件事在今年算是完成的蛮好的了，算是养成了阅读的习惯。现在每天都会阅读，公众号、知识星球、知乎、微博、书籍等等。阅读的多了，自然会爱上阅读，这件事已经成了我的习惯，我相信自己 18 年以及未来很多年都会把这件事进行下去。</p>
<p>写作这件事完成的也算是可以，我的博客今年一共更新了 36 篇文章，记录了学习的一点技术，还有一些感悟。除 5 月份和 10月份没有更新外，其他月份都有更新，其中更新最为频繁的是 12 月份，也就是这个月。更新频繁的原因是公众号在这个月更新较为频繁。</p>
<p>自从 7 月份开始运营公众号到现在，我成长了很多收获了很多，当然，我也放弃过。维护公众号其实是非常困难的，能够坚持很难，原创更加难。公众号不像博客，博客我想什么时候更新就什么时候更新，没有什么压力，但是公众号就不一样了，这里有信任我的读者的期待，他们在无形之中督促着我，我不得不保持一定的更新频率。</p>
<p>说来惭愧，我自己其实没什么才能，有时候真的想不出该写些什么，也许正是因为这个主要因素导致我中间停更将近 3 个月的时间。后来因为一个读者私信我，才让我又重新回到这里，具体原因见：<a href="http://mp.weixin.qq.com/s?__biz=MzU5MjE1NTEzNg==&amp;mid=2247483783&amp;idx=1&amp;sn=590a128c0f1f1a9feab956f54082107a&amp;chksm=fe2546e8c952cffe26cf635a2a7142ca666d6f24e274635df05be944d4c0a31e261fabe28b2a&amp;scene=21#wechat_redirect" target="_blank" rel="external">这逝去的日子</a>。</p>
<p>之后公众号被推荐，关注的多了，自然给了我非常大的鼓励和自信。读者的私信，公号的推荐等等，这些让我重新审视自己，我有什么理由放弃，别人还没有放弃，难不成还要自己先放弃？当然不能。后来我重新做了公号的头像，重新做了公号的定位，争取<a href="http://mp.weixin.qq.com/s?__biz=MzU5MjE1NTEzNg==&amp;mid=2247483848&amp;idx=1&amp;sn=822ea41c4ba9db01d07cedcad7602124&amp;chksm=fe2546a7c952cfb1371737554332bdd2f02020fd6b0ae41d528f96d29b4f7c9d22cba77e849d&amp;scene=21#wechat_redirect" target="_blank" rel="external">打造一个「品牌」</a>。</p>
<h4 id="展望-2018"><a href="#展望-2018" class="headerlink" title="展望 2018"></a>展望 2018</h4><p>18 年，我想将会是我人生关键的一个转折点，即将毕业，面临择业。这一年也许比较折腾，但希望自己能有所把握，但愿不会超出自己的预期，当然，也希望不要达不到自己的期望。</p>
<p>做以下几个方面的计划吧。</p>
<p><strong>1.工作</strong></p>
<p>即将毕业，找工作自然是第一位。选择很重要，往往很容易就改变一生的轨迹，希望我在工作上能有一个好的选择，一个能够让自己满意的选择。</p>
<p>18 年找份工作，不妥协。</p>
<p><strong>2.技术</strong></p>
<p>在 2018 年，我将会利用业余时间深入学习 Android 开发，没准哪天就去做「大前端」开发了呢。</p>
<p>其实觉得自己蛮适合后端开发的，有时候页面写多了总觉得没什么意思，还是“纯写代码”来的爽快。在 18 年主攻 Java 后端开发技术，学习主流开发框架。对，我想找一份 Java 开发的工作。自然学好 Java 非常重要，把握好 3 月份前的时间很关键。</p>
<p>学习 Python。人工智能时代第一编程语言，更何况它能做的事非常多，能在后端开发一展拳脚，没事还能写个爬虫，深度学习、数据分析等领域更是火热，自然要学习一下。当然，不能耽搁主线。</p>
<p>可能会上线一个开源项目，具体还没构思好，但有了方向。希望能够做到，很是期待。</p>
<p>18 年提高技术，坚持下去，不妥协。</p>
<p><strong>3.写作</strong></p>
<p>坚持写作，提高写作能力。博客持续更新，大多会和公众号同步更新。公众号目前已经慢慢走上正轨，我心里也基本有了方向，18 年公众号会更好。</p>
<p>18 年要写作，坚持下去，不妥协。</p>
<p><strong>4.生活</strong></p>
<p>健身真的很有必要坚持下去。今年是我自小到现在感冒最多的一年，大概有 5、6 次了吧，明显超出了正常范围，唯一可以说明的就是身体免疫能力下降了很多。以前喜欢运动，经常跑步，自然身体素质还可以。近两年变得很宅，有时间就宅起来。18 年要坚持健身，多跑跑步，有了好身体才有革命的本钱。</p>
<p>改变自己怯场的毛病，自信很重要。也许是宅久了，面对陌生人很容易产生恐惧，自信心不足。今年在学校两次被安排给同学讲课，两次讲的都非常差，怯场、说不出话等毛病出现，还因为紧张导致驾照科三考试挂科。要克服恐惧心理，锻炼演讲能力。</p>
<p>希望自己能有机会多出去旅行，今年 11 月份出去旅行了一趟，感觉很好。能够多去一些地方看看，开阔自己的眼界，蛮不错的。</p>
<p>还有，希望能够多陪陪家人、女友，能多结交一些朋友。</p>
<p>18 年要运动要自信，坚持下去，不妥协。</p>
<hr>
<p>这一年过的稀里糊涂，是自己最迷茫的一年，在技术方面没有大的提升，在生活方面也是没有什么改变。过去的就让它过去，教训留在心里。18 年不要迷茫，要找到好的工作，要做好计划中的事情，要提升自己生活质量，要改变自己，不妥协。</p>
<p>我把今年我的公众号所有原创文章做了一下汇总，地址：<a href="https://mp.weixin.qq.com/s?__biz=MzU5MjE1NTEzNg==&amp;mid=2247483920&amp;idx=2&amp;sn=1bb12c4dbe810f3470fab754aa44a525&amp;chksm=fe25457fc952cc69ff25c960cae39335db9ed6d66d4602d5ef767ab82c038fefe3cb973b52b3&amp;scene=38#wechat_redirect" target="_blank" rel="external">2017 公号原创文章汇总</a>，方便大家查看。</p>
<p>最后，祝大家元旦快乐，新的一年大家都能够有所成长。加油，我们一起努力。</p>
<p><br>ikook<br>2017.12.31</p>
]]></content>
      
        <categories>
            
            <category> 随笔集 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 年终总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[有故事的微信小游戏「跳一跳」]]></title>
      <url>/2017/12/29/wechat-tiaoyitiao/</url>
      <content type="html"><![CDATA[<p>昨天微信官方公布了几条关于小程序的重要消息，并且微信 APP 在同一天进行了更新。<a id="more"></a>小程序的功能升级主要包含以下几个部分：</p>
<ol>
<li>新增任务栏功能 </li>
<li>小程序菜单升级，并支持小程序间快捷切换</li>
<li>微信小游戏正式上线</li>
</ol>
<p>具体见微信官方公号发表的文章：<a href="http://mp.weixin.qq.com/s?__biz=MjM5NDAwMTA2MA==&amp;mid=2695730045&amp;idx=1&amp;sn=c93080476258430accd5a08924c4a1db&amp;chksm=83d74ab6b4a0c3a05163dcf8fc306dab562071fd170f3087f40fdcddec5e61bde57ac9f9e886&amp;scene=21#wechat_redirect" target="_blank" rel="external">小程序功能升级</a></p>
<p>更新到最新版微信就可以去体验以上的功能了。安装更新之后，其中最惹人瞩目的莫过于小游戏「跳一跳」，打开即可看到以下界面。</p>
<p><img src="https://meto.chinakook.com/blog-images/WechatIMG4.jpeg" alt=""></p>
<p>立即开始游戏体验一下，真的蛮不错的，因为是第一次进入游戏就光顾着体验游戏的玩法了，没有太在意一些细节，玩了两把之后就退出了。然后在接下来的一段时间里，朋友圈、微信群等等都在晒战绩，讨论小游戏「跳一跳」，还真是火的够快的。晚上躺在被窝里又认真体验了一下这款游戏，发现这游戏远没有想象的那么「简单」，然后立马上网查了下，果然。</p>
<p>这款小游戏其实讲述了一些的故事，游戏里包含了许多童年陪伴我们成长的事物。</p>
<p>游戏中跳跃的角色是一个英文字母“ i ”，我的觉得应该是“我”的意思，代表着游戏者、游戏的主人公，也就是你。</p>
<p><img src="https://meto.chinakook.com/blog-images/WechatIMG5.jpeg" alt=""></p>
<p>游戏中被「我们」踩的小物体，也就是使我们跳跃的介质，其实包含了许多有内涵的元素。</p>
<p><strong>魔方：</strong></p>
<p><img src="https://meto.chinakook.com/blog-images/WechatIMG6.jpeg" alt=""></p>
<p>相信我们小时候都玩过魔方吧，甚至现在我还经常拿出来拧两把。</p>
<p><strong>井盖：</strong></p>
<p><img src="https://meto.chinakook.com/blog-images/WechatIMG7.jpeg" alt=""></p>
<p>小时候走在路上的时候，总是不由自主地踩各种井盖玩。</p>
<p><strong>卷纸：</strong></p>
<p><img src="https://meto.chinakook.com/blog-images/WechatIMG8.jpeg" alt=""></p>
<p>这个可就了不得了，青春时期的我们免不了使用卷纸吧？不管男生、女生。尤其是男生，都懂得吧？😏</p>
<p><strong>闹钟：</strong></p>
<p><img src="https://meto.chinakook.com/blog-images/WechatIMG9.jpeg" alt=""></p>
<p>长大以后就再也离不开闹钟了。高中为了早起上自习要定闹钟；大学还好，不用早起，但还是会有自律的同学利用闹钟来督促自己，早起学习；工作之后就更加离不开了。</p>
<p><strong>便利店：</strong></p>
<p><img src="https://meto.chinakook.com/blog-images/WechatIMG10.jpeg" alt=""></p>
<p>长大后，为了节省时间，便利店也许是我们经常光顾的地方了。</p>
<p><strong>快递包裹：</strong></p>
<p><img src="https://meto.chinakook.com/blog-images/WechatIMG11.jpeg" alt=""></p>
<p>嗯，剁手快乐。</p>
<p>当然还有微信的故事。</p>
<p><strong>微信红包：</strong></p>
<p><img src="https://meto.chinakook.com/blog-images/WechatIMG13.jpeg" alt=""></p>
<p>在微信群里抢红包，错过了一分好像错过了一个亿。</p>
<p><strong>用户过亿：</strong></p>
<p><img src="https://meto.chinakook.com/blog-images/WechatIMG12.jpeg" alt=""></p>
<p>记录了微信推出 433 天注册用户过亿的辉煌历史。</p>
<p>游戏中还有很多有趣的「小事物」，这里就不一一介绍了，强烈建议大家去体验一番，真的蛮不错的。</p>
<p>不知道大家有没有看出这个小游戏的「深意」：现代社会，我们「关注」的东西越来越多，而我们「关心」的事情却越来越少，就像最开始进入更新后的微信，小游戏界面说的那样：玩一个小游戏才是正经事。我们应该停下来，放松下来，玩一个小游戏。</p>
<p>最后给大家安利一下小游戏「跳一跳」的高分秘籍：</p>
<ol>
<li>连续跳中心点，可以+2、+4、+6、+8分…..</li>
<li>跳到音乐盒上听一会儿，会播放音乐，并且加30分;</li>
<li>跳到便利店停一会儿，便利店会开门，而且额外加15分;</li>
<li>跳到魔方停留一会儿，魔方会旋转修正，并且加10分;</li>
<li>跳到井盖停留一会儿，会有冲水的声音，并且加5分。</li>
</ol>
<p>大家 Get 到了没有，快去刷新你的记录。这个高分秘籍并不是我发现的，是通过我一个微信群群主分享得知的，希望大家玩的愉快。如果玩的愉快了，分享下文章也是不错的，非常感谢 🙂</p>
<p><br>ikook<br>2017.12.29</p>
]]></content>
      
        <categories>
            
            <category> 软件说 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> WeChat </tag>
            
            <tag> 游戏 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[人生苦短，何不学 Python]]></title>
      <url>/2017/12/28/python-data/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本文转载自公众号「红猴子」</p>
</blockquote>
<a id="more"></a>
<p>人生苦短， 我用 Python。</p>
<p>不知道从什么时候开始，这句话开始流行。不过也从侧面反映出 Python 语言的特点：简单、高效。</p>
<p>其实近期我研究了不少代表技术趋势的业界报告以及编程语言排行榜，对于我来说，编程语言这一块，最值得学习的就是 Python。</p>
<p>简单说下其中的原因。</p>
<p>一是随着 AI 浪潮，Python 这门语言也变得越来越热门，无论是国外还是国内的编程语言排行榜，Python 都是排在前面的，并且我相信随着时间的推移，它会越来越热，排名还会继续上升。毫无疑问，Python 已经成为 AI 以及大数据时代的第一开发语言。</p>
<p>二是 Python 语言语法简单，你用 C/C++ 或者 Java 写的几千行才能实现的程序，用 Python 可能只要几百行，甚至还不用这么多。在这个科技快速发展的时代，效率代表了一切。</p>
<p>三是 Python 应用范围广，拥有着各种各样强大的扩展库，无论是 web, 爬虫还是数据分析，Python 都可以完成，所以对应的需求 Python  的工作岗位也很多，学会 Python 可以轻松的找到工作。</p>
<p>四是近期浙江省把 Python 纳入高考，连山东省六年级小学生都开始学 Python 了，作为程序员，不会 Python，会不会被现在的小孩子鄙视，细思极恐。</p>
<p>所以，还有理由不学 Python 呢？！</p>
<p>坦白的讲，从上学直至后来的工作，我一直接触的都是底层开发，并没有系统的学习和用过 Python。不过作为一名程序员，我对技术还是挺敏感的，我认为无论你是不是从事相关的工作，都要适当学习一下现在比较热门的技术，千万不要落后太多，也千万不要被眼前的那么一点工作禁锢住自己的思维，这样可以让自己时刻保持竞争力。</p>
<p>从很久之前的 Android，到后来的微信小程序，到如今的 Python，机器学习，刚出来的时候，我都会找来资料或者书籍研究一番，写写代码，不求一定要非常精通，至少跟别人交流的时候，你要知道这是什么吧，大致的原理要能说的清楚吧。</p>
<p>当然，我并不是说让所有人都去追逐新技术，什么流行学什么。什么是主业什么是副业，你自己也要掂量地清，该花多少时间在上面也要自己把握。我的意思是，工作或者学习之余，学些热门技术，可以让自己保持敏锐度和竞争力，因为说不好什么时候这些热门技术就成了你的饭碗。甚至在一些氛围宽松的公司，是鼓励你去利用这些新技术对现有的工作做出创新的。</p>
<p>我就认识不少在一个比较狭窄的领域工作了很多年，因为不会别的，也没时间学别的，只能一条道走到黑的人。即使工资低，也不敢轻易跳槽，因为很难找到这方面的工作。再加上工作也忙，挤不出时间学习新技术，这就很被动了。殊不知自己还在十几年如一日的用着「陈旧」的技术，外面早就变天了。</p>
<p><strong>回到 Python 上，谈谈怎么学习，说下我的一些观点。</strong></p>
<p><strong>1.</strong><br>我认真找了一下，发现网络上关于 Python 的学习资料很多，各种书籍、教程、文档、视频、工具…非常非常之多。所以你不用发愁找不到学习资料。</p>
<p><strong>2.</strong><br>找到了巨多的学习资料，却不知道从哪里入手？其实这也是我不会把「 Python 学习」众多的网络资源分享给你们的原因，因为太多了，而且重复率很高，完全没必要。你需要的是，找到一至两个比较权威的教程，好好学下去，系统的认真学完，这就够了。</p>
<p><strong>3.</strong><br>如果你执意让我推荐的话，那么就 Python 官网，廖雪峰的官网，如果再加一本书的话，那就《A Byte of Python》好了。没错，这些网上都能轻易搜到，而且免费。</p>
<p><strong>4.</strong><br>如果这是你的第一门编程语言，建议你把教程一字一句的认真读完。如果你有其他编程语言的基础，那么可以像我一样快速浏览一下教程，接着在看代码的过程中，把教程当作工具书去参考。</p>
<p><strong>5.</strong><br>对于有编程基础的同学，可以去网上找来别人的 py 程序，一边试着理解，一边有不懂的就去查阅文档或者教程。这样比单纯的从变量语法开始啃教程进展更迅速。</p>
<p><strong>6.</strong><br>跟学习其他所有编程语言一样，想掌握一门语言，重点在于写。只看不写，跟不会没什么区别。一个项目写下来，Python 的知识点就掌握的七七八八了。</p>
<p>关于如何学习 Python，暂时就讲这么多，以后有机会的话，我会分享更多这方面的姿势，如果想到更好的方法，我也会补充。</p>
<p>人生苦短，何不学 Python？</p>
<p><br>ikook<br>2017.12.28</p>
]]></content>
      
        <categories>
            
            <category> 技术栈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Python </tag>
            
            <tag> 转载 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[请为迷失的自己照亮希望的方向]]></title>
      <url>/2017/12/27/view-text-03/</url>
      <content type="html"><![CDATA[<p>长大的途中，会遇到各种困难 <a id="more"></a><br>可能是思念的距离<br>是职场竞争的压力<br>是初入社会的现实<br>是生存之道的艰辛<br>是情感失利的感伤<br>…</p>
<p>我觉得每个人的人生都不一样<br>有的人从小就很坚强<br>但长大时困苦击溃了最后的心防<br>有的人从未认识困难<br>所以面对成长的高墙时手足无措<br>我们一直很勇敢<br>只是“长大”这道关卡太难闯<br>那些曾握过的手<br>唱过的歌<br>流过的泪<br>爱过的人<br>一起携手走过的时光<br>又何尝不是生命中最值得珍惜<br>最美好的记忆呢？</p>
<p>也许<br>正是有了这么多的相遇与别离<br>正是有了这么多人闯进我们的生命里<br>才会让我们成长之路变得不一样</p>
<p>但无论是与你携手同行的亲人、朋友<br>还是爱人<br>他们都终将离你而去<br>终将会在某个渡口处与你离散</p>
<p>如果此刻的你正身处黑暗中彷徨<br>在生活的暗流中迷失了方向<br>不管过去是如何度过的<br>只要你还对未来还抱有幻想<br>就不要轻易放弃希望</p>
<p>既然无人能懂无人愿帮<br>何不试着给自己勇气<br>前方是黑暗的话就撕开一道口<br>是迷宫就找到一条出路<br>是高墙跨越不了那就绕过它</p>
<p>谁的青春不迷茫？<br>只是自己愿不愿意坚持罢了</p>
<p><br>ikook<br>2017.12.27</p>
]]></content>
      
        <categories>
            
            <category> 观文记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 感悟 </tag>
            
            <tag> 观文 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[前端基础学习资料来啦 ！！！]]></title>
      <url>/2017/12/25/web-data/</url>
      <content type="html"><![CDATA[<p>前些日子逛 CSDN，无意中看到一个博客专栏：讲给 Android 程序员看的前端教程。<a id="more"></a>打开文章认真读了一篇，感觉质量真的很不错，并且每篇文章都有配套的视频教程，简直良心。这个系列的作者是谷哥的小弟，经常逛 CSDN 的朋友应该不陌生，是 CSDN 的博客专家，文章质量都很不错。</p>
<p>看到这么良心并且高质量的教程忍不住去读，索性全都看了一遍，刚好可以回顾一下之前学的知识。文章中所涉及的知识点比较全面，内容整理的非常系统，很有条理。</p>
<p>说实话之所以会把这个系列的教程从头到尾看一遍，是因为之前折腾前端的时候也没有做整理，时间长了不怎么用忘得也差不多了。有这么好的资源当然不能放过，正好可以整理下知识点，也好不时拿出来回顾下。</p>
<p>今天把我整理的这些知识点拿出来分享给大家，希望能帮助到有需要的朋友。整理出来的内容都是出自上面提到的教程，有时间有耐心的朋友不妨直接看教程，地址：<a href="http://t.cn/RHy9s8Y" target="_blank" rel="external">http://t.cn/RHy9s8Y</a>。没时间的朋友可以直接看我整理的内容，下面是部分内容的截图。</p>
<p><strong>1.HTML：</strong></p>
<p><img src="https://meto.chinakook.com/blog-images/HTML5%E6%96%87%E6%A1%A3.jpeg" alt=""></p>
<center>HTML5 整理（文档版）</center>

<p><img src="https://meto.chinakook.com/blog-images/HTML5%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.jpeg" alt=""></p>
<center>HTML5 整理（脑图版）</center>

<p><strong>2.CSS:</strong></p>
<p><img src="https://meto.chinakook.com/blog-images/CSS%E6%96%87%E6%A1%A3%E6%88%AA%E5%9B%BE.jpeg" alt=""></p>
<center>CSS 整理（文档版）</center>

<p><img src="https://meto.chinakook.com/blog-images/CSS%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.jpeg" alt=""></p>
<center>CSS 整理（脑图版）</center>

<p><strong>3.JavaScript：</strong></p>
<p><img src="https://meto.chinakook.com/blog-images/JS%E6%96%87%E6%A1%A3.jpeg" alt=""></p>
<center>JS 整理（文档版）</center>

<p><img src="https://meto.chinakook.com/blog-images/JS%20%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.jpeg" alt=""></p>
<center>JS 整理（脑图版）</center>


<p>完整的内容全都通过「幕布」设置成了分享，链接如下。<br>HTML：<a href="https://mubu.com/doc/QxEVRYTN0" target="_blank" rel="external">https://mubu.com/doc/QxEVRYTN0</a><br>CSS：<a href="https://mubu.com/doc/19Gvm21fz0" target="_blank" rel="external">https://mubu.com/doc/19Gvm21fz0</a><br>JavaScript：<a href="https://mubu.com/doc/3CakGAZol0" target="_blank" rel="external">https://mubu.com/doc/3CakGAZol0</a></p>
<p>最后给大家推荐几本有关学习前端的书籍，这些书籍谷哥的小弟在其系列教程中也有推荐。</p>
<p>《Head First JavaScript》，通过这本书籍可以轻松入门 JavaScript（当然通过我整理的资料一样轻松入门）， Head First 系列的书籍质量不用我多说了吧。</p>
<p>《JavaScript 权威指南》，这本书质量非常高，更值得一提的是，中文版由阿里巴巴前端技术团队翻译，中文版质量也非常有保障。全面讲述了 JavaScript 语言的核心，第 6 版还包含了 HTML5 等知识点，非常值得一读。</p>
<p>《ECMAScript 6 入门》，这本书的作者是阮一峰前辈的作品，并且在其网站免费公开，质量同样非常高。地址：<a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">http://es6.ruanyifeng.com/</a>。</p>
<p>学习资料就推荐这些，书不在多，精才是最重要的，能够啃透上面提到的书籍就很不错了，我也还在啃的过程中。在我的公号后台回复「前端基础」获取文中所有的链接。</p>
<p>PS：如果文章对大家有所帮助，希望大家多多分享。</p>
<p><br>ikook<br>2017.12.25</p>
]]></content>
      
        <categories>
            
            <category> 技术栈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Web </tag>
            
            <tag> 前端 </tag>
            
            <tag> 学习资料 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[成为「自燃型」 的人]]></title>
      <url>/2017/12/22/self-ignite/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本文节选自书籍「干法」；作者：稻盛和夫</p>
</blockquote>
<a id="more"></a>
<p>物质有“可燃型”、“不燃型”和“自燃型”三种。</p>
<p>同样，人也可以分为三种：第一种是点火就着的“可燃型”的人，第二种是点火也烧不起来的“不燃型”的人，第三种是自己就能熊熊燃烧的“<strong>自燃型</strong>” 的人。</p>
<p>想要成就某项事业，就必须成为能够自我燃烧的人。</p>
<p>要成为“自燃型”的人，在热爱自己工作的同时，必须持有明确的目标。</p>
<p>像我这样的经营者整天考虑的就是，公司“应该做这个”、“应该那么干才更好”这样的问题。刚参加工作的年轻人也会在自己心中描绘自己将来的梦想，思考我想做这样的人、我想干怎样的事等问题。</p>
<p>但年轻人中偶尔也有这样的人，他们相信虚无主义，总是表情冷漠，怎么也热乎不起来。不管周围的人干得如何热火朝天，他们不仅不燃烧，还给别人泼冷水，他们是冷若冰霜的人。</p>
<p>遇上这样的人可不好办。</p>
<p>在企业里，在体育团队里，这种“不燃型”的人哪怕只有一位，整个集体的氛围就会变得沉闷压抑。所以我总是这么想：</p>
<p>这种不燃型的人大可不必留在公司。我希望同事们都是自燃型的人，不用“点火”，他们也会自动燃烧。至少，当燃烧的我接近时，他们是能同我一起燃烧的“可燃型”的人。</p>
<p>所谓“自燃型”的人，就是从来不会“等别人吩咐了才去干”、“因为有了命令才工作”的人，而是“在别人吩咐之前自发去干”的主动积极的人，他们应该都是热爱工作的人。</p>
<p><strong>要想将自己的能量最大限度地发挥出来，让工作顺利进行，就必须成为热爱工作的“自燃型”的人。</strong> </p>
<hr>
<p><strong>「干法」作者简介</strong>：稻盛和夫「日本经营之圣」，1932 年出生于日本鹿儿岛，鹿儿岛大学工学部毕业。27 岁创办京都陶瓷株式会社（现名京瓷 Kyocera），52岁创办第二电信（原名 DDI，现名 KDDI，目前在日本为仅次于 NTT 的第二大通讯公司），这两家公司又都在他的有生之年进入世界 500 强，两大事业皆以惊人的力道成长。 稻盛和夫的释义是涵盖了生活态度、哲学、思想、伦理观等因素人格。他建议领导者的选拔标准是德要高于才，人格第一，勇气第二，能力第三。他指出热爱是点燃工作激情的火把。无论什么工作，只要全力以赴去做就能产生很大的成就感和自信心，而且会产生向下一个目标挑战的积极性。成功的人往往都是那些沉醉于所做事的人。</p>
<p>「干法」这本书是稻盛和夫先生以 78 岁高龄出任日航 CEO 之后推出的第一本书，也是稻盛和夫先生首次分享自己在工作上的做法和心得。稻盛先生结合自己 70 余年的切身经历所获得的工作经验，探讨工作真正的意义以及如何在工作中取得成绩，为身在职场的人点燃了指路明灯，同时，这些思想对企业管理者也有借鉴意义。</p>
<p>这些天其实蛮负能量的，学校最近一直也没什么事，在松散的环境里非常容易随波逐流。昨天拿起在 kindle 里躺了许久的这本「干法」重读，又燃起了心中将灭的小火星。我不是一个“自燃型”的人，算是介于“可燃型”和“自燃型”中间的人，在懈怠的环境里我很容易被别人影响，但不会影响很长时间，自己在那种环境中待久了会心慌，会觉得是在亲手扼制自己的生命，然后就会立即鼓足动力去干该干的事情。</p>
<p>我想很多人应该是“可燃型”的人，在遇到外界的鼓励或者压力会燃起斗志。“可燃型”的人需要持续的鼓励或压力，在遇到困难的情况下给予帮助和鼓励，会使其持续燃烧，实现自我的蜕变。</p>
<p><strong>「自燃型」的人会有强烈的责任心和主人翁意识，会迎接挑战，时刻提高自身的素养和技能。他们一般不甘于现状，有强烈的上进心，根本不需要督促，正如书中所说，会自己点燃自己。</strong></p>
<p>我们都需要做一个“自燃型”的人，最次也要是一个“可燃型”的人。要成为「自燃型」的人，需要有热情、有目标。<strong>热情来自于自己内心对工作生活的热爱，目标是对自己将来的期待和规划</strong>。只要我们从一点一滴的小事做起，全心投入，热情就会慢慢在心中诞生，设定目标，然后走下去。「自燃」的原因很重要一部分来自于<strong>热情、热爱</strong>，所以我们要找到自己热爱的事情，或者培养对某件事的热情。</p>
<p>希望我们都能成为「自燃型」的人，Fighting ！！！</p>
<p><br>ikook<br>2017.12.22</p>
]]></content>
      
        <categories>
            
            <category> 观文记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 观文 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[打造一个「品牌」]]></title>
      <url>/2017/12/15/brand/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p>自从开通公众号「ikook」之后也算是用心维护了，基本没有违背当初开号时许下的承诺 —— 认真坚持维护此公号。虽说中间差点放弃，好在坚持过来了，也总算没有辜负自己。</p>
<p>公众号从申请到被 stormzhang 推荐之前，关注人数一直就那么几十个人，之后被推荐关注量迅速破千，虽然不是多么惊人的数字，但对我来说已经是很“重”了，我从来都没想过自己的公众号会被推荐，也没想过能够有这么多人关注，更没有想过有很多读者表示支持和感谢。经过这些事情，我觉得应该更加用心的去做，不然真的有些对不起支持和鼓励我的那些朋友。</p>
<p>经过最近一段时间的考虑，为了能够更好运营和维护，我觉得有必要对这个号做出一些改变。首先，说一下最直观的感受：一个公众号最具有辨识度的应该是头像而不是名称，头像就像是一个人的脸，好比你刚认识了一个陌生人，下次再见面，你一定能记起他的模样，但名字就不一定能够记住了。在这里是同一个道理，别人能记得住公号的头像但不一定能记住公号 ID。</p>
<p>这个号曾经尴尬的被误认为是另一个号，原因就是头像撞了。虽然这个头像我已经用了有几年了，但毕竟是来自网络，撞了的可能性还是比较大的，怪不得别人，所以我决定将公号头像做一下改变。最近几天我一直在各种做图各种找头像，想过不少点子，甚至想把拍一张自己的照片扔上去，后来想想还是算了吧，别回头再吓的大家伙儿都取关就玩现了。最后我决定用「脸萌」结合自己的一些特点做个头像，虽然是自己拼起来的，但也还是有撞的可能性，然后我就用 PS 做了点小改动，又加了一个「ikook」作为标识，最后就有了下面的头像。</p>
<p><center><img src="https://meto.chinakook.com/ikook.jpg" alt="ikook 头像"></center></p>
<p><center>公号 <strong>ikook</strong> 新头像</center><br><br></p>
<p>再者就是公号的定位，「<strong>ikook</strong>」最初的定位是「分享科技、生活、技术、人生、经验感悟等，同时记录个人成长历程」，一段时间之后我回过头看公号的定位，怎么看怎么杂，怎么看怎么乱，写这么多不就是说什么都写吗？然后我就把功能介绍改成了「就想写点东西，随便什么」。这句话虽然是这样写，但不可能想写什么就写什么，随便写打发大家，那是对自己不负责更是对你们的不负责，这话更多是想告诉大家这里是一个较为自由的地方，我本身不想给自己设限，更想随意一点。</p>
<p>我并不想把它做成一个纯技术的号，我想的是：在那里能够有帮助到大家东西（不限于技术），能够给大家带来启发，同时记录下自己的点滴。本着这个原则，结合这几天的思考，我想在公号开设一个小栏目 —— 加油站，这个加油站，可不卖油。这个小栏目会收录一些激励、感悟、思维方式等文章，我希望能够通过这么一种方式为大家带去一点鼓励和改变。这个栏目的文章会通过转载等方式呈现给大家，转载的内容可能会来自其他公众号、书籍等，当然也会有我的原创，但不会很多，毕竟自己还没活明白。同时，欢迎大家投稿，不限于这个「加油」文，技术之类也一样。</p>
<p>不要因为「加油站」以为我以后不写文了，这只是一个小栏目，我依旧照常更新原创文章，原创文会有技术、感悟记录等，绝不会被这个小栏目所干扰，我保证。小栏目更新可能会频繁一些，大多在推送的第二篇图文，推送间隔在 1-2 天，文章标题的格式会是这样的“加油站 | 文章标题”；我的原创文章更新频率不能保证，总之和往常一样，会随意一点。当然，这里也会同步更新的。</p>
<p>今天这些改变算是公众号的起点，是我一个小小梦想的起点。对，正如标题所写的，我想打造一个「个人品牌」，我想将它做成一个品牌，做成一个有意义、有点影响的公众号。微信公众号的标语是：再小的个体，也有自己的品牌。这句话刚好能够表达出我这个小小的梦想。</p>
<p>其实说个人品牌有点片面，我公众号存在的意义在于你们和我，缺一不可，如果没有大家的关注和支持，也就不可能有今天的公众号「ikook」。因此，我希望能够和大家一起维护它，能够一起支撑起这个品牌。所以，如果大家有什么好的想法，比如：想看什么文章；想要它做什么改变；增加什么小栏目；有什么好的意见和建议等，随时都欢迎大家在公众号留言或后台私信，也可以加个人微信私信我。我个人微信可以在公众号回复「ikook」获得，或者点击公号菜单栏<strong>关于</strong>里的「个人微信」添加。</p>
<p>梦在此启航，加油。</p>
<p>PS：这两天内会把公号头像替换掉，就文中那个。到时候不要脸盲哟  :)</p>
<p>PPS：使用微信扫描下方二维码关注哟 ！！！</p>
<p><br>ikook<br>2017.12.15</p>
]]></content>
      
        <categories>
            
            <category> 随笔集 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 公号运营 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java 学习资源送给你们]]></title>
      <url>/2017/12/09/java-res/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p>前几天的文章：<a href="http://ikookblog.com/2017/12/05/back-end_dev/">后端开发基础都有哪些？</a>给大家简单介绍了下 JavaWeb 开发需要掌握的基础知识，文章中所涉及的都是必备知识。虽然给大家介绍了要学习什么知识，但还是会有同学不知怎么开始学习。</p>
<p>既然是这样，那我就负责到底（还不是给自己挖了坑，哈哈）。今天给大家分享下 Java 整套的学习资源，包括：视频、书籍（电子书）、编程工具。初学者学习编程的正确方式是：视频 + 书籍。</p>
<p>书籍比较系统，由浅入深，但是如果只看书籍容易造成抵抗心理，技术类书籍比较枯燥，想要认真看完一本技术类书籍非常困难，尤其是初学者，更何况一旦遇到知识难点，初学者只看书会很难看懂；有人会说了，那只看视频不就完了，就技术类视频来说：视频所讲解的内容会比较浅显，有时候一些小的知识点会一句话带过，而且由于视频本身限制更不会去讲解知识点的原理是什么，再者，视频不如书籍系统。所以视频 + 书籍结合一起学习对初学者最友好。</p>
<p>好了，废话不多说，上干货。</p>
<h3 id="视频："><a href="#视频：" class="headerlink" title="视频："></a>视频：</h3><h5 id="Java-基础："><a href="#Java-基础：" class="headerlink" title="Java 基础："></a>Java 基础：</h5><p><img src="https://meto.chinakook.com/blog-images/Java%E5%9F%BA%E7%A1%80.jpeg" alt="Java 基础视频"></p>
<p>这些都是业内评价较高的 Java 基础入门视频，前 4 个视频就是围绕 Java SE 来讲，而最后一个主要讲解 Android 学习中要用到的一些 Java 基础，区别不大。毕向东老师的视频评价是非常高的，非常多的人是通过这个视频入门的，唯一不好的就是有点老了，现在 Java 都到 9 了，有些特性没有涉及到。第四个是比较新的视频，涉及到了 Lamda 表达式等一些 Java 8 的新特性。</p>
<p>获取地址：<a href="https://pan.baidu.com/s/1jIkrYj8" target="_blank" rel="external">https://pan.baidu.com/s/1jIkrYj8</a>；密码：h8su</p>
<h5 id="Java-Web："><a href="#Java-Web：" class="headerlink" title="Java Web："></a>Java Web：</h5><p><img src="https://meto.chinakook.com/blog-images/JavaWeb.jpeg" alt="JavaWeb 视频"></p>
<h5 id="Java-EE："><a href="#Java-EE：" class="headerlink" title="Java EE："></a>Java EE：</h5><p><img src="https://meto.chinakook.com/blog-images/JavaEE.jpeg" alt="JavaEE 视频"></p>
<p>Java Web、Java EE 的视频均来自某培训机构公开的视频教程，我看过其中一些 Java Web 的，还算不错。</p>
<p>Java Web 获取地址：<a href="https://pan.baidu.com/s/1eS4cWCy" target="_blank" rel="external">https://pan.baidu.com/s/1eS4cWCy</a>; 密码：ypx2</p>
<p>Java EE 获取地址：<a href="https://pan.baidu.com/s/1i5J5QN7" target="_blank" rel="external">https://pan.baidu.com/s/1i5J5QN7</a>; 密码：7op4</p>
<h3 id="书籍："><a href="#书籍：" class="headerlink" title="书籍："></a>书籍：</h3><p><img src="https://meto.chinakook.com/blog-images/Java%E4%B9%A6%E7%B1%8D.jpeg" alt="Java 书籍"></p>
<p>以上差不多均为 Java 基础书籍，入门我推荐「Head First Java」，这本书能够让你轻松入门 Java，不过其中一些知识点没有讲解到。「Java 核心技术（上、下两卷）」这本书涉及知识非常全面，基本涵盖了 Java SE 所有的知识点，看起来有点困难，有些枯燥，不过还好，用心看，结合视频，坚持看完会有很大收货。</p>
<p>Java Web 书籍我推荐传智播客推出的「Java Web 程序开发入门」和「Java  Web 程序开发进阶」两本书，基本涉及 Java Web 所有基础知识点，并且内容比较容易看懂，结合上面的视频掌握 Java Web 基础知识不成问题。</p>
<p>关于 Java EE 的书籍我暂时无法推荐给大家，毕竟我也才开始踩坑，所以就暂时不给大家推荐了。不过需要的同学可以上网查一下，或是问一下身边的前辈，基本能够找到好的书籍。</p>
<p>获取地址：<a href="https://pan.baidu.com/s/1c1GHZDe" target="_blank" rel="external">https://pan.baidu.com/s/1c1GHZDe</a>  密码：7e28</p>
<h3 id="工具："><a href="#工具：" class="headerlink" title="工具："></a>工具：</h3><p>编程工具我就不给大家分享链接了，毕竟大家的系统不一定和我的一致，并且大都可以在网上下载，那就直接和你们说几个比较常用的 Java 编程工具吧。</p>
<p>eclipse，它是老牌 Java 编程工具，也是曾经 Java 开发 IDE 中的霸主。其自身就是由 Java 开发，插件丰富，曾经是 Java 开发必选的 IDE。</p>
<p>IntelliJ IDEA（简称 IDEA），它是由著名的 Jet Brains 团队开发的 IDE，Kotlin 就是由这个团队开发，非常牛。目前这个 IDE 非常火， 代码审查、代码自动提示、智能代码助手、重构、J2EE 支持、颜值高等等优点，更何况背后有这么屌的团队。IDEA 在业界被公认为最好用的 Java 开发工具，已经有越来越多的人使用它。它是 Java IDE 的未来。 对了，它的完整版需要购买注册码，并且价格不低，有条件的不妨直接购买，没条件的同学看这里：<a href="http://idea.lanyus.com/" target="_blank" rel="external">http://idea.lanyus.com/</a></p>
<p>其他较为著名的 Java IDE 还有：Netbeans、Jbuilder。目前使用者比较少，有兴趣可以了解下。</p>
<hr>
<p>好了，关于 Java 的资料就先分享到这里。我自己的学习资料比较丰富，涉及面也算广泛。比如今天就该分享的 MySQL、Oracle 等数据库相关学习资料等等，其他的还有不少。之所以没有分享是想要看一下大家对这篇文章的反映，如果大家反映较好，之后我会慢慢把其他资料分享给大家。</p>
<p>最后有个请求，我希望大家能够多多分享一下文章，毕竟我整理的这些资料都是经过用心寻找和花费大量时间整理出来的，这些分享出来的都是我精心挑选的，没有营养没有价值的我都剔除了。所以大家多多转发分享、点赞，也算是对我的支持了，不胜感激。</p>
<p>PS：文中所有链接均可在我的公众号会话窗口回复「Java」获取（扫下方二维码关注）。</p>
<p><br>ikook<br>2017.12.09</p>
]]></content>
      
        <categories>
            
            <category> 技术栈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端开发 </tag>
            
            <tag> 学习技巧 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[后端开发基础都有哪些？]]></title>
      <url>/2017/12/05/back-end_dev/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p>由于近来国内移动开发现状所致，应该有不少移动开发者在考虑转别的方向，个人感觉后端开发是个不错的选择。当然，人工智能、大数据异常火爆，有能力的同学不妨试一试。</p>
<p>正好最近一段时间在学习 Java web，基础知识基本过了一篇，在这里回顾一下，刚好可以帮助想要转后端朋友熟悉下流程。</p>
<p>后端开发一般是指 web 系统开发，想要学习后端开发，首先要有 HTML、CSS、JavaScript 基础。web 页面简单来说就是由这三者组成，HTML 负责结构、CSS 负责展现、JavaScript 负责行为。一般 web 页面是由前端工程师来做，我们要学习后端首先要有前端基础，不要求能够开发出多么漂亮的页面，能够掌握基础就 ok。</p>
<p>过完前端基础知识之后就可以开始学习后端开发了，要掌握的基础知识有：XML、HTTP 协议、Servlet、会话（Cookie、Session）、JSP、JDBC、Filter ，还有自定义标签、各类标签库等，下面分别给大家介绍下其中一些关键技术。</p>
<h3 id="XML："><a href="#XML：" class="headerlink" title="XML："></a>XML：</h3><p>看到 XML 有人会问：它和 HTML 有什么关系吗？首先，它们都是标记文本，结构上大致相同，但实际上有本质的区别。</p>
<p>HTML 是 HyperText Markup Language，超文本标记语言，用来显示数据，不区分大小写，标记为预定义的；而 XML 是 Extensible Markup Language，可扩展标记语言，用来描述数据的性质和结构，严格区分大小写和标签书写方式，其标记可随意定义并且可扩展。</p>
<p>其次，XML 可用作配置文件，目前绝大多数 Java 应用程序的配置文件都是 XML。所以，XML 主要用于程序之间的数据交换，以及描述程序的配置信息。</p>
<h3 id="HTTP-协议："><a href="#HTTP-协议：" class="headerlink" title="HTTP 协议："></a>HTTP 协议：</h3><p>HTTP，Hyper Text Transfer Protocol 的缩写，译为超文本传输协议。在浏览器与服务器的交互过程中，需要遵循一定的规则，这个规则就是 HTTP，它专门用于定义浏览器与服务器之间交换数据的过程以及数据本身的格式。</p>
<p>说白了，HTTP 就是浏览器和服务器聊天的一种约定，这个约定需要确保双方之间互相理解。HTTP 协议是一种“无状态”协议，就是说每次浏览器和服务器通讯都会建立一次连接，数据交互完成则断开连接，下次通讯只能再建立连接，由于建立连接非常消耗资源，所以引出了 HTTP 1.1 版本，具体我们下次再谈。</p>
<p>HTTP 协议是非常复杂的，不过最重要的就几点，比如 GET、POST 请求；HTTP 状态码；同步、异步；如何维持状态（会话技术：Cookie、Session）。</p>
<h3 id="Servlet："><a href="#Servlet：" class="headerlink" title="Servlet："></a>Servlet：</h3><p>Servlet 是开发动态 web 资源的重要技术，其他常见的还有：JSP、ASP 和 PHP 等，同时 Serlvet 是后端开发的重要基础技术。其主要功能在于交互式地浏览和修改数据，生成动态 web 内容。</p>
<p>绝大多数情况下 Servlet 用来扩展基于 HTTP 协议的 web 服务器，但它是可以响应任何类型请求的。其工作模式为：浏览器请求服务器；服务器启动并调用 Servlet，Servlet 根据客户端的请求生成响应内容；服务器将响应内容返回客户端。</p>
<p>需要重点掌握的是：Servlet 生命周期、HttpServlet「doGet() 和 doPost() 方法」、请求和响应。</p>
<h3 id="JSP："><a href="#JSP：" class="headerlink" title="JSP："></a>JSP：</h3><p>JSP 全称为 Java Server Page，即 Java 服务器页面。它其实是 Servlet 的扩展，由于 Servlet 大多是用来响应 HTTP 请求，并返回 web 页面，所以在编写 Servlet 时会涉及大量的 HTML 代码，这给 Servlet 代码的编写和维护带来非常大的障碍，为了解决这一问题，就此产生了 JSP。</p>
<p>它的作用是使用 HTML 的编写方式，在适当的地方嵌入 Java 代码，同时，JSP 增加称为「JSP 动作」的 XML 标签，用来调用内建功能。</p>
<p>JSP 在首次被访问是会被服务器转成 Servlet，以后 web 容器则直接调用这个 Servlet，而不再访问 JSP 页面，所以 JSP 实质上还是 Servlet。需要重点掌握的是 JSP 标签库。</p>
<h3 id="JDBC："><a href="#JDBC：" class="headerlink" title="JDBC："></a>JDBC：</h3><p>说 JDBC 之前要先谈谈数据库，因为 JDBC 操作的就是数据库，所以我们要先学会写 SQL 语句。</p>
<p>数据库在后端开发中是不可或缺的一部分，也是开发中最重要的一部分，我们日常使用的所有软件都是由数据支撑，操作的也都是数据，没有数据我们的软件将都不可使用，我们的生活将黯淡无光，可见数据库的重要性，推荐学习 MySQL，原因以后再谈。</p>
<p>JDBC 全称是 Java Database Connectivity ，即 Java 数据库连接，它是一套用与执行 SQL 语句的 Java API，Java 应用程序通过使用 JDBC 来连接到关系型数据库，并使用 SQL 语句来完成对数据库中数据的操作，包括查询、更新、删除等。主要掌握 JDBC 中的 Connection，Statement，Resultset 三个基础。</p>
<hr>
<p>好了，由于篇幅较长就主要介绍这几个关键的技术。还有一些基础像：Filter「过滤器」、文件的上传和下载、EL 表达式、自定义标签等都非常重要，建议大家自行查阅。在以后的文章中会具体讲解这些技术，这篇就算是一个目录吧。</p>
<p>当然，这些技术只是后端开发的基础，也是学习后端必备的知识，只有掌握了基础知识，才能有去学习像 SSH、SSM 等框架的资格。</p>
<p><br>ikook<br>2017.12.05</p>
]]></content>
      
        <categories>
            
            <category> 技术栈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端开发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[坚持总会有回报]]></title>
      <url>/2017/12/02/persistence/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p>今天公众号来了不少的新朋友，热烈欢迎他们的到来。他们的到来让公众号蓬荜生辉，就像公号的欢迎语一样，愿我们在此相遇、从此为伴，一起成长。</p>
<p>stormzhang 突然的公号推荐，令我很是震惊，同样也很是兴奋、高兴。由于他本人影响力较大，公号读者也非常多，导致我公号的关注量飞涨。说实话，我的公众号从来没有刻意去推广过，要说推广，就只在小密圈分享了几次，所以关注量非常小，也就几十个人吧，没 100 人，真的。之所以没去推广，是因为公众号最初的定位是记录自己的成长，分享自己的经验。</p>
<p>可能是因为公号最初的定位原因，导致我坚持下去的动力不是很大，以至于中间还停更了一段时间。读者的鼓励，让我回到这里继续分享；前几天，拿到原创又给了我很大的鼓励和动力；今天 stormzhang 的推荐，再次给了我非常大的鼓励，把我的信心推向了最高点，我更加坚定了自己的脚步，一定会坚持分享下去。</p>
<p>之前写博客非常随意，想写的时候就写，不想写就扔那儿，太过随性。公众号则不一样，它直接与读者相关联，各种数据非常明显，较为「正统」，每发一篇文章，总会反复去看阅读量等数据。读者的直接约束，加之对公号期望的约束，致使我刻意的去坚持，坚持隔几天一篇文章，坚持输出。</p>
<p>我个人对公众号充满了期望，我希望大家在这里能有所收获和成长，也希望自己有所收获和成长。能够看到自己分享的东西对大家有所帮助，我想这应该是对我最大的鼓励了，同时也就不辜负这个号的存在了。</p>
<p>就像 stormzhang 所说，用心做事的人，运气不会太差。能够用心去做事，是非常可贵的，我觉得只要肯用心肯下功夫，基本是没什么事做不成的，就算没做成，期间的收获也会使你收益匪浅。现在有了你们的到来，有了你们的支持，我会更加用心，会更容易坚持下去。</p>
<p>最后，感谢 stormzhang 的推荐，感谢大家的支持，希望我们能够共同成长。对了，公众号有一项数据是我非常不愿看到的，就是取关量，有不足之处希望大家指出，取关多伤感情。</p>
<p>微信扫下方二维码关注</p>
<p><br>ikook<br>2017.12.02</p>
]]></content>
      
        <categories>
            
            <category> 随笔集 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[原创]]></title>
      <url>/2017/11/28/original/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p>不知从何下笔，有点抑制不住喜悦之情，真的是发自内心的高兴。我拿到微信公众号的「原创」了。</p>
<p>先说下「原创」，官方对它是这样介绍的：为鼓励优质内容在微信公众平台产生，维护作者权益，微信公众平台给文章原创作者进行声明的机会并对原创内容进行标识。</p>
<p>原创特指自己写的、独立完成创作的作品。歪曲、篡改他人创作或者抄袭、剽窃他人创作而产生的作品，改编、翻译、注释、整理他人已有创作而产生的作品均不能说是原创。</p>
<p>在这个号之前我还维护过两个。一个拿来当做实验品，玩了几天就扔那儿再也没理会过，另一个我想认真维护，但没坚持下去。自从开通了这个，我下决心维护下去，也一直在期盼着能够早一天拿到「原创」。今天晚饭过后，拿起手机看到“微信公众平台”发来的原创邀请，那一刻，真的非常开心，喜出望外，真的没有预料到。</p>
<p><img src="https://meto.chinakook.com/blog-images/%E5%8E%9F%E5%88%9B-2017.11.28.jpg" alt=""></p>
<p>因为之前停更过一段时间，现在想想如果没有那位读者，真的要与「原创」擦肩而过了，这里再次表示感谢。再想想，要是没有停更应该会早一些拿到，但结果总算是美好的。</p>
<p>我为什么非常想要拿到原创呢？</p>
<p>一、原创功能是对每一个公众号原创作者的一种尊重和版权的保护，现在互联网发达，很多人都开始写博客，抄袭者涌现，不尊重别人的劳动成果，这个功能一定程度上能够抑制这种现象，虽然抑制力不大。</p>
<p>二、能够给予原创作者一定的动力和信心。我相信每一个写公号的朋友都想拿到「原创」标识，这会鼓励自己更好的坚持下去。</p>
<p>三、直接和读者交流。在开通原创的同时，也会一并邀请开通留言功能。留言功能可以让读者直接对文章的内容进行讨论、反馈、达到交流和互动的效果。</p>
<p>只有作者与读者进行互动，才能产生思想的交流。无论是一本书还是一篇文章，其目的就是要向读者传达一种信息，可以是知识、经验等等，读者其目的就是要在文章或者书中获取这些资讯（知识、经验、新闻等），只有读者和作者达成了共鸣，这篇文章的使命才算完成。</p>
<p>同时，读者可以做出反馈，以便作者可以更好的写作和成长。所以，我认为留言是非常重要的一个功能。</p>
<p>今天拿到原创，真的给了我很大的自信心和动力。同时，也非常感谢大家一直以来的陪伴和鼓励。今后我会更努力的去做这件事，会更加用心的去分享。不忘初心，方得始终。</p>
<p>欢迎大家去我的公众号留言（扫下方二维码关注）。</p>
<p><br>ikook<br>2017.11.28</p>
]]></content>
      
        <categories>
            
            <category> 随笔集 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 感悟 </tag>
            
            <tag> 公号运营 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[古城风韵]]></title>
      <url>/2017/11/25/qingzhou/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p>前几天，为了缓解心中的焦虑，决定出去走一走。之前就听闻「青州」是个好地方，正好前些日子同学考试被安排在青州，归来之时，难以抑制喜悦之情（注意，并不是考试考得好，逃…）。我便决定去这个地方看看。</p>
<p>到达时，已是傍晚，按照早已安排好的行程直接去了「青州古城」。在古城外附近安排好的宾馆，放置好行李，稍微休息了下，便走进了古城。</p>
<h3 id="1-古城夜景"><a href="#1-古城夜景" class="headerlink" title="1. 古城夜景"></a>1. 古城夜景</h3><p><img src="https://meto.chinakook.com/blog-images/%E9%98%9C%E8%B4%A2%E9%97%A8%E5%9F%8E%E6%A5%BC%E5%90%8E1.jpeg" alt=""></p>
<p>进入古城，并没有太多的感触，更多的感受是映入眼帘的古建筑，在璀璨灯光的照耀下，金光闪闪，很是美丽。</p>
<p>由于没有吃晚饭，在这古城的第一件事当然是吃。古城内，街边小吃不少，我作为少数民族里不算少数的回族人，自然是找「清真」食物。没想到的是，城内回族不少，那晚饭自然好解决了。</p>
<p>在街边买了清真小吃，边吃边走。街道很长，一路走过去，都是古建筑，在现代文明的“帮助”下，没有了古时该有的样子，灯光太夺目，剥夺了古城内该有气息。</p>
<h3 id="2-古城风韵"><a href="#2-古城风韵" class="headerlink" title="2. 古城风韵"></a>2. 古城风韵</h3><p>清晨的青州还没在睡梦中苏醒，没有喧闹声，没有来往的车鸣声，一切都是那么的安静。如果有充足的时间，我真想在阳台上静坐一上午。</p>
<p><img src="https://meto.chinakook.com/blog-images/%E5%8F%A4%E8%A1%97%E9%81%93.jpg" alt=""></p>
<p>进入清晨的古城，青石路在脚下伸展，极少的车辆在高低不平的青石上有节奏地起伏，缓缓开去。我随着青石路走去，仿佛一切都变得慢了下来，行人走得很慢，路旁的大树带着几分深沉。在这一刻我仿佛抓住了时光，融入在这古城之中，把人引入了一种宁静，这份宁静来自心灵深处，你会不自觉的轻言轻语，生怕惊扰了什么。</p>
<p>也许是在现代化喧闹的生活环境中待久了，很是向往这种生活，街坊邻里之间，相处融洽，没有勾心斗角，以诚相待。在这里，每一个置身其中的人，都能切身感到舒适和幸福。在路边走累了，你可以青石凳上、古槐下或者在别人家台阶上休息一下，无论走到哪里，坐到哪里，你会觉得这个地方是生动的，能够感受到这里是欢迎你的，是可以被你占有的， 你可以清楚感受到自己的存在。</p>
<p>往古城深处走去，路上行人来来往往，路旁小商贩卖着特色的古城小吃及物品，看似忙碌，却又闲适。古槐下坐着几个白发老人，手持木杖，欢声笑语。十里古街，眼到之处无不其乐融融。这也许就是生活吧。</p>
<p><img src="https://meto.chinakook.com/blog-images/UNADJUSTEDNONRAW_thumb_43.jpg" alt=""></p>
<h3 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h3><p>大禹治水，天下九分 —— 为九州，华夏九州，青州便是其一。素有“东方第一州”美誉的古城青州，其丰厚且辉煌的历史文化令人叹为观止。据考察，早在七千多年前，就有人类在此生息，是“东夷文化”的发源地。可见人文资源积淀之深厚。</p>
<p>古城内有 120 多处景点，主要有：阜财门、魁星楼、名人牌坊（柱国坊、大学士坊、尚书里坊、太子少保坊等十余座）、东门街、偶园、蓝溪谷等；古城历史人物：王曾、赵秉忠、李清照、欧阳修、范仲淹、冯溥等。</p>
<p>对青州历史有兴趣可以上网了解下，有条件当然要亲自去看看。我相信去过一定不会后悔，也相信会有所收获。</p>
<p>本想着给大家介绍下古城内具体景点的，后来想想还是算了，就算我说的再好也不如自己去体验一番。何况我在那里收获地更多的是古城本身带给我的感受、感触，而不是景色。景过情留。</p>
<p>最后放几张照片，拍照技术很差，别打我。</p>
<p><img src="https://meto.chinakook.com/blog-images/UNADJUSTEDNONRAW_thumb_2.jpg" alt=""></p>
<p><img src="https://meto.chinakook.com/blog-images/UNADJUSTEDNONRAW_thumb_45.jpg" alt=""></p>
<p><img src="https://meto.chinakook.com/blog-images/UNADJUSTEDNONRAW_thumb_49.jpg" alt=""></p>
<p><img src="https://meto.chinakook.com/blog-images/UNADJUSTEDNONRAW_thumb_39.jpg" alt=""></p>
<p><img src="https://meto.chinakook.com/blog-images/UNADJUSTEDNONRAW_thumb_7d.jpg" alt=""></p>
<p><br>ikook<br>2017.11.25</p>
]]></content>
      
        <categories>
            
            <category> 随笔集 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 感悟 </tag>
            
            <tag> 旅游 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[这逝去的日子]]></title>
      <url>/2017/11/22/passing-day/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p>自从 9 月份参加学校实训之后，莫名停更(公众号、博客)，实训一月之后，瞎忙，回想起来好像什么都没干。</p>
<p>今天闲暇之余不知怎么突然想看看公号后台，就通过小程序「公众平台助手」看了一下，没有用户取关，我想也许是这个号太不被人注意了吧。但，令人惊奇的是，一位读者在 11 月 18 号后台给我发了一条消息，内容是「没有推送了呢」</p>
<p>收到这条消息，心情复杂，不知如何是好，感到很羞愧。今年 7 月 27 日我下定决心要好好维护这个号并持续输出，记录一点一滴。回去看了那天发的文<a href="https://mp.weixin.qq.com/s?__biz=MzU5MjE1NTEzNg==&amp;mid=2247483662&amp;idx=1&amp;sn=16ed169f988e66ca553dd103ddd11562&amp;chksm=fe254661c952cf7722e111278b6f6972c1bde3b3e71653020b7ac5eb03f2eb467e5791445666&amp;scene=38#wechat_redirect" target="_blank" rel="external">「这次，我认真了」</a>，更加觉得自己简直无可救药。对自己一次又一次的放纵，一次又一次的懈怠，是对自己不负责，更是对读者不负责任。想想这两个月真的是很忙吗？回想起来，真的是没有。实训期间，时间也许略微有些紧迫，但根本不足以成为自己懈怠的理由。</p>
<p>在忙时如果因为时间问题松懈，就在空闲时放纵自己，那就有很大可能性，在不忙时迷失自己，就会陷入之前的舒适圈，不能自拔。当然在适当的时刻放松自己肯定是要有的，但不要过于放松，容易变成放纵。人是一种贪玩的动物，对玩，对享乐，会上瘾。</p>
<p>在这段逝去的时光里，我仿佛又一次迷失了自己，不知方向。感谢这位素未谋面的读者，是她为我敲响警钟，敲醒快要睡着的我，非常感谢。虽说这个号没几个读者，无论有多少的关注者，我作为这个号的维护者就应该负起责任，对读者对自己双方负责。就算只剩一人，责任一样重大。</p>
<p>希望大家以我为鉴，时不时给自己提个醒，勿忘初心。</p>
<p><br>ikook<br>2017.11.22</p>
]]></content>
      
        <categories>
            
            <category> 随笔集 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 感悟 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Alfred 每次开机运行提示「访问通讯录」问题]]></title>
      <url>/2017/11/06/alfred/</url>
      <content type="html"><![CDATA[<blockquote>
<p>在忍受了许久「alfred 破解版」开机询问是否访问通讯录问题之后，终于忍不住了。</p>
</blockquote>
<a id="more"></a>
<p>自从用上「MacOS」之后就各种玩软件。用了软件，好用的东西很多，当然被我卸载的也很多。其中，Alfred 是我不会卸载的软件之一。</p>
<p>由于，学生一枚（隐喻，穷屌丝），没办法只能用破解版，就像我「MacOS」一样，是黑的 —— 黑苹果。因为是破解版，随之而来的就有一些烦人的问题，Alfred 也一样，它每次开机的时候，都会提示是否允许访问通讯录。</p>
<p><img src="https://meto.chinakook.com/blog-images/alfred1.png" alt=""></p>
<p>这个问题我忍受了很久，大约有将近一个月吧，我去，我绑不住了，搞他。其实很简单。</p>
<p>在终端输入一下命令，解决。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo codesign -f -d -s - /Applications/Alfred\ 3.app/Contents/Frameworks/Alfred\ Framework.framework/Versions/A/Alfred\ Framework</div></pre></td></tr></table></figure>
<p>想要下载「Alfred 破解版」扫描下方二维码关注公众号，后台回复：<strong>Alfred</strong> 即可获取。</p>
<p><br>ikook<br>2017.11.06</p>
]]></content>
      
        <categories>
            
            <category> 软件说 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> Alfred </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[无扩展，不 Chrome]]></title>
      <url>/2017/09/01/chrome-extended/</url>
      <content type="html"><![CDATA[<p>大家好啊，最近开学在折腾学校实训的事，比较忙，耽搁了更新，抱歉。为了表达歉意，给大家来点「刺激的」。</p>
<a id="more"></a>
<p>为大家推荐一些我常用的 Chrome 扩展，相信 Chrome 大家并不陌生吧，一款优雅的超好用的浏览器。由于某些东西的存在，下载安装稍微有点限制。关注公众号「ikook」后台回复「Chrome」可获取各个离线版本 Chrome。</p>
<p>好了，正文开始。想要用好 Chrome，非扩展不可，正所谓「无扩展，不 Chrome」。下面给大家介绍几款让 Chrome 变得更加优雅用起来更优雅的扩展。</p>
<h3 id="为什么你们就是不能加个空格呢？"><a href="#为什么你们就是不能加个空格呢？" class="headerlink" title="为什么你们就是不能加个空格呢？"></a>为什么你们就是不能加个空格呢？</h3><p>你没看错，名字就是「为什么你们就是不能加个空格呢？」。有没有因为汉字与英文之间没有空格引起强迫症？其内置的空格之神，可以自动为一切中文字和半形的英文、数字、符号之间插入空白。</p>
<center><br><img src="https://meto.chinakook.com/%E7%A9%BA%E6%A0%BC%E4%B9%8B%E7%A5%9E.jpg" alt=""></center>

<p>下载安装：<a href="http://t.cn/zlnOv4n" target="_blank" rel="external">http://t.cn/zlnOv4n</a></p>
<p>Chrome 应用商店链接，要访问… 你懂得，下同</p>
<h3 id="Imagus"><a href="#Imagus" class="headerlink" title="Imagus"></a>Imagus</h3><p>有没有过「查看原图」但是原图不够大的情况？有了 Imagus 扩展，鼠标指针悬停在链接或缩略图上时直接在当前页面的弹出视图上显示这些图片、HTML5 视频 / 音频和内容专辑。</p>
<center><br><img src="https://meto.chinakook.com/Imagus.jpg" alt=""></center>

<p>下载安装：<a href="http://t.cn/8sDMJm6" target="_blank" rel="external">http://t.cn/8sDMJm6</a></p>
<h3 id="Flatbook"><a href="#Flatbook" class="headerlink" title="Flatbook"></a>Flatbook</h3><p>是否厌倦了 Facebook 亘古不变的页面，来给你的脸书换个脸吧，瞬间清爽到爆啊。</p>
<center><br><img src="https://meto.chinakook.com/flatbook.jpg" alt=""></center>

<p>下载安装：<a href="http://t.cn/RNiRhcj" target="_blank" rel="external">http://t.cn/RNiRhcj</a></p>
<h3 id="Darkness"><a href="#Darkness" class="headerlink" title="Darkness"></a>Darkness</h3><p>Darkness 可以为 Google，Facebook，YouTube，Reddit 等不存在的网站提供完美的夜间模式支持，不会有图片反转，文字颜色奇怪等尴尬问题。当然了，Darkness 适配的网站还很少，如果你需要广泛适用的，可能需要这款神级扩展：Stylish，在下面。</p>
<center><br><img src="https://meto.chinakook.com/Darkness.jpg" alt=""></center>

<p>下载安装：<a href="http://t.cn/RNinpUu" target="_blank" rel="external">http://t.cn/RNinpUu</a></p>
<h3 id="Stylish"><a href="#Stylish" class="headerlink" title="Stylish"></a>Stylish</h3><p>许多网页的视觉风格是用 CSS 文件进行管理的，替换网页本身的 CSS 可以达到美化的目的了。通过安装 CSS，可以把知乎「拍扁」，让微博网页版变得简洁无比，让 Feedly 用上 Material Design 等等等…… Stylish 作为一个 CSS 管理器，可以让替换 CSS 变得简单。</p>
<center><br><img src="https://meto.chinakook.com/1504266030349.jpg" alt=""></center>

<p>关于 Stylish 更详细的介绍见：<a href="https://sspai.com/post/34508" target="_blank" rel="external">https://sspai.com/post/34508</a></p>
<p>下载安装：<a href="http://t.cn/R9hCUIk" target="_blank" rel="external">http://t.cn/R9hCUIk</a></p>
<h3 id="Wikiwand"><a href="#Wikiwand" class="headerlink" title="Wikiwand"></a>Wikiwand</h3><p>多年来，维基百科网页的视觉风格坚定不移地停留在 Web2.0 时代。Wikiwand 让你看到一个属于 21 世纪的维基百科。除了视觉上的提升，Wikiwand 也添加了一些人性化的交互：比如超链接悬浮窗，搜索联想，黑色模式等等…</p>
<center><br><img src="https://meto.chinakook.com/1504266756635.jpg" alt=""></center>


<p>下载安装：<a href="http://t.cn/R4TGWCh" target="_blank" rel="external">http://t.cn/R4TGWCh</a></p>
<h3 id="阅读模式"><a href="#阅读模式" class="headerlink" title="阅读模式"></a>阅读模式</h3><p>「阅读模式」可以为 Chrome 带来了类似 Safari 的阅读体验。点击图标即可进入，再次点击退出，完全的无痛体验啊。有一种 Chrome 原生阅读模式的错觉，爽。</p>
<center><br><img src="https://meto.chinakook.com/1504267091779.jpg" alt=""></center>

<p>下载安装：<a href="http://t.cn/RNiFaDw" target="_blank" rel="external">http://t.cn/RNiFaDw</a></p>
<p>今天主要介绍的是利用 Chrome 扩展改变网页视觉感觉，让浏览网页变得更加优雅，后面有机会再和大家说说其他实用扩展。</p>
<p>完。</p>
<p><br>ikook<br>2017.09.01</p>
]]></content>
      
        <categories>
            
            <category> 随笔集 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[七夕，过得怎样？]]></title>
      <url>/2017/08/28/seven-month-seven/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<p><br><br><br></p>
<center><strong>七夕</strong></center>

<center>这个狗吐血的特殊日子</center>

<center>我是这样度过的</center>

<center><br><img src="https://meto.chinakook.com/1503916978099.jpg" alt=""></center>

<p><br></p>
<center>我的心情是这样的</center>


<center><br><img src="https://meto.chinakook.com/17.08.28.jpg" alt=""></center>

<p><br><br><br></p>
<center>祝</center>

<center>虐狗节快乐</center>



<p><br>ikook<br>2017.08.28</p>
]]></content>
      
        <categories>
            
            <category> 随笔集 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java 实现排序算法之「插入排序」]]></title>
      <url>/2017/08/26/java-sort-series3/</url>
      <content type="html"><![CDATA[<blockquote>
<p>java 实现排序算法系列</p>
</blockquote>
<a id="more"></a>
<p>这是 Java 实现排序算法的第三篇文章——插入排序算法。插入排序可以说成是「一类」简单的排序算法，因为插入排序可以有变种，比如二分查找插入排序算法，本文讲述的是直接插入排序。</p>
<p>如文中出现错误，请在公众号「ikook」聊天窗口留言，十分感谢。</p>
<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>插入排序「Insertion Sort」是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p>
<p>来看一下插入排序算法的思路：<br></p>
<ul>
<li>将需排序的数据分成已排序和未排序两部分，从第一个元素开始，并将该元素看做已排序。<br><br></li>
<li>取得下一个元素，即第二个元素，在已排序的序列中由后向前扫描，找出合适的位置将该元素插入。<br><br></li>
<li>重复上述步骤，直到最后一个元素被插入到已排序序列中。<br><br></li>
<li>排序完成。<br><br></li>
</ul>
<p>使用插入排序为一列数字进行排序的过程示意图（来自维基百科）：</p>
<center><br><img src="https://meto.chinakook.com/Insertion-sort-example.gif" alt=""></center>

<p>插入排序算法示意图（来自维基百科）：</p>
<center><br><img src="https://meto.chinakook.com/Insertion_sort_animation.gif" alt=""></center>

<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>从上面可以看到，算法思路非常简单，但是代码就不那么简单易写了。算法本身是没有问题的，之所以不易写我觉得是由于编程语言的问题。这里我们使用 Java 来实现，那就拿 Java 来讲。</p>
<p>在上述思路中我们可以提出几个问题，先来看下。首先，我们该如何判断合适的位置？边界条件该怎么处理？在数组中插入元素，必然会移动数据，如何控制数据的移动？</p>
<p>为了解决这些问题，我们可以在算法思路的第二步做手脚，将第二步细化。我们不在已排序的序列起始位置开始比较，从已排序序列的尾部开始逆序比较，只要比待插入的数据大，那就向后移动，直到不大于该数据，此时空出来的位置就放入待插入数据。</p>
<p>上代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertionSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;arr.length; i++)&#123;</div><div class="line">          <span class="keyword">int</span> value = arr[i];</div><div class="line">          <span class="keyword">int</span> position=i;</div><div class="line">          <span class="keyword">while</span> (position&gt;<span class="number">0</span> &amp;&amp; arr[position-<span class="number">1</span>]&gt;value)&#123;</div><div class="line">              arr[position] = arr[position-<span class="number">1</span>];</div><div class="line">              position--;</div><div class="line">          &#125;</div><div class="line">          arr[position] = value;</div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果在代码的理解上遇到困难，可以利用 IDE 的调试功能来学习。如下图（IntelliJ IDEA）：</p>
<center><br><img src="https://meto.chinakook.com/insert_debug.jpg" alt=""></center>

<h2 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h2><p>从上述内容容易看出，无论输入的数据怎样，插入排序算法总会进行 n-1 次排序。</p>
<p>由于每个元素插入点的不确定性，该算法复杂度并不是一定的。假设我们要将 n 个元素的序列升序排序，这时存在最好情况和最坏情况。</p>
<p>最好情况就是，序列已经是升序排列了（即数据本身的顺序和我们需要的顺序相同）。此时，需要进行的比较操作需（n-1）次即可，时间复杂度为 O(n)。</p>
<p>最坏情况很显然，序列为逆序排列时，即降序排序时为最坏。此时，需要进行的比较共有 1/2n(n-1) 次，时间复杂度为 O(n^2)。</p>
<p>平均来说，插入排序算法复杂度为 O(n^2)。插入排序的赋值操作是比较操作的次数加上（n-1）次。</p>
<p>空间复杂度，插入排序所有的数据移动均在内部进行，唯一的开销是我们使用了一个临时变量，则空间复杂度为 O(1)。</p>
<h2 id="插入排序算法分析"><a href="#插入排序算法分析" class="headerlink" title="插入排序算法分析"></a>插入排序算法分析</h2><p><strong>算法稳定性：</strong><br>拿本文中的例子来讲，只需要找到需插入元素的位置即可，并不需要交换，则直接插入排序是稳定排序算法。</p>
<p><strong>适用场景：</strong><br>从算法复杂度可以看出，该排序算法不适合数据较大的情况，数量级小于千时，插入排序是一个不错的选择。在 STL 的 sort 算法和 stdlib 的 qsort 算法中，都将插入排序作为快速排序的补充，用于少量数据的排序。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>关于插入排序算法的变种大家有兴趣的自己 Google 一下，本文只讲述了基本的直接插入排序。插入排序的变种大概有这几种：二分查找插入排序、2 - 路插入排序、表插入排序。二分查找插入排序有的文献叫做折半插入排序，2 - 路插入排序和表插入排序可以参考《数据结构》（严蔚敏、吴伟民著）一书。</p>
<p>完。</p>
<p>相关阅读：<br><a href="http://ikookblog.com/2017/03/09/java_sort_algorithm_series1/">Java 实现「冒泡排序」</a><br><a href="http://ikookblog.com/2017/08/11/java_sort_algorithm_series2/">Java 实现「选择排序」</a></p>
<p>PS：如果你觉得本文对你有一点帮助，点赞、转发，不胜感激。</p>
<p><br>ikook<br>2017.08.26</p>
]]></content>
      
        <categories>
            
            <category> 论算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> 计算机技术 </tag>
            
            <tag> 排序算法 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我是你流浪过的一个地方]]></title>
      <url>/2017/08/17/view-text-02/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本文来自 App Store 软件「青稞 - 找寻诗和远方」推文，作者：王海桑</p>
</blockquote>
<a id="more"></a>
<p><br></p>
<h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><p>在同一个一百年里，你来了我来了<br>一一不早，也不迟<br>在同一朵云彩下，你看见我我看见你<br>一一不远，也不近<br>你就在那儿，有树有水<br>所以，我爱你。</p>
<p><br></p>
<h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4><p>我没有找到你我碰见你了<br>我没有想到你我看见你了<br>我看见你了，你还能往哪儿跑呢<br>你是我今生今世最大的意外<br>这不是在梦里，也不是在画里<br>你和我携手同行<br>走进落日与大地的亲吻<br><br><br>天地如此宁静，我听见了<br>我心如此感恩，你听见了吗<br>你就说吧说吧，今晚我住在哪儿呢<br>瞧你的长发森林你的明眸流水<br>都是我的家  </p>
<p><br></p>
<h4 id="3"><a href="#3" class="headerlink" title="3"></a>3</h4><p>不知道是对是错，不管它是对是错<br>我只想和你在一起，一起等太阳出来<br>没有水，你是我的水<br>没有粮食，我是你的粮食<br>我们自始至终相信同一个神<br>热爱同一个命运<br>因为啊，爱上你<br>我身体中有世上最柔软的部分<br>我无法想象，你起伏的身体<br>是怎样的一个神秘国度<br>我爬遍你的全身，像个孩子<br>你新鲜、温暖而美丽<br>当你的呼吸在我的鼻孔<br>我的手在你的发间<br>你问：你好吗？<br>我说：我想你。  </p>
<p><br></p>
<h4 id="4"><a href="#4" class="headerlink" title="4"></a>4</h4><p>如果有时候，我会沉溺于欢乐<br>请原谅，我不是故意的<br>你想想看，当春天来了<br>漫山遍野都开满五颜六色的花儿<br>我又能怎么办呢<br>还有干净的石头，清澈的水<br>阳光也是刚刚流出来的<br>你一碰就响<br><br><br>去吧，去一百个地方，走一千里鲜花<br>摘它一万朵！要不就一朵吧<br>我可真想摘下来，拿在手上<br>欢乐真好，我真的是喜欢那些美好的事物<br>这件事请你原谅，如果我可以原谅  </p>
<p><br></p>
<h4 id="5"><a href="#5" class="headerlink" title="5"></a>5</h4><p>来吧，那些是我的就是我的<br>我不要天上的星星<br>这一生能有些什么，能做些什么<br>——我都已清楚。<br>我不要自己在世界多么重要，从一开始<br>世界和我就是两件不同的事<br>我只要，在窗囗的月下，在你倦时<br>能用手掌托起你寂寞的心<br>看吧，那些我犯过的错都在保证<br>我将用我一生的细节珍爱你细节的一生<br>所以从现在起，从这里起<br>把你的手给我，把你的手放在我心囗<br>相信我的一生就是你的一生<br>便是这世界背我而去，我也心满意足<br>我只请求一件事一一<br>我不要思念你，我要紧挨着你</p>
<p><br></p>
<h4 id="6"><a href="#6" class="headerlink" title="6"></a>6</h4><p>那时我正躺在云朵上做梦<br>是你在生活中喊我，喊我尘世的名字<br>于是我踢掉鞋袜，顾不上踩云<br>像两个渴慕已久的音符<br>你我在阳光的五线谱间执手相遇<br><br><br>我不知道如何爱你，我看着你<br>我前后左右都跟着你<br>以自己的才华和智慧我投身于你<br>不够，就以信念，再不够<br>就以身以命一生相许<br>竟如此不易，你和我<br>彼此在不如意的生活中<br>遇上一个如意的人，所以我爱你<br>就连同你的缺点你的道路<br>以及你是非难辨的过去<br>从此我们手拉手<br>向着同一个方向走，直到天黑<br>待生命结束，我们才结束<br>一回头，我们看见的不是一缕轻烟<br>而是我们相知的一生<br>深深浅浅，心心相印</p>
<p><br></p>
<h4 id="7"><a href="#7" class="headerlink" title="7"></a>7</h4><p>不，小心些。请不要相信<br>我现在对你说的话<br>因为它真诚见心，所以易变<br>只是在这世界有一个点上<br>我和你，在一起<br>这感觉如此美妙，像在飞<br>如果是真的，请告诉我<br>如果不是真的，请告诉我<br>你知道的，你知道的<br>我就像一只小虫碰到了阳光<br><br><br>我的幸福也小心翼翼<br>因为啊，过往的岁月教会我<br>人的一生中有一个字<br>是冷，是彻骨的冷<br>所以我会在星稀的冬夜<br>点一堆火，慢慢想你</p>
<p><br></p>
<h4 id="8"><a href="#8" class="headerlink" title="8"></a>8</h4><p>累的时候，有个地方能睡<br>饿的时候，有点东西能吃<br>这多好。我怎敢要求太多<br>当我到了某个年龄，能有个女人挨着<br>当我因劳作而一身冒汗<br>能有一盆水喝，一条河流洗澡<br>天想下雨的时候下雨，然后有阳光<br>如果高兴，如果我可以<br>光着身子和你在树林里奔跑<br>这就够了。我愿意这就是我的一生<br>有阳光、粮食、女人和水<br>这是我所能想起的幸福</p>
<p><br></p>
<h4 id="9"><a href="#9" class="headerlink" title="9"></a>9</h4><p>一生当中，到底有多少事可以很肯定<br>你和我之间，究竟有多少事可以分得清白<br>而我总是很肯定很肯定地告诉你<br>在我们的明天里<br>有阳光和早餐，有河流和音乐<br>你所有的事，我说，都来找我<br>你所有的对错，都归于我<br>因为我要你生活美好，一生安宁<br>有一天当我死了，会有人来<br>说：“这个人，一生寂寞。”<br>你不要哭，我给你说过——<br>我是一个泥做的生灵<br>想娶一个水做的女人为妻<br>于是遇上你。所以，在一百年里<br>如果你的一生需要有人捧在手上<br>那个人，只能是我，必须是我<br>便是当我走了，我也会记着<br>把这手上的温暖，给你留下  </p>
<p><br></p>
<h4 id="10"><a href="#10" class="headerlink" title="10"></a>10</h4><p>那一天，我想吻你<br>因为那天的月亮很明很圆<br>我想吻你，因为世上只有我们两个人<br>吻你，是那一刻我俩唯一能做的事<br>因为我不知道你，因为我想知道你<br><br><br>我真的想吻你<br>我看见你的唇像一颗草莓<br>我猜它一定又红又甜<br>一想到要吻你，我的心在跳<br>我害怕你，你陌生而神奇<br>你也不敢看我的眼<br>你背对我是一挂黑发<br>我的手欲伸又止，像只胆小的小动物<br>从我这里爬到你腰间，这段短短的距离<br>用了我整整一百年<br>一百年后，你转过身<br>这世界一无所有，只有一个月亮<br>很明很圆  </p>
<p><br></p>
<h4 id="11"><a href="#11" class="headerlink" title="11"></a>11</h4><p>我从遥远的时间回来<br>我从孤单的地平线回来<br>回到我原本在的地方，不再远行<br>——这是我的家。<br>我不再追求幸福，我就是幸福<br>我不再想象生活，我着手生活<br>没你在时我想你，有你在时我看着你<br><br><br>哦，原来这就是我吗<br>每一件和你有关的小事情都让我心动<br>当你和我说话，当你没和我说话<br>我都掩饰不住心中莫名的欢乐</p>
<p><br></p>
<h4 id="12"><a href="#12" class="headerlink" title="12"></a>12</h4><p>在这片叶子上开始，我将关心你的一生<br>你没有过去，或者你的过去是一把尘土<br>而你的今天和我的今天必将赶上明天的光明<br><br><br>我不是骑白马的王子，但我也有剑<br>总有一天，这剑上将有血<br>别人的血，或我的血一一与你有关<br>而今天，而正在流逝的今天<br>在向上或向下的路上我与你同在<br>请让我关心你的早餐，你的睡眠<br>关心你身体每一个可爱的小地方<br>是否安好如初，是否一切未变</p>
<p><br></p>
<h4 id="13"><a href="#13" class="headerlink" title="13"></a>13</h4><p>可如果幸福注定与我无缘，我会想念它<br>不管它把我看成什么人，请相信<br>这件事不只是我一个人的错。苍天在上<br>我一直在生活中努力保持纯洁<br><br><br>如果爱情找不到我的一生，那肯定自有原因<br>我不敢质问爱神，只想告诉<br>那个飞来飞去的花翅膀小孩——<br>下一次，如果愿意，请记着我<br><br><br>除此之外，我来到这个世上是<br>要做一些事想念一些人<br>让自己的心还有片干净的地方<br>能容得下一个神龛，和跪得下我的空间</p>
<p><br></p>
<h4 id="14"><a href="#14" class="headerlink" title="14"></a>14</h4><p>当你需要精美的早餐<br>我却只有爱情<br>为了一行关于粮食的诗句<br>你我相拥，失声一哭<br>而我们在月亮下已经走得太远<br><br><br>可你得想想<br>人生如此重大，你不能什么都要<br><br><br>请相信吧——<br>一千次失败必将成全一个生灵<br>你不要哭，到时候，我会说——<br>诸事顺利，一切都好</p>
<p><br></p>
<h4 id="15"><a href="#15" class="headerlink" title="15"></a>15</h4><p>寂寞和美好让我们相遇<br>然后是生存把我们分开<br>当你的背影住在我的泪中<br>你告诉我，说——<br>生活是为了改变生活<br>是啊是啊，在生活中<br>想象出来的路就能走吗<br><br><br>而当大雪飞过那个小镇<br>我哪儿都不去，我将想你<br>在零度以下，想你是一种温暖<br>是我的幸福  </p>
<p><br></p>
<h4 id="16"><a href="#16" class="headerlink" title="16"></a>16</h4><p>早晨五点半，想起你和我挨着<br>很暖和。还有早餐<br>早餐和早晨一样和你一样清新<br>你说早市上的青菜和萝卜都是爱情<br>看来，你是对的<br><br><br>你因为热爱生活<br>所以遇上了我。可你走了<br>你还有别的事，只是对于我<br>这件事太简单，我还没准备好<br>这件事太简单，要我一生来接受<br><br><br>你走了，你比孤单还瘦  </p>
<p><br></p>
<h4 id="17"><a href="#17" class="headerlink" title="17"></a>17</h4><p>是不是神怕我们不小心弄脏了爱情<br>所以只让我们看见它<br>只让我们亲它一小囗<br>便珍爱有加地收回<br>然后要我们在这艰难的人间<br>找一个能相依相守的人<br>恩恩爱爱，建筑家园<br>如果真是这样，那么<br>当我在世界的尽头遇见你<br><br><br>你怎么说呢<br>当你就在那儿我不喊你<br>如果你也看见我而我走过去<br><br><br>你还能否如初次那般微笑<br>对我说：嗨。  </p>
<p><br></p>
<h4 id="18"><a href="#18" class="headerlink" title="18"></a>18</h4><p>结束了。<br>画个句号。<br>像一滴泪。<br>握你的手，最后握你的手<br>再松开，一松手，就是——<br>一千里<br><br><br>路在那儿等你。<br>不知道去哪儿的路在那儿等你。<br>我含泪的眼没有希望<br>就这样，是再见  </p>
<p><br></p>
<h4 id="19"><a href="#19" class="headerlink" title="19"></a>19</h4><p>我的心平平静静地合上<br>你在外边，早晨在外边<br>你和早晨是一个人<br>身后是泪眼天堂<br><br><br>很多事情都会突然过去<br>愿意你好，一生都健康安全<br>我也会准时起床，干活、吃饭<br>累了，就歇一会儿<br>伤心了，也笑一笑<br>不管生活把你藏在什么地方<br>我知道，只一伸手<br>我摸得到你的寂寞<br>就像这个早晨，那么凉<br><br></p>
<h4 id="20"><a href="#20" class="headerlink" title="20"></a>20</h4><p>请求你允许我，下辈子<br>偿还你的一生。而我今生<br>必须好好地，好好地学会幸福<br>如果你在一千里之外很好<br>请告诉我，好让我在孤单的时间<br>里找到另一个女人，而放下你<br>如果你找了再找都没有你的地方<br>而你仍执意不回头，一千一万都不<br>那么也好吧，你知道<br>我们是两个一样寂寞的人<br>当我想哭，当你想哭<br>哭你我曾经相遇相识<br>生活它必须重新开始<br>一步一难，向着幸福</p>
<p><br></p>
<h4 id="21"><a href="#21" class="headerlink" title="21"></a>21</h4><p>我不曾爱过你<br>我只是担心你的一生<br>只是想知道你在那儿很好<br>想着你已经找到幸福<br>如果我说过爱你，请原谅我<br>我只是无法忍住伤心<br>于是你终于离开<br>可你离开得已经太迟</p>
<p><br></p>
<h4 id="22"><a href="#22" class="headerlink" title="22"></a>22</h4><p>我的心无法安慰<br>我的心需要忘记<br>所以我要到一个很远很远的地方<br>去忘记一个人<br>去忘记一些事<br>然后回来，以双手进入生活</p>
<p><br></p>
<h4 id="23"><a href="#23" class="headerlink" title="23"></a>23</h4><p>最终我必将接受现实<br>但我知道——<br>生活一思索都是疑问<br>唱出来才是歌<br>我选择后者</p>
<p><br></p>
<h4 id="24"><a href="#24" class="headerlink" title="24"></a>24</h4><p>下一个一千年，如果有<br>如果我可以再一次做人，而遇上你<br>我要挣很多钱，在水边，买一幢<br>有玫瑰花有咖啡的房子<br>然后娶你为妻——<br>月光是我们的，水声是我们的<br><br><br>我们纯洁地做爱<br>慢慢讲美丽的故事<br>然后养一百个漂亮的孩子<br><br><br>围着我，围着你<br>而这一次，我一生对不起<br>你因为我是个如此住在梦中的人<br><br><br>有一天，当我死了，想到你会流泪<br>我已如此幸福。真想告诉你<br>你是我一生中的一件最美好的事<br><br><br>当你死了，当你回到落叶化成的泥土<br>我将认出你，我的心将挨着你<br>不声不响，你知道是我，我知道是你<br><br><br>完。</p>
<p><br>ikook<br>2017.08.17</p>
]]></content>
      
        <categories>
            
            <category> 观文记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 感悟 </tag>
            
            <tag> 转载 </tag>
            
            <tag> 观文 </tag>
            
            <tag> 诗歌 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java 实现排序算法之「选择排序」]]></title>
      <url>/2017/08/11/java_sort_algorithm_series2/</url>
      <content type="html"><![CDATA[<blockquote>
<p>java 实现排序算法系列</p>
</blockquote>
<a id="more"></a>
<p>继冒泡排序算法之后，选择排序终于和大家见面了。为什么冒泡排序之后要说选择排序呢，是因为它俩是最相似的两种排序算法，血缘关系最为接近。</p>
<p>还是那句话，本人能力拙劣，有不当之处还请不吝赐教，可关注我公号后台留言，见底部二维码。</p>
<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>选择排序（Selection sort）是一种简单直观的排序算法，它也是一种交换排序算法，和冒泡排序有一定的相似度。可以把它看做是冒泡排序算法的一种改进算法。</p>
<h4 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h4><p>假设要给有 n 个元素的数组 arr[] 排序。注意，在数组中第一个元素的下标为 0</p>
<h5 id="n-1"><a href="#n-1" class="headerlink" title="n = 1:"></a>n = 1:</h5><p>无需排序</p>
<h5 id="n-gt-1"><a href="#n-gt-1" class="headerlink" title="n &gt; 1:"></a>n &gt; 1:</h5><ul>
<li>将第一个元素和第二个元素进行比较，如果 arr[0] 大于 arr[1]，那么 arr[0] 一定不是最小元素。这里我们暂时不交换元素，而是设置临时变量 a，用来存储较小变量 arr[1] 的下标。然后将目前较小元素 arr[a] 继续和第三个元素比较，如果 arr[a] 大于 arr[2]，则修改 a 的值为 arr[2] 的下标，再接着往下比较；如果不大于 arr[2]，则将 arr[a] 和第四个元素比较，如前者大，则修改 a 的值为 arr[3] 的下标。以此类推，直到与最后一个元素比较，则 a 的值肯定是最小值的下标。<br><br></li>
<li>如果 a 的值不为 0（即不是元素 arr[0] 的下标)，则交换下标为 0 和 a 的元素，即将 arr[a] 和 arr[0] 进行交换。 <br><br></li>
<li>至此，第一趟排序完成，将最小值找出来了，然后进行第二趟排序。重复上述过程，从第二个元素（即 arr[1]）开始比较。第一个元素已经是最小元素了，不参与比较。 <br><br></li>
<li>重复步骤直到剩下最后一个元素，即 arr[n-1]，可以肯定这个值为最大值。 <br><br></li>
<li>排序完成，不够直观？见下面示例动画。</li>
</ul>
<center><br><img src="https://meto.chinakook.com/blog-images/java_sort_algorithm_series2.gif" alt=""></center>

<blockquote>
<p>注: 红色表示当前最小值，黄色表示已排序序列，蓝色表示当前位置。</p>
</blockquote>
<p>选择排序的主要优点与数据移动有关。如果某个元素位于正确的最终位置上，则它不会被移动。选择排序每次交换一对元素，它们当中至少有一个将被移到其最终位置上，因此对 n 个元素进行排序总共进行至多 n-1 次交换。在所有的完全依靠交换去移动元素的排序方法中，选择排序属于非常好的一种。</p>
<p>需要注意的是，上述过程只是每次找最小值的办法。实际上也可以每次找最大值，思路是一样的。</p>
<p>选择排序的示意图（图片来自维基百科）：</p>
<center><br><img src="https://meto.chinakook.com/blog-images/Selection_sort_animation.gif" alt=""></center>

<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>设要给数组 arr[] 排序，它有 n 个元素。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectionSort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> min, temp, len = arr.length;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</div><div class="line">            min = i;<span class="comment">//未排序序列中最小数据数组下标</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123; <span class="comment">//在未排序元素中继续寻找最小元素，并保存其下标</span></div><div class="line">                <span class="keyword">if</span> (arr[min] &gt; arr[j]) &#123;</div><div class="line">                    min = j;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (min != i) &#123;</div><div class="line">                temp = arr[min]; <span class="comment">//将最小元素放到已排序序列的末尾</span></div><div class="line">                arr[min] = arr[i];</div><div class="line">                arr[i] = temp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h3><p>选择排序需要进行 n-1 轮比较。很显然，比较次数 O(n^2)，比较次数与关键字的初始状态无关，总的比较次数 N = (n-1) + (n-2) + … + 1 = n x (n-1) / 2。</p>
<p>交换次数 O(n)，最好情况是，已经有序，交换 0 次；最坏情况是，逆序，交换 n-1 次。交换次数比冒泡排序较少，由于交换所需 CPU 时间比比较所需的 CPU 时间多，n 值较小时，选择排序比冒泡排序快。</p>
<p>选择排序的赋值次数：最坏情形下需要交换 n-1 次，对于上面的代码，需要赋值 3(n-1) 次。而最佳情况下，则需要 0 次。如果假定平均分布，大约需要 3n/2。</p>
<p>冒泡排序可以在最佳情况下有 O(n) 复杂度，那么选择排序行不行呢？ 很遗憾，不行。选择排序每次只找最小值，但它并不能知道其他值是否有序排列。因此，选择排序在最优、最坏、平均情况下的<strong>时间复杂度</strong>均为 O(n^2)，<strong>空间复杂度</strong>（额外空间）为 O(1).</p>
<h3 id="算法稳定性"><a href="#算法稳定性" class="headerlink" title="算法稳定性"></a>算法稳定性</h3><p>对于选择排序的稳定性是存在一定争议的。但在本例中，最小值和另一个值相同的时候我们并不需要交换它们，选择排序是稳定排序。其实排序算法中，有些稳定算法可以变换成不稳定算法，而不稳定排序算法又有很多办法可以变成稳定的，这在《算法》第四版中有所提及。所以，没有严格意义上的稳定与不稳定排序。</p>
<h3 id="算法适用场景"><a href="#算法适用场景" class="headerlink" title="算法适用场景"></a>算法适用场景</h3><p>选择排序实现也比较简单，并且由于在各种情况下复杂度波动小，因此一般是优于冒泡排序的。在所有的完全交换排序中，选择排序也是比较不错的一种算法。但是，由于固有的 O(n^2) 复杂度，选择排序在数据量较大的时候显得力不从心。因此，它适用于简单数据排序。</p>
<p><br>ikook<br>2017.08.11</p>
]]></content>
      
        <categories>
            
            <category> 论算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> 计算机技术 </tag>
            
            <tag> 排序算法 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[宗教和苹果]]></title>
      <url>/2017/08/07/religion-and-apply/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本文转载自《一天世界》博客，作者：不鸟万如一</p>
</blockquote>
<a id="more"></a>
<p>苹果第八号员工贴了一张苹果早期天使投资人 Mike Markkula 一九七七年写的营销哲学，只有短短三段，翻译如下：</p>
<ul>
<li>同理心：我们真的要比任何其它公司更了解她们的需求。<br><br></li>
<li>专注：为了把决定要做的事做好，我们必须放弃所有不重要的机会。<br><br></li>
<li>转嫁：以貌取人乃人类天性。就算我们的产品品质最高，软件最有用，如果用潦草的方式呈现出来，人们就会认为它们是潦草的。若用富于创意的、专业的方式呈现出来，我们就能把那些吸引人的品质转嫁给顾客。</li>
</ul>
<p>一九七七年的电脑世界和今天大不相同。微软成立两年，苹果才成立一年。那是「家酿电脑俱乐部」的玩票时代，组织、管理和规范都还远未成形。大多数人完全不知道电脑能干什么，以及为什么家里要放台电脑。这也是为什么今人看 Markkula 的这份文档，只看到了一些人尽皆知的大白话道理。这些道理在当年是需要特地提出的。</p>
<p>不过最奇特的还是「转嫁」一词。原文 impute，今天比较少见，通常的意思是指把某种不好的东西归咎于人。这是怎么回事？</p>
<p>查《New Oxford American Dictionary》（macOS 自带），impute 在神学语境有如下涵义：</p>
<blockquote>
<p>Ascribe (righteousness, guilt, etc.) to someone by virtue of a similar quality in another: Christ’s righteousness has been imputed to us.</p>
</blockquote>
<p>稍稍搜索可知，impute 的确是《圣经》里常用的词。和日后的一般用法不同，在神学领域，转嫁的有时是好东西，有时是坏东西。例如上帝把正义转嫁给信众，而有罪的世人则把罪转嫁给基督。（《圣经》中文版往往根据具体的上下文简单译成「归于」。）</p>
<p>如果用今天的语言改写 Markkula 的第三段，同样会变成平淡无奇的教条。光是产品好是不够的，这是看脸的世界，设计不只是漂亮的皮囊，更是内在品质的外化反映。恐怕没人会觉得这是什么了不起的洞见。</p>
<p>这并不是早年的苹果使用的唯一有宗教意味的词。软件传教士（evangelist）就是 Mac 部门的 Mike Murray 发明的说法，早期在苹果负责营销的川崎盖伊（Guy Kawasaki）也很可能是史上最有名的软件传教士。今人戏称苹果为苹果教，但苹果的宗教情绪是从创始之初就浸透在企业文化当中的。活用 impute 这样的词，甚至把它单独拎出来作为小标题，反映了苹果的使命感和道德义务感。我们可以转嫁各种东西于她人，有好的东西，也有坏的东西，请诸君谨记自己所负担的义务，扬善惩恶。</p>
<p>这是扮演上帝的狂妄吗？我认为这是诚实。产品的设计者在消费者面前拥有的绝对权力，在产品被使用的过程中，完全可以比之于上帝。而恰恰由于产品设计者是会犯错的人而非上帝，才需要如履薄冰的道德义务感。这个道理，在今天耻谈道德的「Don’t judge」主义、相对主义、和中立至上主义年代，是需要特地提出的。</p>
<p>而作为顾客的我们，又转嫁了什么样的东西给产品的设计者呢？</p>
<p>完。</p>
<p>PS：<a href="https://t.me/yifenshijie/313" target="_blank" rel="external">https://t.me/yifenshijie/313</a> ，复制链接至浏览器，在《一分世界》收听本文语音版。（需要 <strong>Telegram</strong>）</p>
<p>PPS：点击<a href="https://blog.yitianshijie.net/2017/08/07/religion-and-apple/" target="_blank" rel="external">阅读原文</a>可跳转至原文</p>
<p><br>ikook<br>2017.08.07</p>
]]></content>
      
        <categories>
            
            <category> 观文记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 感悟 </tag>
            
            <tag> 转载 </tag>
            
            <tag> 观文 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[公众号排版指南「下」]]></title>
      <url>/2017/08/03/wechat02/</url>
      <content type="html"><![CDATA[<blockquote>
<p>愚者用肉体监视心灵，智者用心灵监视肉体。<br>—— 李嘉诚</p>
<blockquote>
<p>首发于公众号，地址：<a href="http://mp.weixin.qq.com/s/kzFSe-gxyQomRWhaGM90kw" target="_blank" rel="external">公众号排版指南「下」</a></p>
</blockquote>
</blockquote>
<p>接着上次没扯完的蛋，继续扯，扯碎为止。</p>
<h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><p>文字排版</p>
<p>文字排版其实很简单，只要用心多设置一下，稍微折腾下就能学会很好的文字排版技巧。如果实在不愿折腾，看下面，我已经折腾好了。</p>
<p>1.主要的文字排版参数</p>
<p><strong>字号</strong>，正文部分建议使用 14-16 号字体，我经常使用的是 15 号字体，手机上显示效果很不错；标题建议 16-22 号字体，我使用标题比较少，用的时候基本上是 16 号字体然后加粗。这个可以根据自己文章的需要进行调整，适合自己的才是最好的。</p>
<p><strong>行间距</strong>，行间距建议使用 1.5-2.0 倍左右，这样行之间不会显得太密集，看上去美观。我使用的是 1.75 倍，效果不错。</p>
<p><strong>字间距</strong>，我想这个参数也许很少人设置吧，字间距设置之后会给读者更好的阅读体验，建议设置为 1 像素，秀米可以设置，壹伴小插件也可以。</p>
<p><strong>页边距</strong>，页边距设置之后效果非常好，页边距就是页面有一定的留白，上篇也提到过。建议设置在 12-15 像素之间，设置留白太宽了也不好，我经常使用的是 12 像素。</p>
<p><strong>对齐方式</strong>，建议正文部分使用两端对齐的方式，这样在手机上显示出来会更加的整洁，不会出现长短不一的效果。</p>
<p>2.文字色彩搭配</p>
<p>文字色彩搭配方面，我之前试过不少的方案，最后找到了一个比较不错的配色方案，也形成了自己的一套配色方案。建议大家在文字色彩方面形成自己的一套体系，这样会增加你公众号的特点。具体配色方案建议，见下。</p>
<p>标题颜色：#f79646 | #3daad6 | #2e6e9e<br>正文颜色：#3f3f3f | #4f4f4f | #7f7f7f | #545454 | #595959，这几个颜色比较相近，但也可以看出差别。我使用的是 #595959。<br>注释颜色：#d99694 | #a5a5a5。</p>
<p>关于文字排版大概就是这些，使用上面介绍的这些就能做出很好的文字排版，能够形成自己的一套体系就更完美了。</p>
<h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3><p>封面图</p>
<p>封面图对一篇文章具有很大的重要性，现在毕竟是看脸的时代。</p>
<p>怎么选择封面图？</p>
<p>对于如何选择封面图，前面已经提到了如何找到优质的图片。用作封面图有两个关键点，一个是要展示出文章主题，比如写一篇关于使用苹果电脑的文章，找一张苹果电脑的图片最合适不过了。第二是不要有太多的字，并且千万不要把标题的字放到封面图，如果和标题一样的字，那还有什么意义。</p>
<p>另外，在尺寸方面，建议图片比例保持在 9:5 的状态，因为微信官方给出封面尺寸是 900*500 像素。</p>
<p>推荐一款非常适合来做封面图的工具给大家，叫创客贴，地址：<a href="https://www.chuangkit.com/" target="_blank" rel="external">https://www.chuangkit.com/</a> ，我的文章封面图基本都是在创客贴上做。</p>
<p><img src="https://meto.chinakook.com/blog-images/%E5%85%AC%E5%8F%B7%E6%8E%92%E7%89%88_%E5%88%9B%E5%AE%A2%E8%B4%B4.png" alt=""></p>
<p>建议大家去试试它，很好用，在线做，做完下载，非常方便快捷。</p>
<h3 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h3><p>其他</p>
<p>关于公众号排版的重要东西差不多也就这些，如果再说几点的话，那就是摘要和预览了，我认为这两点也比较重要。</p>
<p><strong>摘要</strong>，关于摘要就简单说下吧。第一，形成自己的风格；第二，不要写过于冗长的摘要，一定不要，几个字能写明白你文章要写什么最好。</p>
<p><strong>预览</strong>，预览非常重要，常重要，重要，要！！！预览可以认真的查看是否有错别字，是否有排版问题，是否有语义错误、语句不通顺等问题，所以，一定要预览。</p>
<p>另外，建议大家把自己常用的样式做成模板保存在微信后台，比如顶部的引用、底部引导关注的图片等，这样在编辑新图文的时候就可以很方便的使用。</p>
<p>最后，给大家分享一个小技巧，当你在别人公众号看到喜欢的样式后，也想拿过来用怎么办呢？在电脑浏览器打开文章直接复制想要使用的样式或者效果，然后粘贴到自己的微信公众号后台，完事。你甚至可以把全文直接复制到你的后台，并且样式排版保持不变。这种方式简单粗暴，却非常有效。</p>
<p>ok，到此为止，公众号排版指南完结，其实想想就那么简单，没多少东西，我倒是啰嗦的不少。</p>
<p>另外我说明一件事，这两篇文章绝对不是在打广告，文中提到的所有产品都是我亲身体验之后，觉得好用才推荐给大家的。再者说了，我这个号才开几天，一共也没几个人，谁会来找我做广告啊。</p>
<p><br>ikook<br>2017.08.03</p>
]]></content>
      
        <categories>
            
            <category> 技术栈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 公号运营 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[公众号排版指南「上」]]></title>
      <url>/2017/08/01/wechat01/</url>
      <content type="html"><![CDATA[<blockquote>
<p>人生就像一本书，傻子们走马看花似的随手翻阅它，聪明的人用心地阅读它。因为他知道这本书只能读一次<br>—— 尚·保罗</p>
<blockquote>
<p>首发于公众号，地址：<a href="https://mp.weixin.qq.com/s/OuWsuIToMPE-md8_5PP5qA" target="_blank" rel="external">公众号排版指南「上」</a></p>
</blockquote>
</blockquote>
<p>说到公众号排版，也许是很多刚刚运营公号者的痛处，我也是。当初玩第一个公众号的时候，实在不明白别人怎么做出那些好看的样式和效果的。之后经过自己不停地折腾终于知道了是怎么回事，下面就和大家说说。</p>
<h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><p>排版工具</p>
<p>随着微信的极速发展，公众号体量越来越大，随之产生了很多的排版工具，我自己也折腾过不少的第三方排版工具，可以说各有千秋，各有各的好处。下面几款是我比较常用的、也是比较好用的排版工具。</p>
<p><strong>i 排版</strong></p>
<p>地址：<a href="http://ipaiban.com/" target="_blank" rel="external">http://ipaiban.com/</a> 。i 排版是我比较喜欢的一个排版工具，它的特点是功能强大，有很多贴心的服务，比如新媒体课程之类的，不缺钱的可以去看看。还有就是它的界面与其他相比较为美观。</p>
<p><img src="https://meto.chinakook.com/blog-images/%E5%85%AC%E5%8F%B7%E6%8E%92%E7%89%88_i%E6%8E%92%E7%89%88.png" alt=""></p>
<p>i 排版会提供一些比较好玩的样式，而且还有一些公众号运营的经验技巧，很多都值得学习，所以推荐给大家。</p>
<p><strong>秀米</strong></p>
<p>地址：<a href="https://xiumi.us/" target="_blank" rel="external">https://xiumi.us/</a> 。秀米是很多人都在使用的排版工具，它的特点是样式较多，而且都很主流；秀米的排版器操作方便、简单，新手也可以很快上手，并且模板拖拽即用，非常方便。</p>
<p><img src="https://meto.chinakook.com/blog-images/%E5%85%AC%E5%8F%B7%E6%8E%92%E7%89%88_%E7%A7%80%E7%B1%B3.png" alt=""></p>
<p>它设置文字排版样式的功能非常好用，比如字与字之间的间距宽于标准间距，文章对于手机边框的留白间距等，这些都可以通过秀米设置。</p>
<p><strong>135 编辑器</strong></p>
<p>地址：<a href="http://www.135editor.com/" target="_blank" rel="external">http://www.135editor.com/</a> 。135 编辑器应该也是很多人在用的一款编辑器。它的最大特点就是：样式非常多，而且都很好看，并且一键复制到微信后台，非常方便。</p>
<p><img src="https://meto.chinakook.com/blog-images/%E5%85%AC%E5%8F%B7%E6%8E%92%E7%89%88_135%E7%BC%96%E8%BE%91%E5%99%A8.png" alt=""></p>
<p>使用 135 编辑器最好是注册一个账号，它上面很多样式需要收藏到样式库里面之后使用，可以选择自己喜欢常用的样式收藏，下次登录账号就可以直接使用。</p>
<p>135 编辑器有一点必须要介绍给大家，那就是 HTML 编辑模式，对于我们有开发能力的人来说简直是福音，可以玩出很多新花样。</p>
<p>建议有条件的人可以开一个会员，开通会员后使用起来更加的方便快捷，并且开通会员后所获得的权限和样式也会更多。</p>
<p><strong>壹伴·小插件（重点推荐）</strong></p>
<p>地址：<a href="https://yiban.io/" target="_blank" rel="external">https://yiban.io/</a> 。重点推荐，现在我写公号主要就是用它来完成，它的最大特点就是方便；可以直接在微信公众号后台使用，并且非常好用。</p>
<p><img src="https://meto.chinakook.com/blog-images/%E5%85%AC%E5%8F%B7%E6%8E%92%E7%89%88_%E5%A3%B9%E4%BC%B4.png" alt=""></p>
<p>壹伴·小插件可以安装在各大主流浏览器（Chrome、360、UC、猎豹等）。安装之后，它将会对微信公众号后台页面进行优化升级，提供一些非常实用的功能，比如两端缩进、字间距等。</p>
<p>具体先介绍下它提供的图文排版功能，后面再说它提供的其他功能。</p>
<p>图文排版：<br>排版增强，对后台自带的编辑器提供排版增强；素材导入，提供样式导入，可以将复制的样式直接导入到自己常用的样式库；编辑增强，表情包、GIF、无版权图等。</p>
<p>关于排版工具就说这些，能用好上面四个排版工具就不会为编辑不出精美图文而发愁了。对于上面提到的三个编辑器，建议大家抽出一段时间来好好看一下，把这些编辑器的样式、操作方式和风格都熟悉一下，做到流畅使用，这样以后做图文也就不会不知所措。</p>
<h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3><p>图片排版</p>
<p>图片排版优先考虑的应该是好看的优质图片，下面先来看下如何找到优质的图片，然后再说图片排版。</p>
<p>怎么找到优质图片？</p>
<p><strong>高质量图片网站</strong><br>关于高质量的图片网站，我不会推荐太多，只推荐我经常使用的几个网站，有时候推荐太多了反而会让一些人不知道该怎么选择。不废话，上图，上链接（噢，对了，链接不能跳转，应该都知道，复制到浏览器吧）。</p>
<p>1.Pixabay，地址：<a href="https://pixabay.com/" target="_blank" rel="external">https://pixabay.com/</a><br>这个网站上的所有图片都是没有版权的，可以随意使用， 这是一个非常大的好处，优先推荐。</p>
<p><img src="https://meto.chinakook.com/blog-images/%E5%85%AC%E5%8F%B7%E6%8E%92%E7%89%88_Pixabay.png" alt=""></p>
<p>2.500px，地址：<a href="https://500px.com/" target="_blank" rel="external">https://500px.com/</a> ，简直不要太美。</p>
<p><img src="https://meto.chinakook.com/blog-images/%E5%85%AC%E5%8F%B7%E6%8E%92%E7%89%88_500px.png" alt=""></p>
<p>3.Flickr，地址：<a href="https://www.flickr.com/" target="_blank" rel="external">https://www.flickr.com/</a> ，雅虎旗下产品，要想访问，你懂得。</p>
<p><img src="https://meto.chinakook.com/blog-images/%E5%85%AC%E5%8F%B7%E6%8E%92%E7%89%88_Flickr.png" alt=""></p>
<p>我就推荐这几个，优质图片网站还有很多，像 “花瓣网”、“全景网” 等，推荐多了反而会影响大家选择，可以自己去这几个网站看看，找几个比较喜欢的长期使用。</p>
<p><strong>图片搜索引擎</strong><br>图片搜索引擎也有不少，比如：Google 图库、百度图库、必应图库，还有就是站酷。关于图片搜索引擎我优先推荐 Google 图库，数据库非常强大，搜索结果的可选择性也非常大，来张图体验下。</p>
<p><img src="https://meto.chinakook.com/blog-images/%E5%85%AC%E5%8F%B7%E6%8E%92%E7%89%88_Google.png" alt=""></p>
<p><img src="https://meto.chinakook.com/blog-images/%E5%85%AC%E5%8F%B7%E6%8E%92%E7%89%88_Google01.png" alt=""></p>
<p>搜索出来结果非常精准，并且质量非常高。不过，要想访问，还是那句话，你懂得。这就是为什么刚才要提百度图库的原因，如果实在看不到外面的世界，那就用百度图库吧，当然还可以用站酷（地址：<a href="http://www.zcool.com.cn/" target="_blank" rel="external">http://www.zcool.com.cn/</a> ）。</p>
<p>再给大家推荐一个图片采集工具，就是上面提到的「壹伴·小插件」，它提供了几种对图片采集和上传图片到素材库的功能。下面介绍给大家：</p>
<p>一键采图，可以对网页上喜欢的图片一键采取，图片就自动上传到微信素材库；截屏上传，插件提供网页截屏功能，截屏直接上传到素材库；手机相册传图，手机微信关注「壹伴助手」公众号，只需发送图片到公众号，就可以上传到素材库；桌面传图，可以使用壹伴本地上传器，只需将图片拖动到桌面的同步文件夹即可上传。</p>
<p>好了，关于怎么找优质图片就说这些，还有其他途径，大家有兴趣的自己折腾。</p>
<p>怎么设置图片尺寸？</p>
<p>很多人排版都不会在意图片尺寸，以为只要在手机上显示出来就好了，其实这是完全错误的观念。一篇好的图文里面包含的每一张图片的尺寸应该差不多都是统一的，这样整篇文章在手机和电脑上显示出来会非常的美观。图片尺寸建议设置为宽度 900px，保持宽高比不变。</p>
<p>怎么进行图片排版？</p>
<p>图片加入文章之后一定要把对齐方式设置为居中，这样可以保证在电脑上查看文章时也很整齐美观。</p>
<p>再就是留白，留白已经成为一种主流的排版方式，留白会给人以美观的感受，所以建议在文字和图片之间留一行空白，这样看上去会更加美观，同时在手机上阅读体验会更好。</p>
<p>PS: 本来想要一篇文章写完，但由于篇幅较长，就分成了两篇，下篇已经写好。如果你等不了下次推送，可在公众号后台回复「公众号排版指南下」获取。</p>
<p><br>ikook<br>2017.08.01</p>
]]></content>
      
        <categories>
            
            <category> 技术栈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 公号运营 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[你付费了吗？]]></title>
      <url>/2017/07/28/essay01/</url>
      <content type="html"><![CDATA[<blockquote>
<p>时间是世界上的一切成就的土壤。时间给空想者痛苦，给创造者幸福。  —— 麦金西</p>
</blockquote>
<a id="more"></a>
<p>今天的重点不是时间，上面的引用语也许会误导你。今天，我要和你们说说付费。付费省下来的就是时间，所以拿时间做引用也就合理了。</p>
<h3 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h3><p>免费，免除费用，也就是不要钱。可免费真的就是「免费」吗？免费，免掉的是钱，可付出的是时间和效率成本。</p>
<p>之前一直想学习投资理财，可苦于不知道如何入手迟迟没有接触。前些日子无意中在一位前辈的博客中看到「21 天小白理财训练营」，付费，9 块钱。钱很少，但就是有人不买单。</p>
<p>我加了，因为最起码能让我了解理财是个什么东西，能让我了解以后怎么去学。我之前一直自己找书，找资料看，光找资料就花费很多时间，然后看到各种术语、各种看不懂，就放弃了。付出了时间不说，关键是还什么都没有学到。</p>
<p>前天「21 天小白理财训练营」结束了，我知道了到底什么是理财，知道了常见的理财产品有哪些，知道了哪些产品低风险低收入，哪些产品高风险高收入，还知道了以后该怎么继续深入学习理财。对了，我还在华泰证券开了户，就是用于买股票和基金的账户。这就是我花 9 块钱得到的东西，结束的时候还抢了 6 块钱的红包，比我自己折腾半年学到得多的多。</p>
<p>松浦太郎说过：“想要真正学到东西，就得花钱”，这件事正好说明了这个道理。</p>
<p>其实我不能理解，为什么社会上每天都有人想要绞尽脑汁去免费学东西。学习这件事，免费的东西，永远是最昂贵的。除了钱之外，你必然要花掉人际、时间、心情等各方面的成本。这个世界上，好的、可共享的资源或思想，必然是别人付出心血的结果，为别人的时间和精力还有知识成本付费，是现代人的基本操守。</p>
<h3 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h3><p>为什么付费的东西就能够快速掌握？</p>
<p>付过费的东西，下意识就会去重视，因为你花了钱。花了钱的东西你会不在意吗？不会。并且花钱买的东西，是别人花时间和精力打磨出来的，必然会是一套整体的事物，省去了自己筛选和过滤的时间，自然就能够快速掌握。往往自己折腾过程中会偏离主线，会走错路。</p>
<p>在这个时代，我们要努力培养的，是维系雇佣关系的能力，而不是人情关系的能力。</p>
<p>很多人，有些事情需要别人帮助，第一时间想到的是亲戚，而不是雇佣劳动力。但往往最后发现反而不比请一个需要的专业人员来的轻松。那是因为，你没办法展现出你雇主的本色，不能坦率的提出你的需求，达到一种合作的平衡，所以，往往找朋友找亲戚帮助永远觉得很累很疲倦。</p>
<p>一旦成为了雇主，你们的关系就不一样了。关系就是一切，一切为了关系。相比人情，雇佣关系是最飒爽的关系，它让你们双方都绽放出最舒服的工作状态。不满意的雇员可以一换再换，换到满意为止，亲戚朋友你能这样吗？</p>
<p>其实，我们就生活在一个雇佣的时代，每天我们每个人都在服务别人，也被别人服务。有些人会觉得自己很迷茫，生活没有改进，那是因为，你既不知道怎么服务别人，也不知道如何服务自己、如何被别人服务。</p>
<p>如果不知道，那就去花钱吧，从花钱开始，花小钱开始。</p>
<p>花钱是一门艺术，一旦开始把钱花对了地方，你的状态就活了，你的人际关系，你的专业，你的社交，你的眼界，随即就会开始发生变化。</p>
<h3 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h3><p>那么该如何花钱呢？</p>
<p>不管你现在一个月有多少收入，你一定要养成每个月「 为自己的未来花点钱的习惯」，一开始，最低要把这个标准订到 5%，以后根据自己的经济实力调整。</p>
<p>就好比我一个月有 1500 元的生活费，我每月都会拿出 200 元花给未来的自己。</p>
<p>怎么花呢？为一切优质内容付费。</p>
<p>订阅对你有用的内容。比如我加入了刘欣老师组织的「2017编程能力提高社群」，每季 300 元，一季 3 个月，时长为一年；我还加入了stormzhang 的小密圈，一年 129 元；我还准备学习长投学堂的投资理财初级课；我每月都会买书，技术类、文学类等都有。这些都是为优质内容付费。</p>
<p>这些优质内容，都会结结实实长在我的气质和见识上，就算我很瘦弱。我相信 30 岁之后，我就会知道我是如何成为一个更好的人的。</p>
<p>当你学会花钱的时候，周围人的才会觉得你是一个不为花钱拧巴的人， 才会愿意和你分享更多的资源。就好比 stormzhang （开发者，目前做管理，维护了一个优质的公众号）做付费订阅的时候，就是因为我懂得为他的内容赞赏，所以才邀请了我。</p>
<h3 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h3><p>学会远离一切免费的东西。</p>
<p>在这个信息爆炸的时代，有很多免费的东西已经可以让我们生活得比较好，不花钱也不会有什么问题。</p>
<p>可是你想想，你会为免费的东西付出多少钱之外的东西，时间、精力哪样都比钱值钱。慢慢你会发现，你通过免费所得永远都不比你花钱所得到的来容易和轻松，并且你花的时间要比付费多得多。</p>
<p>我们整个社会正在进入转型期，很多东西都会收费，很多人都会为优质内容付费。未来你是否进步，一定是我们能否自己拿钱去买别人的技能、思想，你有多愿意为知识付费，你就成长得有多快。未来最值钱的， 一定是你需要为别人的专业付费。</p>
<p>你为别人的思想输出付费，他们有了经济输入，才能更好地输出。这个时代，一定要学会付费，一定要学会远离免费的东西。这个观念一定要有。学会了为优质内容付费，你就会收获金钱以外的很多东西，知识、时间、气质、内涵 …</p>
<p><br>ikook<br>2017.07.28</p>
]]></content>
      
        <categories>
            
            <category> 随笔集 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 生活 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[这次，我认真了]]></title>
      <url>/2017/07/27/2017.07.27-gnosis/</url>
      <content type="html"><![CDATA[<blockquote>
<p>没有人知道自己将来会从事何种职业，认真对待每一件事才是最重要的。—— (美)特怀拉·萨普<br><a id="more"></a></p>
<blockquote>
<p>文在公众号首发，原文：<a href="https://mp.weixin.qq.com/s/zO66EnIWROhv0xbpxhl0nQ" target="_blank" rel="external">这次，我认真了</a>。底部可扫码关注</p>
</blockquote>
</blockquote>
<p>我是 ikook，也许你并不知道我是谁，也许你在其他地方了解过我。但，今天我们在这里相遇便是缘分。</p>
<p>两年间我断断续续玩过三个公众号，包括你正在的看这一个。前两个我都没有认真的对待过，并且都没有坚持维护下来，都被我无情的丢在那里，可以说是任何人都不得而知。</p>
<p>第二号我曾试图维护，但好景不长，连续推送一周之后，被我的感冒所打倒，再也没有起来过。那时也许是真想好好维护下去，可唯独没有非常认真的对待，不然也不会因为一个小小的感冒就放弃了。我想就算没有那场感冒，也会给自己找无数个理由放弃。</p>
<p>那次感冒之后，我不光放弃维护公号，好像也放弃了自己。我开始停止学习，停止前进的脚步，停止了一切让我有所成长的做法。我开始各种玩游戏，整天混迹在王者大陆不能自拔。</p>
<p>这一切都是人的惰性所指使，你没有以一颗坚定不移的心开始，抱着试试的心态，注定要失败。可这次，我认真了。</p>
<p>我认真了，不知道原因，也许是因为自己颓废了太久，也许是因为连自己都开始讨厌游离状态下的自己，也许我就是想认真干一件事。无论什么原因，我就想把这件事坚持下去。每天有那么一件事总在提醒着我，鞭策着我，也许改变就会发生在不知不觉中。</p>
<p>有人会问，为什么选择了这种方式呢，为什么要写公众号呢？我不知道啊，想写。我热爱文字，喜欢记录。有个能够记录自己成长的地方不是很好吗。你不是有博客吗？我想利用这种方式让更多人知道我，我想换种方式改变自己，想要用不同的方式来激励自己。</p>
<p>今天我看了自己在 17 年年初写下的文章（想看这篇文章点击下方阅读原文）。想来惭愧，定下的目标慢慢都忘记了，忘记了去履行自己的诺言，忘记了自己定下的目标 —— 学习的目标、生活的目标。当初定下的学习目标包括「继续学习 Android、Java、React Native、英语、阅读还有实习等」，看到这也许会问，这么多学的过来么？其实如果把这些任务量化到一年当中去学习是很轻松的事情。</p>
<p>我会拾起年初定下的目标，努力把每件事情做好。同时，我会用心认真的去维护这个公众号，我会坚持下去。我在写下这篇文章的时候就已经下定决心了，改变自己。不为了什么，就为了看看自己还有救没。在此立个 flag，17 年年末，完成年初定下的目标；认真维护公号和博客；认真对待每一天。</p>
<p>改变从现在开始，我就想认认真真的做自己，不要再混下去，况且我还有理想，我还有梦。</p>
<p><br>ikook<br>2017.07.27</p>
]]></content>
      
        <categories>
            
            <category> 随笔集 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 生活 </tag>
            
            <tag> 感悟 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[MySQL 常用命令归纳]]></title>
      <url>/2017/07/24/mysql_crash_course/</url>
      <content type="html"><![CDATA[<blockquote>
<p>《MySQL 必知必会》学习总结&amp;&amp;常用命令归纳，看完这篇文章就不用买《MySQL 必知必会》了，这篇就够了。</p>
</blockquote>
<h2 id="数据库基础概念-amp-amp-什么是-SQL、MySQL"><a href="#数据库基础概念-amp-amp-什么是-SQL、MySQL" class="headerlink" title="数据库基础概念&amp;&amp;什么是 SQL、MySQL"></a>数据库基础概念&amp;&amp;什么是 SQL、MySQL</h2><h3 id="数据库基础概念"><a href="#数据库基础概念" class="headerlink" title="数据库基础概念"></a>数据库基础概念</h3><ul>
<li><strong>数据库(database)</strong> 保存有组织的数据的容器(通常是一个文件或者一组文件)。<br><br></li>
<li><strong>表(table)</strong> 某种特定类型数据的结构化清单。<br><br></li>
<li><strong>模式(schema)</strong> 关于数据库和表的布局及特定的信息。<br><br>模式可以用来描述数据库中特定的表以及整个数据库(和其中表的关系)。<br><br></li>
<li><strong>列(column)</strong> 表中的一个字段。所有表都是由一个或者多个列组成的。<br><br></li>
<li><strong>数据类型(datatype)</strong> 所容许的数据的类型。每个表列都有相应的数据类型，它限制（或容许）该列中存储的数据。<br><br></li>
<li><strong>行(row)</strong> 表中的一个记录。<br><br></li>
<li><strong>主键(primary key)</strong> 一列（或一组列），其值能够唯一区分表中每个行。<br>主键的条件：<br>1.任意两行都不具有相同的主键值；<br>2.每个行都必须具有一个主键值（主键列不允许 NULL 值）</li>
</ul>
<h3 id="什么是-SQL"><a href="#什么是-SQL" class="headerlink" title="什么是 SQL"></a>什么是 SQL</h3><p>SQL 是结构化查询语言（Structured Query Language）的缩写。SQL 是一种专门用来与数据库通信的语言。</p>
<h5 id="SQL-有以下优点："><a href="#SQL-有以下优点：" class="headerlink" title="SQL 有以下优点："></a>SQL 有以下优点：</h5><ul>
<li>SQL 不是某个特定数据库供应商专有的语言。几乎所有重要的 DBMS 都支持 SQL，所以，学习此语言几乎能与所有数据库打交道。<br><br></li>
<li>SQL 简单易学。它的语句全都是由描述性很强的英语单词组成，而且这些单词的数目不多。<br><br></li>
<li>SQL 尽管看上去很简单，但它实际上是一种强有力的语言，灵活使用其语言元素，可以进行非常复杂和高级的数据库错操作。</li>
</ul>
<h3 id="什么是-MySQL"><a href="#什么是-MySQL" class="headerlink" title="什么是 MySQL"></a>什么是 MySQL</h3><p>数据的所有存储、检索、管理和处理实际上是由数据库软件 —— DBMS（数据库管理系统）完成的。MySQL 是一种 DBMS，即它是一种数据库软件。</p>
<h5 id="MySQL-的优点："><a href="#MySQL-的优点：" class="headerlink" title="MySQL 的优点："></a>MySQL 的优点：</h5><ul>
<li>成本 —— MySQL 是开放源代码的，一般可以免费使用（甚至可以免费修改）。<br><br></li>
<li>性能 —— MySQL 执行很快，非常快。<br><br></li>
<li>可信赖 —— 某些非常重要和声望很高的公司、站点使用 MySQL，这些公司和站点都用 MySQL 来处理自己的重要数据。<br><br></li>
<li>简单 —— MySQL 很容易安装和使用。</li>
</ul>
<h2 id="使用-MySQL-的常用命令归纳（前方高能，很长，很详细）"><a href="#使用-MySQL-的常用命令归纳（前方高能，很长，很详细）" class="headerlink" title="使用 MySQL 的常用命令归纳（前方高能，很长，很详细）"></a>使用 MySQL 的常用命令归纳（前方高能，很长，很详细）</h2><h3 id="USE-mysql"><a href="#USE-mysql" class="headerlink" title="USE mysql;"></a>USE mysql;</h3><p>  输出：<code>Database changed</code><br>  分析：选择并打开「mysql」这个数据库，记住，必须先使用 USE 打开数据库，才能读取其中的数据。</p>
<blockquote>
<p>注：这里的 mysql 是指所选数据库的名字。该数据库是 MySQL 软件内部使用的数据库。</p>
</blockquote>
<h3 id="SHOW-语句"><a href="#SHOW-语句" class="headerlink" title="SHOW 语句"></a>SHOW 语句</h3><ul>
<li><code>SHOW DATABASES;</code><br><br>分析：返回一个可用的数据库列表。该列表中可能包含 MySQL 内部使用的数据库。<br><br></li>
<li><code>SHOW TABLES;</code><br><br>分析：获得一个所选数据库内的表的列表，即返回当前选择的数据库内可用表的列表。<br><br></li>
<li><code>SHOW COLUMNS FROM test_table;</code><br><br>分析：返回要求显示的表的表列。<code>SHOW COLUMNS</code> 要求给出一个表名(这里例子中的 FROM test_table，test_table 为表名)，它对每个字段返回一行，行中包括字段名、数据类型、是否允许 NULL、键信息、默认值以及其他信息。<br><br>注：DESCRIBE 语句，MySQL 支持用 DESCRIBE 作为 SHOW COLUMNS FROM 的一种快捷方式。即 <code>DESCRIBE test_table;</code> 是 <code>SHOW COLUMNS FROM test_table;</code> 的一种快捷方式。<br><br></li>
<li>所支持的其他 <code>SHOW</code> 语句还有：<br><br>1.<code>SHOW STATUS;</code> 用于显示广泛的服务器状态信息；<br><br>2.<code>SHOW CREATE DATABASE;</code> 和 <code>SHOW CREATE TABLE;</code> 分别用来显示创建特定数据库或表的 MySQL 语句；<br><br>3.<code>SHOW GRANTS;</code> 用来显示授予用户（所有用户或特定用户）的安全权限；<br><br>4.<code>SHOW ERRORS;</code> 和 <code>SHOW WARNINGS;</code> 用来显示服务器错误或者警告信息。<br><blockquote>
<p>注：在 MySQL 命令行程序中，执行命令 <code>HELP SHOW</code> 显示允许操作的 SHOW 语句。</p>
</blockquote>
</li>
</ul>
<h3 id="检索数据"><a href="#检索数据" class="headerlink" title="检索数据"></a>检索数据</h3><p>最经常使用的 SQL 语句可能就是 SELECT 语句了，它的用途是从一个或多个表中检索信息。为了使用 SELECT 检索表数据，必须至少给出两条信息 —— 想选择什么，以及从什么地方选择。</p>
<blockquote>
<p>注：以下例子使用的数据库、表名、以及表列等如下：<br>数据库：<br>crashcourse<br>表：<br><img src="https://meto.chinakook.com/blog-images/mysql/tables.png" alt="SHOW TABLES"><br><br>表列：</p>
<ul>
<li>customers<br><img src="https://meto.chinakook.com/blog-images/mysql/customers.png" alt=""><br><br></li>
<li>orderitems<br><img src="https://meto.chinakook.com/blog-images/mysql/orderitems.png" alt=""><br><br></li>
<li>orders;<br><img src="https://meto.chinakook.com/blog-images/mysql/orders.png" alt=""><br><br></li>
<li>productnotes;<br><img src="https://meto.chinakook.com/blog-images/mysql/productnotes.png" alt=""><br><br></li>
<li>products;<br><img src="https://meto.chinakook.com/blog-images/mysql/products.png" alt=""><br><br></li>
<li>vendors;<br><img src="https://meto.chinakook.com/blog-images/mysql/vendors.png" alt=""></li>
</ul>
</blockquote>
<h4 id="检索单个列"><a href="#检索单个列" class="headerlink" title="检索单个列"></a>检索单个列</h4><p>输入：<code>SELECT prod_name FROM products;</code><br>分析：上述语句利用 SELECT 语句从 products 表中检索一个名为 prod_name 的列。所需的列名在 SELECT 关键字之后给出，FROM 关键字指出从其中检索数据的表名。</p>
<blockquote>
<p>注： 输出的结果为未排序的数据；SQL 语句是不区分大小写的，但是建议对所有 SQL 关键字使用大写，而对所有列和表名使用小写，这样做有助于使代码更加易于阅读和调试。</p>
</blockquote>
<h4 id="检索多个列"><a href="#检索多个列" class="headerlink" title="检索多个列"></a>检索多个列</h4><p>输入：<code>SELECT prod_id, prod_name, prod_price FROM products;</code><br>分析：从一个表中检索多个列，和前一个例子使用相同的 SELECT 语句，唯一不同的地方是必须在 SELECT 关键字后给出多个列名，列名之间必须用逗号分隔。</p>
<h4 id="检索所有列"><a href="#检索所有列" class="headerlink" title="检索所有列"></a>检索所有列</h4><p>输入：<code>SELECT * FROM products;</code> 命令<br>分析：如果给定一个通配符*，则返回表中所有列。列的顺序一般是列在表定义中出现的顺序。</p>
<blockquote>
<p>注： 一般，除非你确实需要表中的每个列，否则最 好别使用*通配符。虽然使用通配符可能会使你自己省事，不 用明确列出所需列，但检索不需要的列通常会降低检索和应 用程序的性能。</p>
</blockquote>
<h4 id="检索不同的行"><a href="#检索不同的行" class="headerlink" title="检索不同的行"></a>检索不同的行</h4><p>如何检索出有不同值的列表呢？解决办法是使用 DISTINCT 关键字，顾名思义，此关键字指示 MySQL 只返回不同的值。</p>
<p>输入：<code>SELECT DISTINCT vend_id FROM products;</code><br>分析：SELECT DISTINCT vend_id 告诉 MySQL 只返回不同（唯一）的 vend_id 行。如果使用 DISTINCT 关键字，它必须直接放在列名的前面。</p>
<blockquote>
<p>注：不能部分使用 DISTINCT。DISTINCT 关键字应用于所有列而不仅是前置它的列。如果给出 SELECT DISTINCT vend_id, prod_price，除非指定的两个列的值相同，否则所有行都将被检索出来。<br>如下：<br>没有使用 DISTINCT 关键字<br><img src="https://meto.chinakook.com/blog-images/mysql/no_distinct.png" alt=""><br><br><br>使用 DISTINCT 关键字<br><img src="https://meto.chinakook.com/blog-images/mysql/distinct.png" alt=""></p>
</blockquote>
<h4 id="限制结果"><a href="#限制结果" class="headerlink" title="限制结果"></a>限制结果</h4><p>输入：<code>SELECT prod_name FROM products LIMIT 5;</code><br>分析：为了返回第一行或者前几行，可使用 LIMIT 子句。此语句使用 SELECT 语句检索单个列。LIMIT 5 指示 MySQL 返回不多于5行。</p>
<p>为得出下一个 5 行，可指定要检索的开始行和行数。</p>
<p>输入：<code>SELECT prod_name FROM products LIMIT 5,5;</code><br>分析：LIMIT 5, 5 指示 MySQL 返回从行 5 开始的 5 行。第一个数为开始位置，第二个数为要检索的行数。</p>
<p>所以，带一个值的LIMIT总是从第一行开始，给出的数为返回的行数。带两个值的LIMIT可以指定从行号为第一个值的位置开始。</p>
<blockquote>
<p>注：检索出来的第一行为行 0 而不是行 1。因此，LIMIT 1, 1将检索出第二行而不是第一行；MySQL 5 支持 LIMIT 的另一种替代语法。LIMIT4OFFSET 3意为从行 3 开始取 4 行，就像 LIMIT 3, 4 一样。</p>
</blockquote>
<h4 id="使用完全限定的表名"><a href="#使用完全限定的表名" class="headerlink" title="使用完全限定的表名"></a>使用完全限定的表名</h4><p>到此为止使用的 SQL 例子只通过列名引用列。也可能会使用完全限定的名字来引用列（同时使用表名和列字）。请看以下例子：</p>
<p>输入：<code>SELECT products.prod_name FROM products;</code><br>分析：这条语句在功能上和 <code>SELECT prod_name FROM products;</code> 语句是一样的。但这里指定了一个完全限定的列名。</p>
<p>表名也是可以完全限定的，例如：<code>SELECT products.prod_name FROM crashcourse.products;</code> 这条语句和刚才的那条语句是一样的。</p>
<h3 id="排序检索数据"><a href="#排序检索数据" class="headerlink" title="排序检索数据"></a>排序检索数据</h3><p>如何使用 SELECT 语句的 ORDER BY 子句，根据需要排序检索出来的数据呢？下面我们来看一下。</p>
<h4 id="排序数据"><a href="#排序数据" class="headerlink" title="排序数据"></a>排序数据</h4><p>我们上面使用 SELECT 语句检索出来的数据都是没有经过排序的。关系数据库理论认为，如果不明确规定排序顺序，则不应该假定检索出来的数据的顺序有意义。</p>
<p>为了明确地排序用 SELECT 语句检索出来的数据，可使用 ORDER BY 子句。</p>
<p>输入：<code>SELECT prod_name FROM products ORDER BY prod_name;</code><br>分析：<br>未完待续…</p>
<p><br>ikook<br>2017.07.24</p>
]]></content>
      
        <categories>
            
            <category> 技术栈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如果你很忙，你一定在什么地方做错了]]></title>
      <url>/2017/06/18/view-text-01/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本文为观文记，原文链接：<a href="https://www.jianshu.com/p/4dc3518089a0" target="_blank" rel="external">https://www.jianshu.com/p/4dc3518089a0</a></p>
</blockquote>
<a id="more"></a>
<p>如果你很忙，你一定是在什么地方做错了。我们不应艰苦地工作，而应艰苦工作。艰苦工作不是艰苦地工作，两个有本质的区别。如果你的目标是为了创造一种卓越的人生和生活，那么，忙碌和精疲力竭就是你最大的敌人。</p>
<h2 id="柏林研究项目"><a href="#柏林研究项目" class="headerlink" title="柏林研究项目"></a>柏林研究项目</h2><p>1990 年初，三名心理学家组成研究小组拜访了柏林艺术大学。他们此行的目的是为了专门研究小提琴演奏者。</p>
<p>他们分别对比研究了两个小组：优秀演奏者小组、普通演奏者小组。这三位研究者参照不同主题安排了一系列的深度访谈。他们给了两个小组的每个成员人手一册日记本，日记本把每 24 小时划分为一个个 50 分钟的时间区块。他们请小组成员返回宿舍并且要求他们对今后每天的活动情况进行详细的记录。</p>
<center> <img src="https://meto.chinakook.com/blog-images/view-text-01.jpg" alt="Violinist Diana Yukawa"> </center><br><center> <em>Violinist Diana Yukawa</em> </center>

<p>研究者们希望通过这些数据分析出一个最基本的问题： <strong>为什么优秀演奏者比普通演奏者更加出色？</strong></p>
<h2 id="解密优秀演奏者模式"><a href="#解密优秀演奏者模式" class="headerlink" title="解密优秀演奏者模式"></a>解密优秀演奏者模式</h2><p>在时间上，<strong>两个小组花费在音乐上的时间，平均计算的话，几乎完全一样（大约每周 50 个小时）。</strong> 差异在于他们如何利用这些时间。<strong>优秀演奏者在刻意练习「deliberate practice」上投入的时间几乎是普通演奏者的三倍。</strong></p>
<p>研究者们着手研究这些学生到底是如何安排他们的时间的。那些<strong>普通演奏者</strong>，他们发现，把正常的音乐课业和练习分配在一个全天范围。他们几乎均匀地分配了学习和练习的时间。<strong>优秀演奏者</strong>，与之形成强烈的对比，优秀演奏者把他们的学习和练习都集中在两个预先精心规划好的时段。这两个时段分别为：早上、下午。</p>
<p>这种将课业学习和休闲生活相互隔离的做法，已经在这些演奏者生活的其他方面产生了相应的影响。睡眠就是一个很好的例证：<strong>优秀演奏者平均来说，要比普通演奏者在睡眠方面至少多出一个小时。</strong></p>
<p>再来看看演奏者们的放松和休闲活动。统计显示，<strong>优秀演奏者的休闲时间要大大多于普通演奏者，</strong> 而且，那些最佳演奏者，精英中的精英，在放松和休闲上的时间花费更加突出。</p>
<h2 id="艰苦工作「Hard-Work」不同于艰苦地工作「Hard-to-Do-Work」"><a href="#艰苦工作「Hard-Work」不同于艰苦地工作「Hard-to-Do-Work」" class="headerlink" title="艰苦工作「Hard Work」不同于艰苦地工作「Hard to Do Work」"></a>艰苦工作「Hard Work」不同于艰苦地工作「Hard to Do Work」</h2><p>针对研究结果的结论：</p>
<ul>
<li>普通演奏者花费练习时间和优秀演奏者一样多<br><br></li>
<li>普通演奏者没有将主要精力用在必要的练习类型上「在一些关键性的刻意练习上花费的时间几乎只有优秀演奏者的三分之一」<br><br></li>
<li>普通演奏者将其学习和练习时间近乎随意地安排在一天之中。因此，即使他们花费在课业上时间不比优秀演奏者更长的话，他们每天用于睡眠的时间也会减少，而且在心理方面同样会感受到更多的压力。不言而明，在小提琴演奏方面，他们仍然会处于平庸的状态。</li>
</ul>
<p>柏林研究提供了一项重要的实验依据，证明了艰苦工作与艰苦地工作之间的差异：</p>
<ul>
<li><strong>艰苦工作</strong> 就是刻意练习。当你进行这些刻意练习时，它其实很缺乏趣味性，但是你没有必要在一天中过多地进行这项活动。刻意练习提供了一个可测量技能进展的工具 - 它可以让你产生强烈的满足感和足够的动机。因而，尽管刻意练习的确非常辛苦，但他不会使你精疲力尽，而且它还可以很好地与轻松和惬意生活相融合。<br><br></li>
<li><strong>艰苦地工作</strong>，与之恰恰相反，它几乎让你精疲力竭。你一整天都处在一种错误的忙碌状态中。就像来自柏林研究报告中那些普通演奏者一样，不断感受疲惫和压力。但同时，正如你所看到的，对你的实际成就或能力的改进却只能产生很小的影响。</li>
</ul>
<p>这项分析引发了一个重要的结论。无论你是一名学生，还是一名正走在职业发展道路上的专业人士，<strong>如果你的目标是为了创造一种卓越的人生和生活，那么，忙碌和精疲力竭就是你最大的敌人。</strong> 如果你正在经历周而复始的工作或生活压力，你一定是在什么地方做错了！你就是那些来自柏林艺术大学的普通演奏者 - 而不是优秀演奏者。你将你的生活（错误地）构建在艰苦地工作之上，而不是（正确的）艰苦工作。</p>
<p>这项研究报告建议的解决方案，正如我经常倡导的那样，超乎寻常的简单：Do less 。但必须全情投入，而且聚焦在关键环节。在你完成它们之后，请尽情享受一天之中的剩余时光并且快乐地生活吧。</p>
<h2 id="我的感悟"><a href="#我的感悟" class="headerlink" title="我的感悟"></a>我的感悟</h2><p>这篇文章很好的讲述了「艰苦工作」与「艰苦地工作」 的区别。我们应当在学习提高时全身心的投入其中，并享受其中的乐趣。在完成任务或者疲倦之后尽情享受欢乐的时光，释放自己，尽情玩耍，喝杯农药。主题是，不要让自己陷入 <strong>假学习</strong> 的状态，千万不要每天都在学习，却不知道自己在干什么，到头来学习娱乐两悲伤，抛弃了惬意的生活更远离了优秀的自己。</p>
<p>如果你的目标是为了创造一种卓越的人生和生活，那么，忙碌和精疲力竭就是你最大的敌人 | 刻意练习很重要 | Do less</p>
<hr>
<p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=27506733&auto=1&height=66"></iframe></p>
<center> Oh Father，Happy Father’s Day </center>

<p><br><br><br>ikook<br>2017.06.18</p>
]]></content>
      
        <categories>
            
            <category> 观文记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 感悟 </tag>
            
            <tag> 学习技巧 </tag>
            
            <tag> 观文 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Kotlin-开始]]></title>
      <url>/2017/06/16/kotlin01/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Kotlin 从入门到放弃–开始</p>
</blockquote>
<a id="more"></a>
<h2 id="什么是-Kotlin"><a href="#什么是-Kotlin" class="headerlink" title="什么是 Kotlin"></a>什么是 Kotlin</h2><p>简单来说，Kotlin 是一门由「JetBrains」开发的基于 JVM 的静态类型编程语言，它 100% 兼容 Java。</p>
<p>它可以用于：</p>
<ul>
<li>服务器开发</li>
<li>Android 开发</li>
<li>前端开发</li>
<li>本地执行程序</li>
</ul>
<p>这是要全栈的节奏啊，它的目标应该就是要成为一门全栈编程语言。</p>
<h3 id="维基百科介绍"><a href="#维基百科介绍" class="headerlink" title="维基百科介绍"></a>维基百科介绍</h3><p>Kotlin 是一种在 Java 虚拟机上运行的静态类型编程语言，它也可以被编译成为 JavaScript 源代码。它主要是由俄罗斯圣彼得堡的 JetBrains 开发团队所发展出来的编程语言，其名称来自于圣彼得堡附近的科特林岛。2012 年 1 月，著名期刊《 Dr. Dobb’s Journal 》中 Kotlin 被认定为该月的最佳语言。虽然与 Java 语法并不兼容，但 Kotlin 被设计成可以和 Java 代码相互运作，并可以重复使用如 Java 集合框架等的现有 Java 类库。</p>
<h4 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h4><p>2011 年 7 月，JetBrains 推出 Kotlin 项目，这是一个面向 JVM 的新语言，它已被开发一年之久。JetBrains 负责人Dmitry Jemerov 说，大多数语言没有他们正在寻找的特性，Scala 除外，他指出了 Scala 的编译时间慢这一明显缺陷。Kotlin 的既定目标之一是像 Java 一样快速编译。</p>
<p>2012 年 2 月，JetBrains 以 Apache 2 许可证开源此项目，Jetbrains 希望这个新语言能够推动 IntelliJ IDEA 的销售。</p>
<p>Kotlin v1.0 于 2016 年 2 月 15 日发布。这被认为是第一个官方稳定版本，并且 JetBrains 已准备从该版本开始的长期向后兼容性。</p>
<p>在 Google I/O 2017 中，Google 宣布在 Android 上为 Kotlin 提供支持。</p>
<h2 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h2><h3 id="安装-Java"><a href="#安装-Java" class="headerlink" title="安装 Java"></a>安装 Java</h3><p>Kotlin 是基于 JVM 的编程语言，所以首先一定要先安装好 Java 开发环境，并配置好环境变量。点击链接：<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">Java SE</a> 下载对应版本，安装完成后配置环境变量。安装过程自行 Google。</p>
<p>下面贴一下 Windows 下配置环境变量的过程。</p>
<ol>
<li>打开，我的电脑 –&gt; 属性 –&gt; 高级 –&gt; 环境变量 <br><br></li>
<li>新建系统变量 JAVA_HOME 和 CLASSPATH：<br>变量名：JAVA_HOME<br>  变量值：C:\Program Files\Java\jdk1.7.0（这个是你JDK安装的位置，注意变量值到JAVA JDK文件夹，复制粘贴）<br>变量名：CLASSPATH<br>变量值：.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar;（复制即可）<br><br></li>
<li>选择「系统变量」中变量名为「Path」的环境变量，双击该变量，把 JDK 安装路径中 bin 目录的绝对路径，添加到「Path」变量的值中，并使用半角的分号和已有的路径进行分隔。 <br>变量名：Path <br>变量值：%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;（在系统变量中找到「Path」变量，把前面的变量放到原有变量最前面）</li>
</ol>
<h3 id="安装-Kotlin"><a href="#安装-Kotlin" class="headerlink" title="安装 Kotlin"></a>安装 Kotlin</h3><p>我这里选择 Working with the Command Line Compiler 的方式来开始学习 Kotlin。使用这种方式便于理解 Kotlin 的运行原理，并且命令行其实也是蛮炫酷的，更没有想象的那么难，命令不会可以查。</p>
<h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p>在  <a href="https://github.com/JetBrains/kotlin/releases/tag/v1.1.2-5" target="_blank" rel="external">GitHub</a> 中下载安装包，然后手动解压到自己想要的目录，解压完成后，配置环境变量。将 Kotlin 解压目录下的 bin 路径添加到环境变量的「系统变量」中「Path」下。</p>
<h4 id="Mac-amp-Linux"><a href="#Mac-amp-Linux" class="headerlink" title="Mac &amp; Linux"></a>Mac &amp; Linux</h4><p>如果你是 Mac 或者 Linux 系统可以使用下面方式中的任意一种。由于我用的是 Windows，不保证下列方式均可行，并且没有测试过，只是将官方的方法照搬过来而已。</p>
<h5 id="SDKMAN"><a href="#SDKMAN" class="headerlink" title="SDKMAN!"></a>SDKMAN!</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ curl -s https://get.sdkman.io | bash</div><div class="line">$ sdk install kotlin</div></pre></td></tr></table></figure>
<h5 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ brew update</div><div class="line">$ brew install kotlin</div></pre></td></tr></table></figure>
<h5 id="MacPorts"><a href="#MacPorts" class="headerlink" title="MacPorts"></a>MacPorts</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo port install kotlin</div></pre></td></tr></table></figure>
<h2 id="创建并运行第一个-Kotlin-程序"><a href="#创建并运行第一个-Kotlin-程序" class="headerlink" title="创建并运行第一个 Kotlin 程序"></a>创建并运行第一个 Kotlin 程序</h2><p>新建一个名为 hell.kt 的文件，扩展名 .kt 代表是 Kotlin 文件。在文件中输入以下内容：<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</div><div class="line">    println(<span class="string">"Hello, World!"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后在终端(Terminal)中输入以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ kotlinc hello.kt -include-runtime -d hello.jar</div></pre></td></tr></table></figure></p>
<p>注：「kotlinc」 是编译的意思，类似于 javac；「hello.kt」 是需要编译的文件名；「-include-runtime」代表包含进 kotlin 运行时库来运行 hello.kt 的代码来生成 .jar 文件；「-d」代表打包成 .jar 文件的名字。由于 Kotlin 是 JVM 语言，所以最终是转换成 jar 包的。</p>
<p>然后，继续在终端输入以下命令来运行程序：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ java -jar hello.jar</div></pre></td></tr></table></figure></p>
<p>输出 <code>Hello, World!</code> 代表运行成功。</p>
<hr>
<p>如果要开发由其他 Kotlin 程序使用的库，则可以生成 .jar 文件，而不包含运行时库：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ kotlinc hello.kt -d hello.jar</div></pre></td></tr></table></figure></p>
<p>在使用该 library 时，需要依赖 Kotlin 运行时环境，所以在编译时，应将出现在类路径中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ kotlin -classpath hello.jar HelloKt</div></pre></td></tr></table></figure></p>
<p>注：HelloKt 是 Kotlin 编译器为 hello.kt 文件生成的主类名。</p>
<p>这种方式和上面的区别在于第二步给 hello.jar 指定了一个类 HelloKt，让 hello.jar 中的代码运行在 HelloKt 类里。</p>
<h2 id="交互式-Kotlin-shell"><a href="#交互式-Kotlin-shell" class="headerlink" title="交互式 Kotlin shell"></a>交互式 Kotlin shell</h2><p>Kotlin 内置有一个交互式的 Shell。交互式 shell 的意思是可以直接在 shell 里输入代码，然后回车直接立即执行。</p>
<p>在终端输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ kotlinc-jvm</div></pre></td></tr></table></figure></p>
<p>会输出以下欢迎信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Welcome to Kotlin version 1.1.2-5 (JRE 1.8.0_112-b15)</div><div class="line">Type :help for help, :quit for quit</div></pre></td></tr></table></figure></p>
<p>欢迎信息中给出了退出的方式「:quit」</p>
<h2 id="Kotlin-脚本"><a href="#Kotlin-脚本" class="headerlink" title="Kotlin 脚本"></a>Kotlin 脚本</h2><p>Kotlin 也可以直接执行脚本。「脚本」就是在一个文件中写入想要执行的代码，然后输入一个命令就可以直接执行脚本里面的代码，不需要编译。Kotlin 脚本以 .kts 拓展名结尾。</p>
<p>例如：<br>新建名为 hello.kts 的脚本，在其中输入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">println(&quot;Hello Kotlin Script!&quot;)</div></pre></td></tr></table></figure></p>
<p>然后在终端输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ kotlinc -script hello.kts</div></pre></td></tr></table></figure></p>
<p>脚本执行，然后输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Hello Kotlin Script!</div></pre></td></tr></table></figure></p>
<p>至此，Kotlin 从入门到放弃的第一篇「开始」就介绍完了，本文介绍了 Kotlin 的安装方式以及使用命令执行 Kotlin 程序的方法。建议其中内容均手动实践几遍，实践出真知。</p>
<p>本文参考及学习地址：<a href="http://kotlinlang.org/docs/tutorials/command-line.html" target="_blank" rel="external">JetBrains/kotlin: Working with the Command Line Compiler</a></p>
<p><br>ikook<br>2017.06.16</p>
]]></content>
      
        <categories>
            
            <category> 技术栈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> kotlin </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[设计模式之「概述」]]></title>
      <url>/2017/04/18/design_pattern_summarize/</url>
      <content type="html"><![CDATA[<blockquote>
<p>设计模式学习系列总结笔记之「概述」</p>
</blockquote>
<a id="more"></a>
<p>本文内容均来自「刘伟」前辈 CSDN 博客，只是将内容抽取，作为自己学习总结以及日后复习之用。</p>
<p>原文链接：<a href="http://blog.csdn.net/LoveLion/article/category/738450/13" target="_blank" rel="external">http://blog.csdn.net/LoveLion/article/category/738450/13</a></p>
<h2 id="设计模式从何而来"><a href="#设计模式从何而来" class="headerlink" title="设计模式从何而来"></a>设计模式从何而来</h2><h3 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h3><p>Christopher Alexander 在其出版的书中归纳出 253 个模式，对每一个模式（Pattern）都从 Context「前提条件」、Theme 或 Proble「目标问题」、 Solution「解决问题」三个方面进行了描述。</p>
<p>Christopher Alexander 在其另一著作中提出了模式的定义：</p>
<p><strong> 每个模式都描述了一个在我们的环境中不断出现的问题，然后描述了该问题的解决方案的核心，通过这种方式，我们可以无数次地重用那些已有的成功的解决方案，无须再重复相同的工作。 </strong></p>
<p>简单来说：</p>
<p><strong> 模式是在特定环境下人们解决某类重复出现问题的一套成功或有效的解决方案。「A pattern is a successful or efficient solution to a recurring problem within a context」 </strong></p>
<h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><p>最早将模式的思想引入软件工程方法学的是1991-1992年以“四人组(Gang of Four，简称GoF，分别是Erich Gamma, Richard Helm, Ralph Johnson和John Vlissides)”自称的四位著名软件工程学者，在1994年归纳发表了23种在软件开发中使用频率较高的设计模式，旨在用模式来统一沟通面向对象方法在分析、设计和实现间的鸿沟。</p>
<p>软件模式并非仅限于设计模式，还包括架构模式、分析模式和过程模式等</p>
<p>软件模式是在软件开发中某些可重现问题的一些有效解决方法，软件模式的基础结构主要由四部分构成，包括问题描述「待解决的问题是什么」、前提条件「在何种环境或约束条件下使用」解法「如何解决」和效果「有哪些优缺点」</p>
<p>在软件模式中，设计模式是研究最为深入的分支，设计模式用于在特定的条件下为一些重复出现的软件设计问题提供合理的、有效的解决方案。</p>
<h2 id="设计模式是什么"><a href="#设计模式是什么" class="headerlink" title="设计模式是什么"></a>设计模式是什么</h2><p>设计模式的一般定义如下：</p>
<p><strong> 设计模式「Design Pattern」是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结，设计模式是为了可重用代码、让代码更容易被他人理解并且保证代码的可靠性。 </strong></p>
<p>设计模式一般包括模式名称、问题、目的、解决方法、效果等组成要素，其中关键要素是模式名称、问题、解决方法和效果。</p>
<ul>
<li><p><strong> 模式名称「Pattren Name」</strong> 通过一两个词来描述模式的问题、解决方案和效果；</p>
</li>
<li><p><strong> 问题「Problem」</strong> 描述了应该在何时使用模式，它包含了设计中存在的问题以及问题存在的原因；</p>
</li>
<li><p><strong> 解决方案「Solution」</strong> 描述了一个设计模式的组成成分，以及这些组成成分之间的相互关系，各自的职责和协作方式，通常解决方案通过 UML 类图和核心代码来进行描述；</p>
</li>
<li><p><strong> 效果「Consequences」</strong> 描述了模式的优缺点以及在使用模式时应权衡的问题。</p>
</li>
</ul>
<p>设计模式可分为创建型「Creational」，结构型「Structural」和行为型「Behavioral」三种：</p>
<p><strong> 创建型模式主要用于描述如何创建对象；结构型模式主要用于描述如何实现类或对象的组合；行为型模式主要用于描述类或对象怎样交互以及怎样分配职责。 </strong></p>
<p>在 GoF 23 种设计模式中包含 5 中创建型设计模式、7 种结构型设计模式、11 种行为型设计模式。</p>
<p>此外，根据某个模式主要是用于处理类之间的关系还是对象之间的关系，设计模式还可以分为类模式和对象模式。我们经常将两种分类方式结合使用，如单例模式是对象创建型模式，模板方法模式是类行为型模式。</p>
<table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center">模式名称</th>
<th style="text-align:center">学习难度</th>
<th>使用频率</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">创建型模式 Creational Pattern</td>
<td style="text-align:center">单例模式 Singleton Pattern</td>
<td style="text-align:center">★☆☆☆☆</td>
<td>★★★★☆</td>
</tr>
<tr>
<td style="text-align:center">创建型模式 Creational Pattern</td>
<td style="text-align:center">简单工厂模式 Simple Factory Pattern</td>
<td style="text-align:center">★★☆☆☆</td>
<td>★★★☆☆</td>
</tr>
<tr>
<td style="text-align:center">创建型模式 Creational Pattern</td>
<td style="text-align:center">工厂方法模式 Factory Method Pattern</td>
<td style="text-align:center">★★☆☆☆</td>
<td>★★★★★</td>
</tr>
<tr>
<td style="text-align:center">创建型模式 Creational Pattern</td>
<td style="text-align:center">抽象工厂模式 Abstract Factory Pattern</td>
<td style="text-align:center">★★★★☆</td>
<td>★★★★★</td>
</tr>
<tr>
<td style="text-align:center">创建型模式 Creational Pattern</td>
<td style="text-align:center">原型模式 Prototype Pattern</td>
<td style="text-align:center">★★★☆☆</td>
<td>★★★☆☆</td>
</tr>
<tr>
<td style="text-align:center">创建型模式 Creational Pattern</td>
<td style="text-align:center">建造者模式 Builder Pattern</td>
<td style="text-align:center">★★★★☆</td>
<td>★★☆☆☆</td>
</tr>
<tr>
<td style="text-align:center">结构型模式 Structural Pattern</td>
<td style="text-align:center">适配器模式 Adapter Pattern</td>
<td style="text-align:center">★★☆☆☆</td>
<td>★★★★☆</td>
</tr>
<tr>
<td style="text-align:center">结构型模式 Structural Pattern</td>
<td style="text-align:center">桥接模式 Bridge Pattern</td>
<td style="text-align:center">★★★☆☆</td>
<td>★★★☆☆</td>
</tr>
<tr>
<td style="text-align:center">结构型模式 Structural Pattern</td>
<td style="text-align:center">组合模式 Composite Pattern</td>
<td style="text-align:center">★★★☆☆</td>
<td>★★★★☆</td>
</tr>
<tr>
<td style="text-align:center">结构型模式 Structural Pattern</td>
<td style="text-align:center">装饰模式 Decorator Pattern</td>
<td style="text-align:center">★★★☆☆</td>
<td>★★★☆☆</td>
</tr>
<tr>
<td style="text-align:center">结构型模式 Structural Pattern</td>
<td style="text-align:center">外观模式 Façade Pattern</td>
<td style="text-align:center">★☆☆☆☆</td>
<td>★★★★★</td>
</tr>
<tr>
<td style="text-align:center">结构型模式 Structural Pattern</td>
<td style="text-align:center">享元模式 Flyweight Pattern</td>
<td style="text-align:center">★★★★☆</td>
<td>★☆☆☆☆</td>
</tr>
<tr>
<td style="text-align:center">结构型模式 Structural Pattern</td>
<td style="text-align:center">代理模式 Proxy Pattern</td>
<td style="text-align:center">★★★☆☆</td>
<td>★★★★☆</td>
</tr>
<tr>
<td style="text-align:center">行为型模式 Behavioral Pattern</td>
<td style="text-align:center">职责链模式 Chain of Responsibility Pattern</td>
<td style="text-align:center">★★★☆☆</td>
<td>★★☆☆☆</td>
</tr>
<tr>
<td style="text-align:center">行为型模式 Behavioral Pattern</td>
<td style="text-align:center">命令模式 Command Pattern</td>
<td style="text-align:center">★★★☆☆</td>
<td>★★★★☆</td>
</tr>
<tr>
<td style="text-align:center">行为型模式 Behavioral Pattern</td>
<td style="text-align:center">解释器模式 Interpreter Pattern</td>
<td style="text-align:center">★★★★★</td>
<td>★☆☆☆☆</td>
</tr>
<tr>
<td style="text-align:center">行为型模式 Behavioral Pattern</td>
<td style="text-align:center">迭代器模式 Iterator Pattern</td>
<td style="text-align:center">★★★☆☆</td>
<td>★★★★★</td>
</tr>
<tr>
<td style="text-align:center">行为型模式 Behavioral Pattern</td>
<td style="text-align:center">中介者模式 Mediator Pattern</td>
<td style="text-align:center">★★★☆☆</td>
<td>★★☆☆☆</td>
</tr>
<tr>
<td style="text-align:center">行为型模式 Behavioral Pattern</td>
<td style="text-align:center">备忘录模式 Memento Pattern</td>
<td style="text-align:center">★★☆☆☆</td>
<td>★★☆☆☆</td>
</tr>
<tr>
<td style="text-align:center">行为型模式 Behavioral Pattern</td>
<td style="text-align:center">观察者模式 Observer Pattern</td>
<td style="text-align:center">★★★☆☆</td>
<td>★★★★★</td>
</tr>
<tr>
<td style="text-align:center">行为型模式 Behavioral Pattern</td>
<td style="text-align:center">状态模式 State Pattern</td>
<td style="text-align:center">★★★☆☆</td>
<td>★★★☆☆</td>
</tr>
<tr>
<td style="text-align:center">行为型模式 Behavioral Pattern</td>
<td style="text-align:center">策略模式 Strategy Pattern</td>
<td style="text-align:center">★☆☆☆☆</td>
<td>★★★★☆</td>
</tr>
<tr>
<td style="text-align:center">行为型模式 Behavioral Pattern</td>
<td style="text-align:center">模板方法模式 Template Method Pattern</td>
<td style="text-align:center">★★☆☆☆</td>
<td>★★★☆☆</td>
</tr>
<tr>
<td style="text-align:center">行为型模式 Behavioral Pattern</td>
<td style="text-align:center">访问者模式 Visitor Pattern</td>
<td style="text-align:center">★★★★☆</td>
<td>★☆☆☆☆</td>
</tr>
</tbody>
</table>
<h2 id="设计模式有什么用"><a href="#设计模式有什么用" class="headerlink" title="设计模式有什么用"></a>设计模式有什么用</h2><p>设计模式来自众多专家的经验和智慧，它们是从许多优秀的软件系统中总结出的成功的、能够实现可维护性复用的设计方案，使用这些方案将可以让我们避免做一些重复性的工作。</p>
<p>设计模式提供了一套通用的设计词汇和一种通用的形式来方便开发人员之间沟通和交流，使得设计方案更加通俗易懂。当面对同一个设计模式时，你和别人的理解并无而已（编程语不同，跨国界的团队等），因为设计模式是跨语言、跨平台、跨应用、跨国界的。</p>
<p>大部分设计模式都兼顾了系统的可重用性和可拓展性，这使得我们可以更好地重用一些已有的设计方案、功能模块甚至一个完整的软件系统，避免我们经常做一些重复的设计、编写一些重复的代码。许多设计模式将有助于提高系统的灵活性和可拓展性。</p>
<p>合理的使用设计模式并对设计模式的使用情况进行文档化，将有助于别人更快地理解系统。可以让别人能都很快的理解我们的设计思路和实现方案。</p>
<p>学习设计模式将有助于初学者更加深入地理解面向对象思想。「让你知道：如何将代码分散在几个不同的类中？为什么要有“接口”？何谓针对抽象编程？何时不应该使用继承？如何不修改源代码增加新功能？同时还让你能够更好地阅读和理解现有类库（如JDK）与其他系统中的源代码」</p>
<h2 id="刘伟前辈的个人观点"><a href="#刘伟前辈的个人观点" class="headerlink" title="刘伟前辈的个人观点"></a>刘伟前辈的个人观点</h2><p>掌握设计模式并不是一件很难的事情，关键在于多思考、多实践</p>
<p>在学习每一个设计模式时至少应该掌握如下几点：这个设计模式的意图是什么，它要解决一个什么问题，什么时候可以使用它；它是如何解决的，掌握它的结构图，记住它的关键代码；能够想到至少两个它的应用实例，一个生活中的，一个软件中的；这个模式的优缺点是什么，在使用时要注意什么。</p>
<p>懂得运用设计模式，「少说多做」</p>
<p>千万不要滥用模式。每个模式都有自己的适用场景，不能为了使用模式而使用模式，滥用模式不如不用模式。</p>
<p>「每一个模式都是一种计策」，它为解决某一类问题而诞生，不管这个设计模式的难度如何，使用频率高不高，都应该好好学学。</p>
<p>设计模式的“上乘”境界：“手中无模式，心中有模式”。模式使用的最高境界是你已经不知道具体某个设计模式的定义和结构了，但你会灵活自如地选择一种设计方案「其实就是某个设计模式」来解决某个问题。所以，对模式的学习不要急于求成。</p>
<p>最后一点来自 GoF 已故成员 John Vlissides 的著作《设计模式沉思录》：模式从不保证任何东西，它不能保证你一定能够做出可复用的软件，提高你的生产率，更不能保证世界和平。模式并不能替代人来完成软件系统的创造，它们只不过会给那些缺乏经验但却具备才能和创造力的人带来希望。</p>
<p><br>ikook<br>2017.04.18</p>
]]></content>
      
        <categories>
            
            <category> 技术栈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[学习是个啥？]]></title>
      <url>/2017/03/23/what_is_learn/</url>
      <content type="html"><![CDATA[<blockquote>
<p>聊聊「学习」和我为什么「爱上了」学习。</p>
</blockquote>
<a id="more"></a>
<h2 id="我为什么「爱上了」学习"><a href="#我为什么「爱上了」学习" class="headerlink" title="我为什么「爱上了」学习"></a>我为什么「爱上了」学习</h2><p>首先，先来聊聊我为什么「爱上」学习了。</p>
<p>我在上大学之前是非常讨厌学习的，对学任何东西都不来感。记得在高中和同学们口口声声说自己非常喜欢数学和物理。是，是挺喜欢的，可这种喜欢是建立在不得不学之上，是在数 10 门课程中，相对而言的，如果没人逼我学，我会「喜欢」？ 未必。</p>
<p>在大一上学期，也许是因为高中留下的后遗症，还和高中一样本本分分上课，课下老老实实做留下的丁点作业。唯一不同的就是把课余时间都用在了到处浪上。</p>
<p>大一上学期末，我突然头脑发热想要学点东西，然后就找了个编程语言学。现在想想当初想学东西的主要原因是：闲的。开始抱着玩玩的心态，却玩上了瘾。当我用代码在电脑屏幕上输出一些东西的时候，那种自豪感和成就感无比强烈，我喜欢这种感觉。</p>
<p>也许就是这样我找到了自己的兴趣所在，慢慢我接触到 IT 领域的东西越来越多，我能用电脑做的东西越来越多，我学的东西就多了起来。这就是兴趣，当你对某个事物产生兴趣之后，你就会不由自主的去了解它，学习它。</p>
<p>今天重点不是我为什么「爱上了」学习，重点是「学习」本身，所以就不再「扯淡」</p>
<h2 id="学习这件破事"><a href="#学习这件破事" class="headerlink" title="学习这件破事"></a>学习这件破事</h2><p>高考前，也许老师们都会说 , 要上了大学，你们就轻松了，就不用这么辛苦的学习了。然而，事实是 ，人生的任何阶段都需要学习，别想偷懒。</p>
<p>一旦你在某一时刻停止了学习，那你的人生就会就此止步，不会再有什么好的发展。想想看哪个你能够想起来的牛B的人是不学习的。</p>
<p>学习有什么方法？学习没有捷径可取，那些你以为已经过时的方法，看书、记笔记、背诵、总结… 其实可以拿来用一辈子，最原始的方法才是最管用的。</p>
<p>其实所有通往成功的方法都不会很新奇，因为没有捷径，关键是看你是否能坚持下去。</p>
<p>当你特别热爱一件事的时候，你从来不会觉得勉强，也从不会觉得苦逼。就像我特别热爱软件编程，即使敲代码到深夜也毫无困意，而自得其乐。</p>
<p>总会听到有人会说「光是在起跑线上就比别人差远了，还谈什么努力，学个毛！」其实我想说，没有谁和你在同一起跑线上的，姑且不谈家庭背景，光谈天赋、身体这些方面，大家就都不一样。要想成功，努力和机遇都不可少，机遇这种东西只能靠运气，而努力，是由你自己去控制的。当然如果机遇来了，你却没有能力去迎接机遇，那岂不可惜。唯一让你有能力去迎接机遇的道路只有一条，就是学习。所以从现在开始，学习！！！</p>
<p>努力？我该往哪方面努力？我连自己想干什么都不知道。所以，你要学习，最艰难的其实就是起步，就是一个选择。你应该想清楚自己想要干什么。哪怕一件很卑微的事，你也应该花一定的时间去学习了解它现有知识，然后通过不断学习，不断创新和发展。</p>
<p>在上面说的我为什么「爱上了」学习中你们也看到了，我为什么爱上了学习。因为我找到了自己兴趣，因为我特别的热爱。能在自己热爱的领域中成长并不断学习还有什么比这更爽的事情了吗？</p>
<p>柴静就说了「什么是幸福？进步就是幸福」，那怎么才能进步，学习才能进步。</p>
<p>就像海尔集团董事长张瑞敏退休以后，还继续保持每周看两本书的速度，一年读100本书的速度。这种不断学习的精神值得任何一个人去学习。</p>
<p>希望我们都能保持阅读和学习，直到老去。</p>
<p><br>ikook<br>2017.03.23</p>
]]></content>
      
        <categories>
            
            <category> 随笔集 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 感悟 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android 官方 Training 文档学习总结系列之「支持不同的设备」]]></title>
      <url>/2017/03/16/android_training_study2/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Android 官方 Training 文档学习总结系列</p>
</blockquote>
<a id="more"></a>
<p>官方 Training 总结系列第二篇：支持不同的设备。</p>
<h2 id="支持不同的语言"><a href="#支持不同的语言" class="headerlink" title="支持不同的语言"></a>支持不同的语言</h2><p>在任何情况下，从应用代码中提取 UI 字符串并将其存放在外部文件中都是个好办法。Android 可以通过工程中的资源目录轻松实现这一功能。</p>
<h3 id="创建语言区域目录和字符串文件"><a href="#创建语言区域目录和字符串文件" class="headerlink" title="创建语言区域目录和字符串文件"></a>创建语言区域目录和字符串文件</h3><p>如需添加对更多语言的支持，在res/中创建一个额外的values目录，并以连字符和ISO国家代码结尾命名。例如，values-es/ 目录包含的简单资源用于语言代码为“es”的语言区域。Android 根据运行时设备的语言区域设置加载相应的资源。</p>
<p>一旦确定了为哪些语言提供支持，便可创建资源子目录和字符串资源文件。例如：</p>
<p>MyProject/<br>    res/<br>    values/<br>      strings.xml<br>    values-es/<br>      strings.xml<br>    values-fr/<br>      strings.xml</p>
<p>将各个语言区域的字符串值添加到相应文件中。</p>
<p>在运行时，Android 系统会根据当前为用户设备设置的语言区域使用相应的字符串资源集。</p>
<p>例如：英文，/values/strings.xml：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"title"</span>&gt;</span>My Application<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"hello_world"</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>西班牙文，/values-es/strings.xml：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"title"</span>&gt;</span>Mi Aplicación<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"hello_world"</span>&gt;</span>Hola Mundo!<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure></p>
<blockquote>
<p>注：可以在任何资源类型上使用语言区域限定符（或任何配置限定符），例如，可以提供本地化版本的可绘制位图。</p>
</blockquote>
<h3 id="使用字符串资源"><a href="#使用字符串资源" class="headerlink" title="使用字符串资源"></a>使用字符串资源</h3><p>可以在源代码和其他 XML 文件中通过 &lt; string >元素的 name 属性来引用自己的字符串资源。</p>
<p>在源代码中，可以使用语法 R.string.&lt; string_name > 引用字符串资源。有许多方法都接受以这种方式引用的字符串资源。</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Get a string resource from your app's Resources</span></div><div class="line">String hello = getResources().getString(R.string.hello_world);</div><div class="line"></div><div class="line"><span class="comment">// Or supply a string resource to a method that requires a string</span></div><div class="line">TextView textView = <span class="keyword">new</span> TextView(<span class="keyword">this</span>);</div><div class="line">textView.setText(R.string.hello_world);</div></pre></td></tr></table></figure>
<p>在其他 XML 文件中，只要 XML 属性接受字符串值，可以使用语法 @string/<string_name> 引用字符串资源。</string_name></p>
<p>例如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">    <span class="attr">android:text</span>=<span class="string">"@string/hello_world"</span> /&gt;</div></pre></td></tr></table></figure></p>
<h2 id="适配不同的屏幕"><a href="#适配不同的屏幕" class="headerlink" title="适配不同的屏幕"></a>适配不同的屏幕</h2><p>Android 使用两种常规属性对不同的设备屏幕进行分类：尺寸和密度。我们应该在 APP 中包含一些替代资源，来适应不同的屏幕尺寸和密度，以优化 APP 的外观。</p>
<ul>
<li>4 种普遍尺寸：小(small)，普通(normal)，大(large)，超大(xlarge)</li>
<li>4 种普遍密度：低精度(ldpi), 中精度(mdpi), 高精度(hdpi), 超高精度(xhdpi)</li>
</ul>
<p>要为不同的屏幕声明不同的 layout 和 bitmap，必须将这些替代资源放在不同的目录中，类似于对不同语言字符串的做法</p>
<p>另请注意，屏幕方向（横向或纵向）被认为是屏幕尺寸的变化，因此许多应用程序应修改 layout，以优化每个方向的用户体验。</p>
<h3 id="创建不同的-layout"><a href="#创建不同的-layout" class="headerlink" title="创建不同的 layout"></a>创建不同的 layout</h3><p>要在不同的屏幕尺寸上优化用户体验，应该为要支持的每个屏幕尺寸创建一个唯一的布局 XML 文件。每个 layout 都应该保存到相应的资源目录中，并以 -&lt; screen_size &gt; 为后缀命名。例如，大尺寸屏幕(large screens)的唯一的 layout 文件应该保存在 res/layout-large/ 中。</p>
<blockquote>
<p>注意: 为了匹配合适的屏幕尺寸Android会自动地测量我们的layout文件。所以不需要因不同的屏幕尺寸去担心UI元素的大小，而应该专注于layout结构对用户体验的影响。(比如关键视图相对于同级视图的尺寸或位置)</p>
</blockquote>
<p>例如，此项目包括默认 layout 和大尺寸屏幕的替代布局：</p>
<p>MyProject/<br>    res/<br>    layout/<br>      main.xml<br>    layout-large/<br>      main.xml</p>
<p>layout 文件的名字必须完全一样，为了对相应的屏幕尺寸提供最优的 UI，文件的内容不同。</p>
<p>如平常一样在 app 中简单引用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.main);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>系统会根据 app 所运行的设备屏幕尺寸，在与之对应的 layout 目录中加载 layout。</p>
<blockquote>
<p>注意：Android 3.2及以上版本支持定义屏幕尺寸的高级方法，它允许我们根据屏幕最小长度和宽度，为各种屏幕尺寸指定与密度无关的layout资源。</p>
</blockquote>
<h3 id="创建不同的位图"><a href="#创建不同的位图" class="headerlink" title="创建不同的位图"></a>创建不同的位图</h3><p>应该为 4 种普遍密度(分辨率):低，中，高，超高精度，都提供相适配的 bitmap 资源。这能使 app 在所有屏幕分辨率中都能有良好的画质和效果。</p>
<p>要生成这些图像，应该从原始的矢量图像资源着手，然后根据下列尺寸比例，生成各种密度下的图像。</p>
<ul>
<li>xhdpi: 2.0</li>
<li>hdpi: 1.5</li>
<li>mdpi: 1.0 (基准)</li>
<li>ldpi: 0.75</li>
</ul>
<p>这意味着，如果针对 xhdpi 的设备生成了一张 200x200 的图像，那么应该为 hdpi 生成 150x150,为 mdpi 生成 100x100, 和为 ldpi 生成 75x75 的图片资源。</p>
<p>然后，将文件放在相应的 drawable 资源目录中：</p>
<p>MyProject/<br>    res/<br>     drawable-xhdpi/<br>      awesomeimage.png<br>    drawable-hdpi/<br>      awesomeimage.png<br>    drawable-mdpi/<br>      awesomeimage.png<br>    drawable-ldpi/<br>      awesomeimage.png</p>
<p>任何时候引用@ drawable / awesomeimage，系统都会根据屏幕的密度选择适当的 bitmap。</p>
<blockquote>
<p>注意：低密度(ldpi)资源是非必要的，当提供了hdpi的图像，系统会把hdpi的图像按比例缩小一半，去适配ldpi的屏幕。</p>
</blockquote>
<h2 id="支持不同的平台版本"><a href="#支持不同的平台版本" class="headerlink" title="支持不同的平台版本"></a>支持不同的平台版本</h2><p>一般情况下，在更新 app 至最新 Android 版本时，最好先保证新版的 app 可以支持 90% 的设备使用。</p>
<blockquote>
<p>注：为了能在几个 Android 版本中都能提供最好的特性和功能，应该在我们的 app 中使用 Android Support Library，它能使我们的app能在旧平台上使用最近的几个平台的APIs。</p>
</blockquote>
<h3 id="指定最小和目标API级别"><a href="#指定最小和目标API级别" class="headerlink" title="指定最小和目标API级别"></a>指定最小和目标API级别</h3><p>AndroidManifest.xml 文件中描述了 app 的细节及 app 支持哪些 Android 版本。具体来说，&lt; uses-sdk &gt; 元素中的 minSdkVersion 和 targetSdkVersion 属性，标明在设计和测试 app 时，最低兼容 API 的级别和最高适用的 API 级别(这个最高的级别是需要通过测试的)。例如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span> <span class="attr">...</span> &gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-sdk</span> <span class="attr">android:minSdkVersion</span>=<span class="string">"4"</span> <span class="attr">android:targetSdkVersion</span>=<span class="string">"15"</span> /&gt;</span></div><div class="line">    ...</div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>随着新版本 Android 的发布，一些风格和行为可能会改变，为了能使app能利用这些变化，而且能适配不同风格的用户的设备，应该将 targetSdkVersion 的值尽量的设置与最新可用的 Android 版本匹配。</p>
<h3 id="运行时检查系统版本"><a href="#运行时检查系统版本" class="headerlink" title="运行时检查系统版本"></a>运行时检查系统版本</h3><p>Android 在 Build 常量类中提供了对每一个版本的唯一代号，在 app 中使用这些代号可以建立条件，保证依赖于高级别的 API 的代码，只会在这些 API 在当前系统中可用时，才会执行。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setUpActionBar</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// Make sure we're running on Honeycomb or higher to use ActionBar APIs</span></div><div class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB) &#123;</div><div class="line">        ActionBar actionBar = getActionBar();</div><div class="line">        actionBar.setDisplayHomeAsUpEnabled(<span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注意：当解析 XML 资源时，Android 会忽略当前设备不支持的 XML 属性。所以可以安全地使用较新版本的 XML 属性，而不需要担心旧版本 Android 遇到这些代码时会崩溃。例如如果设置 targetSdkVersion=”11”，app 会在 Android 3.0 或更高时默认包含 ActionBar。然后添加 menu items到 action bar 时，需要在自己的 menu XML 资源中设置 android:showAsAction=”ifRoom”。在跨版本的 XML 文件中这么做是安全的，因为旧版本的 Android 会简单地忽略 showAsAction 属性(就是这样，你并不需要用到 res/menu-v11/ 中单独版本的文件)。</p>
</blockquote>
<h3 id="使用平台样式和主题"><a href="#使用平台样式和主题" class="headerlink" title="使用平台样式和主题"></a>使用平台样式和主题</h3><p>Android 提供了用户体验主题，为 app 提供基础操作系统的外观和体验。这些主题可以在 manifest 文件中被应用于 app 中。通过使用内置的风格和主题，app 自然地随着 Android 新版本的发布，自动适配最新的外观和体验。</p>
<p>使 activity 看起来像对话框：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:theme</span>=<span class="string">"@android:style/Theme.Dialog"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>使 activity 有一个透明背景：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:theme</span>=<span class="string">"@android:style/Theme.Translucent"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>应用在 /res/values/styles.xml 中定义的自定义主题：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:theme</span>=<span class="string">"@style/CustomTheme"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>使整个app应用一个主题(全部 activities )在元素中添加 android:theme 属性：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">application</span> <span class="attr">android:theme</span>=<span class="string">"@style/CustomTheme"</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><br>ikook<br>2017.03.16</p>
]]></content>
      
        <categories>
            
            <category> 技术栈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Android 官方 Training 文档学习总结系列之「My First App涉及知识总结」]]></title>
      <url>/2017/03/13/android_training_study1/</url>
      <content type="html"><![CDATA[<blockquote>
<p>Android 官方 Training 文档学习总结系列</p>
</blockquote>
<a id="more"></a>
<p>由于自己学习 Android 到现在，都是通过视频和书籍。感觉到现在还是什么都不会的状态，比如实现一个小功能，也许有思路，但是去实现却实现不出来。回头想想自己都学会了 Android 的哪些知识点，一头雾水，回忆不起什么来，不知道学习了什么。</p>
<p>于是决定系统学习官方 Training 文档，学习不总结是不会提高的。也许之前学的一塌糊涂，甚至导致学过之后都不知道学了什么，可能就是不总结不思考造成的。然后，就有了这个系列的总结。</p>
<p>总结系列第一篇：My First App涉及知识点总结。代码仓库: <a href="https://github.com/china-kook/Android-Official_Training_Study/tree/master/MyFirstApp" target="_blank" rel="external">Training First App</a></p>
<h2 id="View"><a href="#View" class="headerlink" title="View"></a>View</h2><p>Android 应用的图形界面使用 View 对象以及 ViewGroup对象层次结构而构建。View 对象通常为按钮或文本字段之类的 UI 小部件。而 ViewGroup 对象则为不可见的视图容器，它们定义子视图的布局。</p>
<p><img src="https://meto.chinakook.com/blog-images/ving1.png" alt="ViewGroup 对象如何在布局中形成分支并容纳其他 View 对象的图解"></p>
<h2 id="替代布局"><a href="#替代布局" class="headerlink" title="替代布局"></a>替代布局</h2><p>以 XML 格式（而不是运行时代码的方式）声明 UI 布局有若干用处，但其中最重要的用处便是，可以创建不同的布局来适应不同的屏幕尺寸。 例如，可以创建两个版本的布局，并指示系统在“小”屏幕上使用哪个版本，在“大”屏幕上使用哪个版本。</p>
<h2 id="LinearLayout"><a href="#LinearLayout" class="headerlink" title="LinearLayout"></a>LinearLayout</h2><p>LinearLayout 是一个视图组(ViewGroup的子类)，它会按照 android:orientation 属性的指定，将子视图设置为垂直或水平方向布局。LinearLayout 的每个子视图都会按照它们各自在 XML 中的出现顺序显示在屏幕上。</p>
<p>如果 LinearLayout 是布局中的根视图，则应将宽度和高度设置为 “match_parent”，从而填满可供应用使用的整个屏幕区域。 该值表示视图应扩大其宽度或高度，以匹配父视图的宽度或高度。</p>
<h2 id="布局相关属性"><a href="#布局相关属性" class="headerlink" title="布局相关属性"></a>布局相关属性</h2><ul>
<li><h4 id="android-id"><a href="#android-id" class="headerlink" title="android:id"></a>android:id</h4><p>这会为视图赋予唯一的标识符，可以使用该标识符从应用代码中引用对象，例如读取和操作对象。<br>从 XML 引用任何资源对象时，都需要使用 @ 符号。 请在该符号后依次输入资源类型、斜杠和资源名称：android:id=”@+id/edit_message(例子)。</p>
<p>只有在第一次定义资源 ID 时，才需要在资源类型之前加一个加号 (+)。 当编译应用时，SDK 工具会使用 ID 名称在项目的 R.java 文件中新建一个引用 EditText(例子) 元素的资源 ID。一旦以此方式声明资源 ID，其他对该 ID 的引用皆无需使用加号。 只有在指定新资源 ID 时才必须使用加号，对于字符串或布局等具体资源则不必如此。</p>
</li>
<li><h4 id="android-layout-width-和-android-layout-height"><a href="#android-layout-width-和-android-layout-height" class="headerlink" title="android:layout_width 和 android:layout_height"></a>android:layout_width 和 android:layout_height</h4><p>“wrap_content” 值并不规定宽度和高度的具体大小，而是指定根据需要缩放视图，使其适合视图的内容。 如果要改用 “match_parent”，则 EditText 元素将填满屏幕，因为它会匹配父 LinearLayout(例子) 的大小。</p>
</li>
<li><h4 id="android-hint"><a href="#android-hint" class="headerlink" title="android:hint"></a>android:hint</h4><p>这是文本字段为空时显示的默认字符串。@string/edit_message(例子) 并非使用硬编码字符串作为其值，而是引用另一个文件中定义的一个字符串资源。 由于它引用的是一个具体资源（而不仅仅是标识符），因此不需要加号。</p>
</li>
<li><h4 id="android-layout-weight"><a href="#android-layout-weight" class="headerlink" title="android:layout_weight"></a>android:layout_weight</h4><p>weight 值是一个数字，用于指定每个视图与其他同级视图在剩余空间中的占比。 这有点像饮料配方中各种成分的比例： “2 份苏打、1 份糖浆”是指饮料中三分之二是苏打。例如，如果将一个视图的 weight 值指定为 2，将另一个视图的 weight 值指定为 1，总和是 3，那么第一个视图将填满剩余空间的 2/3，而第二个视图则填满其余部分。 如果添加了第三个视图，将其 weight 值指定为 1，那么现在第一个视图（weight 值为 2）将获得 1/2 的剩余空间，其余两个视图则各占 1/4。</p>
<p>所有视图的默认 weight 值都为 0，所以如果仅将一个视图的 weight 值指定为大于 0，那么等到其他所有视图都获得所需空间后，该视图便会填满所有剩余空间。</p>
<p>优化: 如需使其一个部件的宽度或者高度占满剩余屏幕空间时，例如在宽度方向占满屏幕剩余空间。设置 android:layout_weight=”1” 属性后，将宽度设置为零 (0dp) 可提高布局性能，这是因为如果将宽度设置为”wrap_content”或其他值，则会要求系统计算宽度，而该计算最终毫无意义，因为 weight 值还需要计算另一个宽度，才能填满剩余空间。</p>
</li>
</ul>
<blockquote>
<p>注：对资源的引用始终都按资源类型（如 id 或 string）确定其作用域，因此使用相同的名称不会引起冲突</p>
</blockquote>
<h2 id="资源对象"><a href="#资源对象" class="headerlink" title="资源对象"></a>资源对象</h2><p>资源对象是一个唯一的整型名称，它与应用资源（如位图、布局文件或字符串）相关联。</p>
<p>每个资源在项目的 R.java 文件中都定义有相应的资源对象。可以使用 R 类中的对象名称来引用资源，例如当需要为 android:hint 属性指定字符串值时，就可以这样做。也可以使用 android:id 属性创建任意与视图相关联的资源 ID，从而可以从其他代码中引用该视图。</p>
<p>SDK 工具会在您每次编译应用时生成 R.java 文件。切勿手动修改该文件。</p>
<h2 id="字符串资源"><a href="#字符串资源" class="headerlink" title="字符串资源"></a>字符串资源</h2><p>对于用户界面中的文本，务必将每个字符串都指定为资源。 字符串资源允许在单一位置管理所有 UI 文本，从而简化文本的查找和更新。 此外，将字符串外部化还可为每个字符串资源提供替代定义，从而将应用本地化为不同的语言。</p>
<h2 id="响应按钮"><a href="#响应按钮" class="headerlink" title="响应按钮"></a>响应按钮</h2><p>可在布局文件的 Button 元素中添加 android:onClick 属性，如 android:onClick=”sendMessage”。每次用户点击按钮时，此属性均会提示系统调用 Activity 中的 sendMessage() 方法。</p>
<p>还需在布局文件对应的 Activity 类中添加与 onClick 属性对应的方法。如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**Called when the user clicks the Send button */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">    <span class="comment">// Do something in response to button</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>要让系统将此方法与为 android:onClick 指定的方法名称匹配，签名必须与所示内容完全相同。具体而言，该方法必须：</p>
<ul>
<li>是公共方法</li>
<li>具有空返回值</li>
<li>以 View 作为唯一参数（这将是之前点击的 View）</li>
</ul>
<h2 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h2><p>Intent 是指在相互独立的组件（如两个 Activity）之间提供运行时绑定功能的对象。Intent 表示一个应用“执行某项操作的 Intent”。 可以将 Intent 用于各种任务。例如：Intent 用于启动另一个 Activity。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** Called when the user clicks the Send button */</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">    Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, DisplayMessageActivity.class);</div><div class="line">    EditText editText = (EditText) findViewById(R.id.edit_message);</div><div class="line">    String message = editText.getText().toString();</div><div class="line">    intent.putExtra(EXTRA_MESSAGE, message);</div><div class="line">    startActivity(intent);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Intent 构造函数采用两个参数：</p>
<ul>
<li>Context 是第一个参数（之所以使用 this ，是因为 Activity 类是 Context 的子类）</li>
<li>应用组件的 Class，系统应将 Intent（在本例中，为应启动的 Activity）传递至该类。</li>
</ul>
<p>putExtra() 方法将 EditText 的值添加到 Intent。Intent 能够以名为 extra 的键值对形式携带数据类型。键是一个公共常量 EXTRA_MESSAGE，因为下一个 Activity 将使用该键来检索文本值。为 Intent extra 定义键时最好使用应用的软件包名称作为前缀。这可以确保在应用与其他应用交互过程中这些键始终保持唯一。</p>
<p>startActivity() 方法将启动 Intent 指定的 DisplayMessageActivity 实例。</p>
<p>编写 DisplayMessageActivity.java 类，用于显示第一个 Activity 传递的消息。代码如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">   <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">   setContentView(R.layout.activity_display_message);</div><div class="line"></div><div class="line">   Intent intent = getIntent();</div><div class="line">   String message = intent.getStringExtra(MainActivity.EXTRA_MESSAGE);</div><div class="line">   TextView textView = <span class="keyword">new</span> TextView(<span class="keyword">this</span>);</div><div class="line">   textView.setTextSize(<span class="number">40</span>);</div><div class="line">   textView.setText(message);</div><div class="line"></div><div class="line">   ViewGroup layout = (ViewGroup) findViewById(R.id.activity_display_message);</div><div class="line">   layout.addView(textView);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>此处会执行大量操作，因此我们接着解释：</p>
<ul>
<li>调用 getIntent() 采集启动 Activity 的 intent。无论用户如何导航到目的地，每个 Activity 都由一个 Intent 调用。 调用 getStringExtra() 将检索第一个 Activity 中的数据。</li>
<li>可以使用编程方式创建 TextView 并设置其大小和消息。</li>
<li>可将 TextView 添加到 R.id.activity_display_message 标识的布局。可将布局投射到 ViewGroup，因为它是所有布局的超类且包含 addView() 方法。</li>
</ul>
<h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><p>布局定义用户界面的视觉结构，如Activity或应用小部件的 UI。可以通过两种方式声明布局：</p>
<ul>
<li>在 XML 中声明 UI 元素。Android 提供了对应于 View 类及其子类的简明 XML 词汇，如用于小部件和布局的词汇；</li>
<li>运行时实例化布局元素。应用可以通过编程创建 View 对象和 ViewGroup 对象（并操纵其属性）。</li>
</ul>
<p>Android 框架可以灵活地使用以下一种或两种方法来声明和管理应用的 UI。例如，可以在 XML 中声明应用的默认布局，包括将出现在布局中的屏幕元素及其属性。然后，可以在应用中添加可在运行时修改屏幕对象（包括那些已在 XML 中声明的对象）状态的代码。</p>
<p>在 XML 中声明 UI 的优点在于，可以更好地将应用的外观与控制应用行为的代码隔离。UI 描述位于应用代码外部，这意味着在修改或调整描述时无需修改源代码并重新编译。例如，可以创建适用于不同屏幕方向、不同设备屏幕尺寸和不同语言的 XML 布局。此外，在 XML 中声明布局还能更轻松地显示 UI 的结构，从而简化问题调试过程。</p>
<p>一般而言，用于声明 UI 元素的 XML 词汇严格遵循类和方法的结构和命名方式，其中元素名称对应于类名称，属性名称对应于方法。实际上，这种对应关系往往非常直接，可以猜到对应于类方法的 XML 属性，或对应于给定 XML 元素的类。但请注意，并非所有词汇都完全相同。在某些情况下，在命名上略有差异。例如，EditText 元素具有的 text 属性对应的类方法是 EditText.setText()。</p>
<h3 id="编写-XML"><a href="#编写-XML" class="headerlink" title="编写 XML"></a>编写 XML</h3><p>可以利用 Android 的 XML 词汇，按照在 HTML 中创建包含一系列嵌套元素的网页的相同方式快速设计 UI 布局及其包含的屏幕元素。</p>
<p>每个布局文件都必须只包含一个根元素，并且该元素必须是视图对象或 ViewGroup 对象。定义根元素之后，即可再以子元素的形式添加其他布局对象或小部件，从而逐步构建定义布局的视图层次结构。例如，以下这个 XML 布局使用垂直 LinearLayout 来储存一个 TextView 和一个 Button：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">              <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></div><div class="line">              <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></div><div class="line">              <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> &gt;</div><div class="line">    <span class="tag">&lt;<span class="name">TextView</span> <span class="attr">android:id</span>=<span class="string">"@+id/text"</span></span></div><div class="line">              <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">              <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">              <span class="attr">android:text</span>=<span class="string">"Hello, I am a TextView"</span> /&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">Button</span> <span class="attr">android:id</span>=<span class="string">"@+id/button"</span></span></div><div class="line">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">            <span class="attr">android:text</span>=<span class="string">"Hello, I am a Button"</span> /&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在 XML 中声明布局后，请在 Android 项目 res/layout/ 目录中以 .xml 扩展名保存文件，以便其能够正确编译。</p>
<h3 id="加载-XML-资源"><a href="#加载-XML-资源" class="headerlink" title="加载 XML 资源"></a>加载 XML 资源</h3><p>当编译应用时，每个 XML 布局文件都会编译到一个 View 资源中。 应该在 Activity.onCreate() 回调实现中从应用代码加载布局资源。通过调用 setContentView()，以 R.layout.layout_file_name 形式向其传递对布局资源的引用来执行此操作。例如，如果 XML 布局保存为 main_layout.xml，则需要像下面这样为 Activity 加载该布局：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.main_layout);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>启动 Activity 时，Android 框架会调用 Activity 中的 onCreate() 回调方法</p>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>每个视图对象和 ViewGroup 对象都支持各自的各类 XML 属性。某些属性是视图对象的专用属性（例如，TextView 支持 textSize 属性），但这些属性也会被任何可以扩展此类的视图对象继承。某些属性通用于所有 View 对象，因为它们继承自根 View 类（如 id 属性）。此外，其他属性被视为“布局参数”，即描述 View 对象特定布局方向的属性，如该对象的父 ViewGroup 对象所定义的属性。</p>
<ul>
<li><h4 id="ID"><a href="#ID" class="headerlink" title="ID"></a>ID</h4><p>任何视图对象都可能具有关联的整型 ID，此 ID 用于在结构树中对 View 对象进行唯一标识。编译应用后，此 ID 将作为整型数引用，但在布局 XML 文件中，通常会在 id 属性中为该 ID 赋予字符串值。这是所有 View 对象共用的 XML 属性（由 View 类定义），经常会用到它。XML 标记内部的 ID 语法是：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:id="@+id/my_button"</div></pre></td></tr></table></figure>
<p>字符串开头处的 @ 符号指示 XML 解析程序应该解析并展开 ID 字符串的其余部分，并将其标识为 ID 资源。加号 (+) 表示这是一个新的资源名称，必须创建该名称并将其添加到我们的资源（在 R.java 文件中）内。Android 框架还提供了许多其他 ID 资源。 引用 Android 资源 ID 时，不需要加号，但必须添加 android 软件包命名空间，如下所示：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">android:id="@android:id/empty"</div></pre></td></tr></table></figure>
<p>添加 android 软件包命名空间之后，现在，将从 android.R 资源类而非本地资源类引用 ID。</p>
<p>要想创建视图并从应用中引用它们，常见的模式是：</p>
<ul>
<li><p>在布局文件中定义一个视图/小部件，并为其分配一个唯一的 ID：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">android:id</span>=<span class="string">"@+id/my_button"</span></span></div><div class="line">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></div><div class="line">        <span class="attr">android:text</span>=<span class="string">"@string/my_button_text"</span>/&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>然后创建一个 view 对象实例，并从布局中捕获它（通常使用 onCreate() 方法）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Button myButton = (Button)findViewById(R.id.my_button);</div></pre></td></tr></table></figure>
</li>
</ul>
<p>创建 RelativeLayout 时，为 view 对象定义 ID 非常重要。在相对布局中，同级视图可以定义其相对于其他同级视图的布局，同级视图通过唯一的 ID 进行引用。</p>
<p>ID 不需要在整个结构树中具有唯一性，但在要搜索的结构树部分应具有唯一性（要搜索的部分往往是整个结构树，因此最好尽可能具有全局唯一性）。</p>
</li>
<li><h4 id="布局参数"><a href="#布局参数" class="headerlink" title="布局参数"></a>布局参数</h4><p>名为 layout_something 的 XML 布局属性可为视图定义与其所在的 ViewGroup 相适的布局参数。</p>
<p>每个 ViewGroup 类都会实现一个扩展 ViewGroup.LayoutParams 的嵌套类。此子类包含的属性类型会根据需要为视图组的每个子视图定义尺寸和位置。 正如在下图中所见，父视图组为每个子视图（包括子视图组）定义布局参数。</p>
<p><img src="https://meto.chinakook.com/blog-images/ving2.png" alt="以可视化方式表示的视图层次结构，其中包含与每个视图关联的布局参数"></p>
<p>请注意，每个 LayoutParams 子类都有自己的值设置语法。 每个子元素都必须定义适合其父元素的 LayoutParams，但父元素也可为其子元素定义不同的 LayoutParams。</p>
<p>所有视图组都包括宽度和高度（layout_width 和 layout_height），并且每个视图都必须定义它们。许多 LayoutParams 还包括可选的外边距和边框。</p>
<p>可以指定具有确切尺寸的宽度和高度，但多半不想经常这样做。 在更多的情况下，会使用以下常量之一来设置宽度或高度：</p>
<ul>
<li>wrap_content 指示您的视图将其大小调整为内容所需的尺寸。</li>
<li>match_parent 指示您的视图尽可能采用其父视图组所允许的最大尺寸。<br></li>
</ul>
<p>一般而言，建议不要使用绝对单位（如像素）来指定布局宽度和高度， 而是使用相对测量单位，如密度无关像素单位 (dp)、wrap_content 或 match_parent，这种方法更好，因为它有助于确保应用在各类尺寸的设备屏幕上正确显示。</p>
</li>
</ul>
<h3 id="布局位置"><a href="#布局位置" class="headerlink" title="布局位置"></a>布局位置</h3><p>视图的几何形状就是矩形的几何形状。视图具有一个位置（以一对水平向左和垂直向上坐标表示）和两个尺寸（以宽度和高度表示）。 位置和尺寸的单位是像素。</p>
<p> 可以通过调用方法 getLeft() 和方法 getTop() 来检索视图的位置。前者会返回表示视图的矩形的水平向左（或称 X 轴） 坐标。后者会返回表示视图的矩形的垂直向上（或称 Y 轴）坐标。 这些方法都会返回视图相对于其父项的位置。 例如，如果 getLeft() 返回 20，则意味着视图位于其直接父项左边缘向右 20 个像素处。</p>
<p> 此外，系统还提供了几种便捷方法来避免不必要的计算，即 getRight() 和 getBottom()。 这些方法会返回表示视图的矩形的右边缘和下边缘的坐标。 例如，调用 getRight() 类似于进行以下计算：getLeft() + getWidth()。</p>
<h3 id="尺寸、内边距和外边距"><a href="#尺寸、内边距和外边距" class="headerlink" title="尺寸、内边距和外边距"></a>尺寸、内边距和外边距</h3><p>视图的尺寸通过宽度和高度表示。视图实际上具有两对宽度和高度值。</p>
<p> 第一对称为测量宽度和测量高度。 这些尺寸定义视图想要在其父项内具有的大小。 这些测量尺寸可以通过调用 getMeasuredWidth() 和 getMeasuredHeight() 来获得。</p>
<p> 第二对简称为宽度和高度，有时称为绘制宽度和绘制高度。 这些尺寸定义视图在绘制时和布局后在屏幕上的实际尺寸。 这些值可以（但不必）与测量宽度和测量高度不同。 宽度和高度可以通过调用 getWidth() 和 getHeight() 来获得。</p>
<p> 要想测量其尺寸，视图需要将其内边距考虑在内。内边距以视图左侧、顶部、右侧和底部各部分的像素数表示。 内边距可用于以特定数量的像素弥补视图的内容。 例如，左侧内边距为 2，会将视图的内容从左边缘向右推 2 个像素。 可以使用 setPadding(int, int, int, int) 方法设置内边距，并通过调用 getPaddingLeft()、getPaddingTop()、getPaddingRight() 和 getPaddingBottom() 进行查询。</p>
<p> 尽管视图可以定义内边距，但它并不支持外边距。 不过，视图组可以提供此类支持。</p>
<h3 id="常见布局"><a href="#常见布局" class="headerlink" title="常见布局"></a>常见布局</h3><p>ViewGroup 类的每个子类都提供了一种独特的方式来显示在其中嵌套的视图。以下是 Android 平台中内置的一些较为常见的布局类型。</p>
<blockquote>
<p>注：尽管可以通过将一个或多个布局嵌套在另一个布局内来实现您的 UI 设计，但应该使您的布局层次结构尽可能简略。布局的嵌套布局越少，绘制速度越快（扁平的视图层次结构优于深层的视图层次结构）。</p>
</blockquote>
<p> <strong>线性布局：</strong> 一种使用单个水平行或垂直行来组织子项的布局。它会在窗口长度超出屏幕长度时创建一个滚动条。</p>
<p>   <img src="https://meto.chinakook.com/blog-images/ving3.png" alt=""></p>
<p> <strong>相对布局：</strong> 能够指定子对象彼此之间的相对位置（子对象 A 在子对象 B 左侧）或子对象与父对象的相对位置（与父对象顶部对齐）。</p>
<p>  <img src="https://meto.chinakook.com/blog-images/ving4.png" alt=""></p>
<p> <strong>网页视图：</strong> 显示网页。</p>
<p>  <img src="https://meto.chinakook.com/blog-images/ving5.png" alt=""></p>
<h3 id="使用适配器构建布局"><a href="#使用适配器构建布局" class="headerlink" title="使用适配器构建布局"></a>使用适配器构建布局</h3><p>如果布局的内容是属于动态或未预先确定的内容，您可以使用这样一种布局：在运行时通过子类 AdapterView 用视图填充布局。 AdapterView 类的子类使用 Adapter 将数据与其布局绑定。Adapter 充当数据源与 AdapterView 布局之间的中间人—Adapter（从数组或数据库查询等来源）检索数据，并将每个条目转换为可以添加到 AdapterView 布局中的视图。</p>
<p> 适配器支持的常见布局包括：</p>
<p> <strong>列表视图：</strong> 显示滚动的单列列表。</p>
<p> <img src="https://meto.chinakook.com/blog-images/ving6.png" alt=""></p>
<p> <strong>网格视图：</strong> 显示滚动的行列网格。</p>
<p> <img src="https://meto.chinakook.com/blog-images/ving7.png" alt=""></p>
<ul>
<li><h4 id="使用数据填充适配器视图"><a href="#使用数据填充适配器视图" class="headerlink" title="使用数据填充适配器视图"></a>使用数据填充适配器视图</h4><p>可以通过将 AdapterView 实例与 Adapter 绑定来填充 AdapterView（如 ListView 或 GridView），此操作会从外部来源检索数据，并创建表示每个数据条目的 View。</p>
<p>Android 提供了几个 Adapter 子类，用于检索不同种类的数据和构建 AdapterView 的视图。 两种最常见的适配器是：</p>
<ul>
<li><h5 id="ArrayAdpater"><a href="#ArrayAdpater" class="headerlink" title="ArrayAdpater:"></a>ArrayAdpater:</h5><p>请在数据源为数组时使用此适配器。默认情况下，ArrayAdapter 会通过在每个项目上调用 toString() 并将内容放入 TextView 来为每个数组项创建视图。</p>
<p>例如，如果具有想要在 ListView 中显示的字符串数组，请使用构造函数初始化一个新的 ArrayAdapter，为每个字符串和字符串数组指定布局：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ArrayAdapter&lt;String&gt; adapter = <span class="keyword">new</span> ArrayAdapter&lt;String&gt;(<span class="keyword">this</span>,</div><div class="line">android.R.layout.simple_list_item_1, myStringArray);</div></pre></td></tr></table></figure>
<p>此构造函数的参数是：</p>
<ul>
<li>应用 Context</li>
<li>包含数组中每个字符串的 TextView 的布局</li>
<li>字符串数组</li>
</ul>
<p>然后，只需在 ListView 上调用 setAdapter()：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ListView listView = (ListView) findViewById(R.id.listview);</div><div class="line">listView.setAdapter(adapter);</div></pre></td></tr></table></figure>
<p>要想自定义每个项的外观，您可以重写数组中各个对象的 toString() 方法。或者，要想为 TextView 之外的每个项创建视图（例如，如果想为每个数组项创建一个 ImageView），请扩展 ArrayAdapter 类并重写 getView() 以返回想要为每个项获取的视图类型。</p>
</li>
<li><h5 id="SimpleCursorAdapter"><a href="#SimpleCursorAdapter" class="headerlink" title="SimpleCursorAdapter:"></a>SimpleCursorAdapter:</h5><p>请在数据来自 Cursor 时使用此适配器。使用 SimpleCursorAdapter 时，必须指定要为 Cursor 中的每个行使用的布局，以及应该在哪些布局视图中插入 Cursor 中的哪些列。 例如，如果想创建人员姓名和电话号码列表，则可以执行一个返回 Cursor（包含对应每个人的行，以及对应姓名和号码的列）的查询。 然后，可以创建一个字符串数组，指定想要在每个结果的布局中包含 Cursor 中的哪些列，并创建一个整型数组，指定应该将每个列放入的对应视图：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">String[] fromColumns = &#123;ContactsContract.Data.DISPLAY_NAME,</div><div class="line">                  ContactsContract.CommonDataKinds.Phone.NUMBER&#125;;</div><div class="line"><span class="keyword">int</span>[] toViews = &#123;R.id.display_name, R.id.phone_number&#125;;</div></pre></td></tr></table></figure>
<p>当实例化 SimpleCursorAdapter 时，请传递要用于每个结果的布局、包含结果的 Cursor 以及以下两个数组：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SimpleCursorAdapter adapter = <span class="keyword">new</span> SimpleCursorAdapter(<span class="keyword">this</span>,</div><div class="line">         R.layout.person_name_and_number, cursor, fromColumns, toViews, <span class="number">0</span>);</div><div class="line">ListView listView = getListView();</div><div class="line">listView.setAdapter(adapter);</div></pre></td></tr></table></figure>
<p>然后，SimpleCursorAdapter 会使用提供的布局，将每个 fromColumns 项插入对应的 toViews 视图，为 Cursor 中的每个行创建一个视图。</p>
</li>
</ul>
<p>如果在应用的生命周期中更改了适配器读取的底层数据，则应调用 notifyDataSetChanged()。此操作会通知附加的视图，数据发生了变化，它应该自行刷新。</p>
</li>
<li><h4 id="处理点击事件"><a href="#处理点击事件" class="headerlink" title="处理点击事件"></a>处理点击事件</h4><p>可以通过实现 AdapterView.OnItemClickListener 界面来响应 AdapterView 中每一项上的点击事件。 例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建一个匿名类作为消息处理对象。</span></div><div class="line"><span class="keyword">private</span> OnItemClickListener mMessageClickedHandler = <span class="keyword">new</span> OnItemClickListener() &#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(AdapterView parent, View v, <span class="keyword">int</span> position, <span class="keyword">long</span> id)</span> </span>&#123;</div><div class="line">        <span class="comment">// Do something in response to the click</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">listView.setOnItemClickListener(mMessageClickedHandler);</div></pre></td></tr></table></figure>
</li>
</ul>
<p><br>ikook<br>2017.03.13</p>
]]></content>
      
        <categories>
            
            <category> 技术栈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[java 实现排序算法之「冒泡排序」]]></title>
      <url>/2017/03/09/java_sort_algorithm_series1/</url>
      <content type="html"><![CDATA[<blockquote>
<p>java 实现排序算法系列</p>
</blockquote>
<a id="more"></a>
<p>从今天开始我准备写一系列有关于排序算法的文章，当然不止排序算法，以后还会写其他的算法。自己算法方面薄弱，大一上数据结构课的时候也没有好好听课，更别说学了。所以从这篇文章开始，我会巩固一下算法，并写一系列的算法文章，写文章的好处在于把所学知识梳理成章，并且希望可以帮助其他同学。</p>
<p>由于自己水平有限，开学后各种事情也比较多，文章可能会有纰漏，望各位批评指正。</p>
<p>同时，在各类的排序算法中，我们应把注意力放在算法本身，为简单起见，示例代码均使用 int 数据类型，且均为升序排列。</p>
<h2 id="算法简述"><a href="#算法简述" class="headerlink" title="算法简述"></a>算法简述</h2><p>算法，何为算法？</p>
<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>算法(Algorithm)是为了解决某类问题而规定的一个有限长的操作序列。</p>
<h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h3><ul>
<li>输入：一个算法必须有零个或以上的输入量。</li>
<li>输出：一个算法应有一个或以上的输出量，输出量是算法计算的结果。</li>
<li>有限性：一个算法必须总是在执行有限步后结束，且每一步都必须在有限时间内完成。</li>
<li>确定性： 算法的描述必须无歧义，以保证算法的实际执行结果是精确地匹配要求或期望，通常要求实际运行结果是确定的。</li>
<li>可行性：即算法能够实现，算法中描述的操作都可以通过已经实现的基本运算执行有限次来实现。</li>
</ul>
<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>冒泡排序(Bubble sort)是一种最简单的交换排序算法。大概是所有程序员都会用的算法吧。</p>
<h3 id="算法思路"><a href="#算法思路" class="headerlink" title="算法思路"></a>算法思路</h3><p>假如有 n 个元素要进行排序。</p>
<h4 id="n-1"><a href="#n-1" class="headerlink" title="n = 1:"></a>n = 1:</h4><p>无需排序。</p>
<h4 id="n-gt-1"><a href="#n-gt-1" class="headerlink" title="n &gt; 1:"></a>n &gt; 1:</h4><ul>
<li><h5 id="第一轮排序"><a href="#第一轮排序" class="headerlink" title="第一轮排序"></a>第一轮排序</h5><p>比较相邻两个元素，如果第一个比第二个大，则交换两个元素的值。<br><br>进行下两个元素的比较，即比较第二个和第三个元素，如前者大于后者，则交换。<br><br>再进行下两个元素的比较。直到第 n-1 个元素和第 n 元素进行比较，如前者大于后者，则交换。<br><br>可以肯定，最后一个元素 n，肯定是 n 个元素中最大的元素。</p>
</li>
<li><h5 id="第二轮排序"><a href="#第二轮排序" class="headerlink" title="第二轮排序"></a>第二轮排序</h5><p>重复执行第一轮执行的动作，直到第 n-2 个元素和第 n-1 个元素进行比较。如前者大于后者，则交换。<br><br>由于第一轮排序已经将最大元素放置到第 n 个位置，所以本次排序无考虑第 n 个元素。即第 n 个元素不参加本次排序。<br><br>…..<br><br>示例图片:</p>
<p><img src="https://meto.chinakook.com/blog-images/shi1.png" alt=""></p>
</li>
<li><h5 id="重复执行"><a href="#重复执行" class="headerlink" title="重复执行"></a>重复执行</h5><p>直到只剩一个元素，那么这个元素一定是最小元素，排序结束。显然，进行了 n-1 次排序。</p>
</li>
</ul>
<p>上述过程，每次排序(即每轮排序)都会有一个元素从某个位置慢慢“浮动”到最终所属的位置,就像气泡总会浮动到水的最顶端。在冒泡排序中，每一轮排序都会有一个元素(气泡)替换到本次排序的最后一个位置(水的最顶端)，注意，是本次排序的最后一个位置(第一轮，则为 n；第二轮，则为 n-1；第三轮，则为 n-2 ~~~ )。</p>
<p>因为，排序的过程像是冒泡一样，则称为“冒泡排序”。如下为冒泡排序示意图(来自维基百科)</p>
<p><img src="https://meto.chinakook.com/blog-images/shi2.gif" alt=""></p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>设要给数组 arr[] 排序，它有 n 个元素。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public static void bubbleSort(int[] arr) &#123;</div><div class="line">    int temp = 0;</div><div class="line">    for (int i = arr.length - 1; i &gt; 0; --i) &#123; // 每次需要排序的长度</div><div class="line">        for (int j = 0; j &lt; i; ++j) &#123; // 从第一个元素到第i个元素</div><div class="line">            if (arr[j] &gt; arr[j + 1]) &#123;</div><div class="line">                temp = arr[j];</div><div class="line">                arr[j] = arr[j + 1];</div><div class="line">                arr[j + 1] = temp;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="算法优化"><a href="#算法优化" class="headerlink" title="算法优化"></a>算法优化</h3><p>假如有一组数据为：1,2,3,4,5,6,7,8,9,0。 如果用上面的方法实现排序会有什么情况，当然，实现排序肯定没有问题。但是，这组数据的前面一大部分已经是有序的了，如果还是用上面的代码会使效率降低很多(数据比较大的情况下)。所以，将代码进行优化。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public static void bubbleSort(int[] arr) &#123;</div><div class="line">    int temp = 0;</div><div class="line">    boolean swap;</div><div class="line">    for (int i = arr.length - 1; i &gt; 0; --i) &#123; // 每次需要排序的长度</div><div class="line">        swap=false;</div><div class="line">        for (int j = 0; j &lt; i; ++j) &#123; // 从第一个元素到第i个元素</div><div class="line">            if (arr[j] &gt; arr[j + 1]) &#123;</div><div class="line">                temp = arr[j];</div><div class="line">                arr[j] = arr[j + 1];</div><div class="line">                arr[j + 1] = temp;</div><div class="line">                swap=true;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        if (swap==false)&#123;</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在实际使用过程中，由于在大量数据的情况下几乎不使用冒泡排序，而使用小数据的时候增加的布尔变量反而会造成额外的开销。通常，冒泡排序就使用前一种就行了。</p>
<h3 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h3><ul>
<li><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4>当最好的情况，也就是要排序的表本身就是有序的，那么我们比较次数，根据最后改进的代码，可以推断出就是n-1次的比较，没有数据交换，时间复杂度为O(n)。当最坏的情况，即待排序表是逆序的况，此时需要比较<img src="https://meto.chinakook.com/blog-images/shi3.jpg" alt=""> 次，并作等数量级的记录移动。因此，总的时间复杂度为O(n^2)。</li>
<li><h4 id="空间复杂度"><a href="#空间复杂度" class="headerlink" title="空间复杂度"></a>空间复杂度</h4>由以上算法步骤分析，可轻易得知冒泡排序的空间复杂度为 O(n), 需要辅助空间 O(1)</li>
</ul>
<h3 id="算法稳定性"><a href="#算法稳定性" class="headerlink" title="算法稳定性"></a>算法稳定性</h3><p>容易看出，在相邻元素相等时，我们并不需要交换它们的位置，所以，冒泡排序是稳定排序。</p>
<h3 id="算法适用场景"><a href="#算法适用场景" class="headerlink" title="算法适用场景"></a>算法适用场景</h3><p>在算法优化中提到过，实际使用过程中，在大量数据的情况下几乎不适用冒泡排序。冒泡排序思路简单，代码简单，特别适合小数据的排序。但是，由于算法复杂度较高，在数据量大的时候不适合使用。</p>
<p><br>ikook<br>2017.03.09</p>
]]></content>
      
        <categories>
            
            <category> 论算法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> 计算机技术 </tag>
            
            <tag> 排序算法 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[关于怎样自学 java 和 Android 的回答]]></title>
      <url>/2017/03/08/introduction_learn_method/</url>
      <content type="html"><![CDATA[<p>前几天在小密圈里发表了自己的博客地址。评论中无意帮助一位同学解答了他疑惑。然后发现同学们还是有不少初学者的。 <a id="more"></a> 所以把问题和回答贴着这里，希望可以帮助更多的同学少走些弯路，回答中主要针对自学者。</p>
<p>需要说明第一点的是，以下回答仅仅是个人学习的经历和总结，不一定适合所有人。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>对于还是小白的我，也想自学安卓和java，请学长赐教对于初学者还从哪下手？看那些书？或者去哪个网站？谢谢！</p>
<h2 id="回答"><a href="#回答" class="headerlink" title="回答"></a>回答</h2><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><p>找一套入门的 java 视频和书籍，了解和掌握 java SE的知识后就可以开始学习 Android 了。java 入门书籍推荐《head first java》，看完这本之后推荐 《java 核心技术》(分为上下卷)，再之后强烈推荐 《java 编程思想》。</p>
<p>入门 java 建议时间在3个月左右，不要着急，多敲代码，我就是吃了入门 java 的时候太着急的亏，我当时就是很随意的看了一套入门的视频就去学 Android 了，导致 java 基础太差，现在又在补基础，所以一定要把 java 基础学好，以看书看文档为主，以视频为辅。</p>
<h4 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h4><p>学 Android ，我当时是直接找了本书看，我看到是郭霖的《第一行代码》，现在有《第二行代码》(第一行代码-第二版)了。在看书过程中不明白不理解的地方找视频看，视频方面我主要看慕课网和极客学院的。</p>
<p>看完《第一行代码》基本可以对 Android 有个大体的了解吧，可能还不能算真正入门。我看完第一行代码之后是做了个小的工具类 app ，也不是我一个人完成的，因为是参加比赛做的。之后我又看了《Android 编程权威指南》，现在也有第二版了。我一开始看的第一版，课本代码是用 eclipse 写的，我看的时候是使用 Android Studio 码的，没多大差别，有个别地方需要变通一下，不过强烈建议使用 AS。3月3号，就前几天，Google 发布了AS 2.3.0 正式版。知道有第二版之后又买了本第二版看了一遍，代码敲了一遍。然后差不多就看到现在的我了。</p>
<p>我学的时候也不是只是一味的学某一门技术，在学习 java 和 Android 期间我也了解和学习过其他东西，比如 git、GitHub、单元测试一类的。也参加过几个比赛。虽然比赛都没取得什么好的成绩，但也还是有好处的。</p>
<p>当然，这也导致我现在对 Android 还只是有个大体的了解，我写东西还是无从下手，还是处在入门阶段，同时现在我还仍在继续努力学习。不过现在我已经不再看视频了，而是看书、文档、博客等，文档也会看官方的。官网现在有中文的，不过只是部分，所以还是要看英文版。我自己在看的时候就是边看边用翻译软件翻译，慢慢来，我相信会改变的。</p>
<h2 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源"></a>学习资源</h2><p>关于学习资源可以见我 GitHub 的一个仓库，里面收集了我知道的所有资料，当然里面也有我还没有学习的。<br>地址：<a href="https://github.com/china-kook/Skill-learn-collect" target="_blank" rel="external">Skill-learn-collect</a></p>
<p>说到自学 Android，不得不提 stormzhang 的那篇<a href="http://stormzhang.com/android/2016/01/21/learn-android-byself/" target="_blank" rel="external">《如何自学Android 编程》</a>以及<a href="http://stormzhang.com/android/2014/07/07/learn-android-from-rookie/" target="_blank" rel="external">《Android 学习之路》</a>。</p>
<p><br>ikook<br>2017.03.08</p>
]]></content>
      
        <categories>
            
            <category> 随笔集 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> Android </tag>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[「RESTful 架构」总结]]></title>
      <url>/2017/03/05/RESTful_summary/</url>
      <content type="html"><![CDATA[<blockquote>
<p>目前最流行的一种互联网软件架构。结构清晰、符合标准、易于理解、扩展方便。</p>
</blockquote>
<a id="more"></a>
<h3 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h3><p>REST，是<a href="https://en.wikipedia.org/wiki/Roy_Fielding" target="_blank" rel="external">Roy Thomas Fielding</a>在他博士论文中提出的。</p>
<h3 id="名称"><a href="#名称" class="headerlink" title="名称"></a>名称</h3><p>REST，即Representational State Transfer的缩写。可翻译为”表现层状态转化”。</p>
<h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><p>名称”表现层状态转化”中，省略了主语。”表现层”是指”资源”的”表现层”。</p>
<p>所谓的”资源”，就是网络上的一个实体，或者说网络上的一个具体信息。可以是一段文本、一张图片、一首歌曲、一种服务等。总之是一个具体的存在。可以用一个URI(统一资源定位符)指向它，每种资源对应一个特定的URI。要获取这个资源，访问它的URI就可以。</p>
<p>“上网”，就是与互联网上一系列的”资源互动”，调用它的URI。</p>
<h3 id="表现层"><a href="#表现层" class="headerlink" title="表现层"></a>表现层</h3><p>“资源”是一种信息实体，可以有多种外在的表现形式。把”资源”具体呈现出来的形式，叫做它的”表现层”。</p>
<p>URI只代表资源的实体，不代表它的形式。严格地说，有些网址最后的”.html”后缀名是不必要的，因为这个后缀名表示格式，属于”表现层”范畴”，而URI应该只代表”资源”的位置。它的具体表现形式，应该在HTTP请求的头信息中用Accept和Content-Type字段指定，这两个字段才是对”表现层”的描述。</p>
<h3 id="状态转化"><a href="#状态转化" class="headerlink" title="状态转化"></a>状态转化</h3><p>互联网通信协议HTTP协议，是一个无状态协议。这意味着，所有的状态都保存在服务器端。因此，<strong>如果客户端想要操作服务器，必须通过某种手段，让服务器端发生”状态转化”（State Transfer）。而这种转化是建立在表现层之上的，所以就是”表现层状态转化”。</strong></p>
<p>客户端用到的手段，只能是HTTP协议。具体来说，就是HTTP协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。它们分别对应四种基本操作：<strong>GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源</strong></p>
<h3 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h3><p>综合上面的解释，我们总结一下什么是RESTful架构：</p>
<ul>
<li>每一个URI代表一种资源；</li>
<li>客户端和服务器之间，传递这种资源的某种表现层；</li>
<li>客户端通过四个HTTP动词，对服务器端资源进行操作，实现”表现层状态转化”。</li>
</ul>
<h3 id="误区"><a href="#误区" class="headerlink" title="误区"></a>误区</h3><p>RESTful架构有一些典型的设计误区。</p>
<p><strong>最常见的一种设计错误，就是URI包含动词。</strong> 因为”资源”表示一种实体，所以应该是名词，URI不应该有动词，动词应该放在HTTP协议中。</p>
<p><br>ikook<br>2017.03.05</p>
]]></content>
      
        <categories>
            
            <category> 技术栈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> RESTful </tag>
            
            <tag> 网络 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CPU、内存、硬盘、指令以及它们之间的关系]]></title>
      <url>/2017/02/25/cpu_ram_detailed/</url>
      <content type="html"><![CDATA[<blockquote>
<p>本人对于CPU、内存、硬盘以及指令等一系列计算机核心组件理解甚浅。<a id="more"></a> 并且对其也不是很来感，不过身为一名软件专业学生以及未来的程序猿，还是硬着头皮研究研究。以下是对其学习的一个总结吧算是，有什么不正确的地方还请指出，不喜勿喷。</p>
</blockquote>
<p>相信大家都知道计算机是由控制器、运算器、存储器、输入设备、输出设备五大部分组成。控制器 + 运算器组成了CPU，存储器即内存，当然硬盘也属于存储器，不过硬盘和内存存储形式有所不同，详细见下。</p>
<p>说明：点击以下标题查看维基百科详解</p>
<h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a><a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E5%A4%AE%E5%A4%84%E7%90%86%E5%99%A8" target="_blank" rel="external">CPU</a></h3><p>CPU即中央处理器(Central Processing Unit)。</p>
<p>它是计算机的主要设备之一，可以是说是计算机最重要的组成部分。常听到有人说CPU是”计算机的大脑”，但我觉得这句话是不完全正确的。为什么这么说呢，CPU没有存储能力，只有为数不多的寄存器能临时存储一点东西，人可是有存储能力的，像最强大脑上有些人更拥有超强的记忆力。所以在存储能力这方面来讲，我觉得把CPU比作”大脑“的说法不太正确。就像刘欣前辈在其公号上讲解<a href="http://mp.weixin.qq.com/s?__biz=MzAxOTc0NzExNg==&amp;mid=2665513017&amp;idx=1&amp;sn=5550ee714abd36d0b580713f673e670b&amp;scene=21#wechat_redirect" target="_blank" rel="external">CPU</a>说的那样，”上帝为你关闭了一扇门，就一定会为你打开一扇窗”，CPU虽然“脑容量”很小，但是它拥有超强的运算力。拿内存和硬盘来说，CPU比内存要快100倍，比硬盘快1000多万倍。这种运算速度可是人望尘莫及的了。所以在运算力这方面讲，又可以把CPU比作“超强的大脑”。</p>
<p>它负责处理、运算计算机内部的所有数据。</p>
<h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a><a href="https://zh.wikipedia.org/wiki/%E9%9A%8F%E6%9C%BA%E5%AD%98%E5%8F%96%E5%AD%98%E5%82%A8%E5%99%A8" target="_blank" rel="external">内存</a></h3><p>内存即RAM，随机存取存储器(Random Access Memory)。</p>
<p>内存是计算机的主存，主存(Main memory)即电脑内部最重要的存储器，是与CPU直接交换数据的内部存储器。它用来加载各种各样的数据和程序以供CPU直接运行与运用。它是可以随时读写的，并且速度也很快，仅仅比CPU慢100倍。它通常作为操作系统或其他正在运行中的程序的临时数据存储媒介。通俗点说，内存就是用来临时存储数据，用来给CPU提供CPU要处理的东西。但是内存不会长期保存数据，只是临时存储，程序和数据处理完后就释放空间。</p>
<h3 id="硬盘"><a href="#硬盘" class="headerlink" title="硬盘"></a><a href="https://zh.wikipedia.org/wiki/%E7%A1%AC%E7%9B%98" target="_blank" rel="external">硬盘</a></h3><p>硬盘即HDD(Hard Disk Drive)。</p>
<p>硬盘是计算机上使用坚硬的旋转盘片为基础的非挥发性存储设备，它在平整的磁性表面存储和检索数字数据，信息通过离磁性表面很近的磁头，由电磁流来改变极性方式被电磁流写到磁盘上，信息可以通过相反的方式读取，例如读头经过纪录数据的上方时磁场导致线圈中电气信号的改变。硬盘的读写是采用随机存取的方式，因此可以以任意顺序读取硬盘中的数据。以上来自维基百科。各种专业名词，我相信你已经看厌倦了快。说白了，硬盘就是存东西的，长期存，也就是具有记忆力。不像CPU和内存，“一觉醒来就忘了以前的事情”，所有的数据全都清空。硬盘会长期存储数据，只要是不人为删除，不出现硬件故障，东西就不会丢。</p>
<h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a><a href="https://zh.wikipedia.org/wiki/%E6%8C%87%E4%BB%A4" target="_blank" rel="external">指令</a></h3><p>指令，怎么说呢，指令就是任何可执行程序的元素的表述。指令一般会包含一个操作码和零到多个操作数。操作码指定了要进行什么样的操作。操作数可能指定了参与操作的寄存器、内存地址或立即数，它可能还会包含寻址方式，寻址方式确定操作数的含义。说白了，指令就是CPU的命令，CPU通过寄存器中的指令来进行数据的操作。</p>
<p>另外，指令一般有四种：加载、存储、操作和跳转。</p>
<h3 id="它们之间的关系"><a href="#它们之间的关系" class="headerlink" title="它们之间的关系"></a>它们之间的关系</h3><p>CPU从内存或缓存中取出指令，放入指令寄存器，并对指令译码进行分解，进而对数据进行处理。这么说吧，计算机中所有的程序运行都是在内存中进行的，因此内存对计算机性能的影响非常大。数据由传输速度较慢的硬盘通过内存传送到CPU进行处理。不过内存是带电存储的(断电数据就会消失)，而且容量十分有限，所以要长时间储存程序或数据就需要使用硬盘。</p>
<p>所以计算机处理数据大概就通过以上几个部分：数据(硬盘)——&gt;内存——&gt;CPU——&gt;CPU通过指令处理数据</p>
<p><br>ikook<br>2017.02.25</p>
]]></content>
      
        <categories>
            
            <category> 技术栈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 计算机技术 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Skill-learn-collect]]></title>
      <url>/2017/02/21/skill_learn_collect/</url>
      <content type="html"><![CDATA[<blockquote>
<p>收集在学习和提高技术过程中遇到的比较有价值的网站、文档、Blog 等，方便自己查阅。</p>
</blockquote>
<a id="more"></a>
<p>由于自己在学习过程中积累了一些博客、文档等学习资料，以前一直在自己电脑本地拉个快捷方式存在本地，以便日后翻阅复习。由于偶然，自己在整理资料过程中，看到有前辈在 GitHub 上做过资料的整理，所以我自己也产生了这个想法。然后就有了这个 GitHub 仓库。希望可以给大家带来方便，并且希望能有帮助到大家的资料，这个仓库以后会一直维护下去，并会经常更新。当然希望大家可以参与进来一起维护，欢迎 pull ，欢迎 pull  request 。同时，希望大家多多 star ，哈哈。</p>
<p>问题：不知道是什么原因，在简书上点击Tag会跳转到新页面，不会跳转到当前页面指定的Tag。不过在我的<a href="http://ikookblog.com/2017/02/21/Skill-learn-collect/">个人博客</a>和 GitHub 上没有任何问题。给大家带来不便，还请谅解。不会既然是 GitHub 仓库，当然是在 GitHub最好，所以建议大家转步 GitHub。</p>
<p>GitHub 仓库地址：<a href="https://github.com/china-kook/Skill-learn-collect" target="_blank" rel="external">Skill-learn-collect</a><br>欢迎提 issues，欢迎 Star。</p>
<h2 id="tags">Tags</h2>

<p><a href="#android">Android</a>      <a href="#java">Java</a>       <a href="#kotlin">Kotlin</a>       <a href="#shejimoshi">设计模式</a>        <a href="#android-studio">Android/Android Studio 相关</a>           <a href="#sql">数据库</a>             <a href="#git">Git</a>          <a href="#github">GitHub</a>               <a href="#view-ui">Android/View&amp;UI 相关</a>            <a href="#mvp">MVP</a>               <a href="#kaiyuanxiangmu">开源项目</a>           <a href="#linux">Linux</a>            <a href="#xiaolv">效率工具</a>                 <a href="#kuangjia">框架</a>                <a href="#material-design">Android/Material Design 相关</a>             <a href="#mantan">技术漫谈</a>                <a href="#appium">Appium</a>               <a href="#qita">其他收集类GitHub地址</a>  </p>
<p></p><h3 id="android">Android</h3><a href="#tags">点击此处回到Tags</a><p></p>
<ul>
<li><h4 id="Blogs"><a href="#Blogs" class="headerlink" title="Blogs"></a>Blogs</h4><p></p><h5 id="view-ui">View&amp;UI 相关</h5><p></p>
<h6 id="Android-RecyclerView-顶部悬浮实现"><a href="#Android-RecyclerView-顶部悬浮实现" class="headerlink" title="Android RecyclerView 顶部悬浮实现"></a><a href="http://www.jianshu.com/p/c596f2e6f587" target="_blank" rel="external">Android RecyclerView 顶部悬浮实现</a></h6><h6 id="那些酷炫的RecyclerView开源库整理"><a href="#那些酷炫的RecyclerView开源库整理" class="headerlink" title="那些酷炫的RecyclerView开源库整理"></a><a href="http://www.jianshu.com/p/154891851fe2" target="_blank" rel="external">那些酷炫的RecyclerView开源库整理</a></h6><h6 id="RecyclerView使用详解（一）"><a href="#RecyclerView使用详解（一）" class="headerlink" title="RecyclerView使用详解（一）"></a><a href="http://frank-zhu.github.io/android/2015/01/16/android-recyclerview-part-1/" target="_blank" rel="external">RecyclerView使用详解（一）</a></h6><h6 id="Android-RecyclerView-使用完全解析-体验艺术般的控件"><a href="#Android-RecyclerView-使用完全解析-体验艺术般的控件" class="headerlink" title="Android RecyclerView 使用完全解析 体验艺术般的控件"></a><a href="http://blog.csdn.net/lmj623565791/article/details/45059587" target="_blank" rel="external">Android RecyclerView 使用完全解析 体验艺术般的控件</a></h6><h6 id="RecyclerView使用介绍-泡在网上的日子"><a href="#RecyclerView使用介绍-泡在网上的日子" class="headerlink" title="RecyclerView使用介绍-泡在网上的日子"></a><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2014/1118/2004.html" target="_blank" rel="external">RecyclerView使用介绍-泡在网上的日子</a></h6><h6 id="这是一篇Android-RecyclerView使用介绍哦"><a href="#这是一篇Android-RecyclerView使用介绍哦" class="headerlink" title="这是一篇Android RecyclerView使用介绍哦"></a><a href="http://www.jianshu.com/p/12ec590f6c76#" target="_blank" rel="external">这是一篇Android RecyclerView使用介绍哦</a></h6><h6 id="RecyclerView-入门教程（超详细）"><a href="#RecyclerView-入门教程（超详细）" class="headerlink" title=" RecyclerView 入门教程（超详细）"></a><a href="http://blog.csdn.net/u013647382/article/details/51901103" target="_blank" rel="external"> RecyclerView 入门教程（超详细）</a></h6><p></p><h5 id="material-design">Material Design 相关</h5><p></p>
<h6 id="Awesome-MaterialDesign"><a href="#Awesome-MaterialDesign" class="headerlink" title="Awesome-MaterialDesign"></a><a href="https://github.com/lightSky/Awesome-MaterialDesign" target="_blank" rel="external">Awesome-MaterialDesign</a></h6><h6 id="Android-Material-Design系列之主题样式介绍说明等"><a href="#Android-Material-Design系列之主题样式介绍说明等" class="headerlink" title="Android Material Design系列之主题样式介绍说明等"></a><a href="http://mp.weixin.qq.com/s?__biz=MjM5NDkxMTgyNw==&amp;mid=2653057851&amp;idx=1&amp;sn=fa8351fa06005314635e79abc45ec171#rd" target="_blank" rel="external">Android Material Design系列之主题样式介绍说明等</a></h6><h6 id="Android-Material-Design-兼容库的使用详解"><a href="#Android-Material-Design-兼容库的使用详解" class="headerlink" title="Android Material Design 兼容库的使用详解"></a><a href="http://www.jianshu.com/p/1e6eed09d48b" target="_blank" rel="external">Android Material Design 兼容库的使用详解</a></h6><h6 id="Material-Design技术分享"><a href="#Material-Design技术分享" class="headerlink" title="Material Design技术分享"></a><a href="https://mp.weixin.qq.com/s?__biz=MzI1NjEwMTM4OA==&amp;mid=2651231829&amp;idx=1&amp;sn=2418c741e7f0e41f6ac4fff4dc2de6f0&amp;scene=1&amp;srcid=0526kJT3uB1vIPjVXTVrSKjW&amp;pass_ticket=muxDwCVjxMK%2Fz1ncol%2B4QyK94pZsvdn%2FSA4JigA6HWU1Hf%2Fr6BUURvZ002TBW6Oq#rd" target="_blank" rel="external">Material Design技术分享</a></h6><h6 id="Android-Material-Design系列之Toolbar"><a href="#Android-Material-Design系列之Toolbar" class="headerlink" title="Android Material Design系列之Toolbar"></a><a href="http://mp.weixin.qq.com/s?__biz=MjM5NDkxMTgyNw==&amp;mid=2653057635&amp;idx=1&amp;sn=bc8ea475db4f215226367eed71105f35&amp;scene=0#wechat_redirect" target="_blank" rel="external">Android Material Design系列之Toolbar</a></h6><h6 id="最能解决你的痛点问题，也是你最需要的，尽在Material-Design-系列这篇"><a href="#最能解决你的痛点问题，也是你最需要的，尽在Material-Design-系列这篇" class="headerlink" title="最能解决你的痛点问题，也是你最需要的，尽在Material Design 系列这篇"></a><a href="http://mp.weixin.qq.com/s?__biz=MjM5NDkxMTgyNw==&amp;mid=2653057738&amp;idx=1&amp;sn=f0b212bfe3343b8f707f32bfefbbda0b#wechat_redirect" target="_blank" rel="external">最能解决你的痛点问题，也是你最需要的，尽在Material Design 系列这篇</a></h6><h6 id="Material-designed-password"><a href="#Material-designed-password" class="headerlink" title="Material designed password"></a><a href="https://github.com/SubhrajyotiSen/PasswordView" target="_blank" rel="external">Material designed password</a></h6><p></p><h5 id="android-studio">Android Studio 相关</h5><p></p>
<h6 id="Android-Studio系列教程一-—-下载与安装"><a href="#Android-Studio系列教程一-—-下载与安装" class="headerlink" title="Android Studio系列教程一 —- 下载与安装"></a><a href="http://stormzhang.com/devtools/2014/11/25/android-studio-tutorial1/" target="_blank" rel="external">Android Studio系列教程一 —- 下载与安装</a></h6><h6 id="Android-Studio系列教程二-—-基本设置与运行"><a href="#Android-Studio系列教程二-—-基本设置与运行" class="headerlink" title="Android Studio系列教程二 —- 基本设置与运行"></a><a href="http://stormzhang.com/devtools/2014/11/28/android-studio-tutorial2/" target="_blank" rel="external">Android Studio系列教程二 —- 基本设置与运行</a></h6><h6 id="Android-Studio系列教程四-—-Gradle基础"><a href="#Android-Studio系列教程四-—-Gradle基础" class="headerlink" title="Android Studio系列教程四 —- Gradle基础"></a><a href="http://stormzhang.com/devtools/2014/12/18/android-studio-tutorial4/" target="_blank" rel="external">Android Studio系列教程四 —- Gradle基础</a></h6><h6 id="AS技巧合集「常用技巧篇」"><a href="#AS技巧合集「常用技巧篇」" class="headerlink" title="AS技巧合集「常用技巧篇」"></a><a href="http://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&amp;mid=402416974&amp;idx=1&amp;sn=a8fd70a65ff3973758e4a7975c361139&amp;scene=21#wechat_redirect" target="_blank" rel="external">AS技巧合集「常用技巧篇」</a></h6><h6 id="AS技巧合集「编码技巧篇」"><a href="#AS技巧合集「编码技巧篇」" class="headerlink" title="AS技巧合集「编码技巧篇」"></a><a href="http://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&amp;mid=402416974&amp;idx=2&amp;sn=136e2a77c9bdd2cf971143d7f35e57d2&amp;scene=21#wechat_redirect" target="_blank" rel="external">AS技巧合集「编码技巧篇」</a></h6><h6 id="AS技巧合集「调试技巧篇」"><a href="#AS技巧合集「调试技巧篇」" class="headerlink" title="AS技巧合集「调试技巧篇」"></a><a href="http://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&amp;mid=402416974&amp;idx=3&amp;sn=3a0f99a753e7e8372cb98b696542d2cb&amp;scene=21#wechat_redirect" target="_blank" rel="external">AS技巧合集「调试技巧篇」</a></h6><h6 id="Android-Studio-掌握这些调试技巧，Debug能力不能再高啦"><a href="#Android-Studio-掌握这些调试技巧，Debug能力不能再高啦" class="headerlink" title="Android Studio 掌握这些调试技巧，Debug能力不能再高啦"></a><a href="http://www.jianshu.com/p/985f788fae2c" target="_blank" rel="external">Android Studio 掌握这些调试技巧，Debug能力不能再高啦</a></h6><h6 id="Android-Studio五分钟带你从菜鸟到高级调试"><a href="#Android-Studio五分钟带你从菜鸟到高级调试" class="headerlink" title="Android Studio五分钟带你从菜鸟到高级调试"></a><a href="http://blog.csdn.net/u013132758/article/details/51915575" target="_blank" rel="external">Android Studio五分钟带你从菜鸟到高级调试</a></h6><h6 id="Android-Studio最全快捷键以及演示"><a href="#Android-Studio最全快捷键以及演示" class="headerlink" title="Android Studio最全快捷键以及演示"></a><a href="http://fvaryu.github.io/2016/07/22/as-keymap/" target="_blank" rel="external">Android Studio最全快捷键以及演示</a></h6><h6 id="精品推荐-Android-Studio插件整理"><a href="#精品推荐-Android-Studio插件整理" class="headerlink" title="[精品推荐]Android Studio插件整理"></a><a href="https://mp.weixin.qq.com/s?__biz=MzI3MDE0NzYwNA==&amp;mid=2651433634&amp;idx=1&amp;sn=e5f65d8a0a2b85f7c22d8ccd4cf96a39&amp;scene=1&amp;srcid=0721vQcDls3Ak34dZY1y3h7o&amp;key=77421cf58af4a653e4f55f04cf114492e73a17a2a7d56a0e523c62f16c003b19cdab0cf3a902023d7cbe2af60a58c71d&amp;ascene=0&amp;uin=MjAyNzY1NTU%3D&amp;devicetype=iMac+MacBookPro12%2C1+OSX+OSX+10.11.3+build(15D21" target="_blank" rel="external">[精品推荐]Android Studio插件整理</a></h6><h6 id="多module合成单一module技巧"><a href="#多module合成单一module技巧" class="headerlink" title="多module合成单一module技巧"></a><a href="http://www.jianshu.com/p/9b022951571c" target="_blank" rel="external">多module合成单一module技巧</a></h6><h6 id="Android-Studio相见恨晚的操作锦集"><a href="#Android-Studio相见恨晚的操作锦集" class="headerlink" title="Android Studio相见恨晚的操作锦集"></a><a href="http://www.jianshu.com/p/bc8f6bfe12c6?" target="_blank" rel="external">Android Studio相见恨晚的操作锦集</a></h6><h6 id="Android-Studio-Plugin-is-too-old、Gradle-version-2-10-is-required问题解决方法"><a href="#Android-Studio-Plugin-is-too-old、Gradle-version-2-10-is-required问题解决方法" class="headerlink" title="Android Studio Plugin is too old、Gradle version 2.10 is required问题解决方法"></a><a href="http://yanziyu.top/2016/03/21/as-issue/" target="_blank" rel="external">Android Studio Plugin is too old、Gradle version 2.10 is required问题解决方法</a></h6><h6 id="Android-Studio-2-0-稳定版-新特性简介（中文）"><a href="#Android-Studio-2-0-稳定版-新特性简介（中文）" class="headerlink" title="Android Studio 2.0 稳定版 新特性简介（中文）"></a><a href="http://chinagdg.org/2016/04/android-studio-2-0/" target="_blank" rel="external">Android Studio 2.0 稳定版 新特性简介（中文）</a></h6><h6 id="配置你的-Android-Studio"><a href="#配置你的-Android-Studio" class="headerlink" title="配置你的 Android Studio"></a><a href="http://gold.xitu.io/entry/570b79f071cfe4005fa5cda5" target="_blank" rel="external">配置你的 Android Studio</a></h6><h6 id="10个你可能不知道的-Android-Studio技巧"><a href="#10个你可能不知道的-Android-Studio技巧" class="headerlink" title="10个你可能不知道的 Android Studio技巧"></a><a href="http://www.jcodecraeer.com/a/anzhuokaifa/Android_Studio/2016/0424/4172.html" target="_blank" rel="external">10个你可能不知道的 Android Studio技巧</a></h6><h6 id="使用新版Android-Studio检测内存泄露和性能"><a href="#使用新版Android-Studio检测内存泄露和性能" class="headerlink" title="使用新版Android Studio检测内存泄露和性能"></a><a href="http://www.jianshu.com/p/216b03c22bb8" target="_blank" rel="external">使用新版Android Studio检测内存泄露和性能</a></h6><h6 id="AndroidStudio上面最好用的插件"><a href="#AndroidStudio上面最好用的插件" class="headerlink" title="AndroidStudio上面最好用的插件"></a><a href="http://www.jianshu.com/p/d76b60a3883d" target="_blank" rel="external">AndroidStudio上面最好用的插件</a></h6><h6 id="Android必知必会-Android-Studio修改包名"><a href="#Android必知必会-Android-Studio修改包名" class="headerlink" title="Android必知必会-Android Studio修改包名"></a><a href="http://blog.csdn.net/ys743276112/article/details/51684294" target="_blank" rel="external">Android必知必会-Android Studio修改包名</a></h6><h6 id="Android-Studio必备插件"><a href="#Android-Studio必备插件" class="headerlink" title="Android Studio必备插件"></a><a href="http://hjxandhmr.github.io/2016/06/21/AndroidStudio-Plug/" target="_blank" rel="external">Android Studio必备插件</a></h6><h6 id="在Android-Studio中进行单元测试和UI测试"><a href="#在Android-Studio中进行单元测试和UI测试" class="headerlink" title="在Android Studio中进行单元测试和UI测试"></a><a href="http://www.jianshu.com/p/03118c11c199" target="_blank" rel="external">在Android Studio中进行单元测试和UI测试</a></h6><h6 id="Android-Studio插件整理"><a href="#Android-Studio插件整理" class="headerlink" title="Android Studio插件整理"></a><a href="https://ydmmocoo.github.io/2016/06/28/Android-Studio%E6%8F%92%E4%BB%B6%E6%95%B4%E7%90%86/" target="_blank" rel="external">Android Studio插件整理</a></h6><h6 id="你所不知道的Android-Studio调试技巧"><a href="#你所不知道的Android-Studio调试技巧" class="headerlink" title="你所不知道的Android Studio调试技巧"></a><a href="http://www.jianshu.com/p/011eb88f4e0d" target="_blank" rel="external">你所不知道的Android Studio调试技巧</a></h6><h6 id="Android模版化编程系列（二）"><a href="#Android模版化编程系列（二）" class="headerlink" title="Android模版化编程系列（二）"></a><a href="http://blog.csdn.net/qq_15028795/article/details/51939047" target="_blank" rel="external">Android模版化编程系列（二）</a></h6><h6 id="Android-Studio-2-2-中几个实用的新功能"><a href="#Android-Studio-2-2-中几个实用的新功能" class="headerlink" title="Android Studio 2.2 中几个实用的新功能"></a><a href="http://www.jianshu.com/p/bc9bbac5a170" target="_blank" rel="external">Android Studio 2.2 中几个实用的新功能</a></h6></li>
</ul>
<ul>
<li><h4 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h4><h6 id="Android开发知识体系图-极客学院"><a href="#Android开发知识体系图-极客学院" class="headerlink" title="Android开发知识体系图-[极客学院]"></a><a href="http://www.jikexueyuan.com/path/android" target="_blank" rel="external">Android开发知识体系图-[极客学院]</a></h6><h6 id="Android-慕课网学习路径"><a href="#Android-慕课网学习路径" class="headerlink" title="Android-慕课网学习路径"></a><a href="http://www.imooc.com/course/programdetail/pid/33" target="_blank" rel="external">Android-慕课网学习路径</a></h6><h6 id="Android-开发工程师-优达学城"><a href="#Android-开发工程师-优达学城" class="headerlink" title="Android 开发工程师-优达学城"></a><a href="https://cn.udacity.com/android/" target="_blank" rel="external">Android 开发工程师-优达学城</a></h6></li>
<li><h4 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h4><h6 id="Android-Developer官方文档"><a href="#Android-Developer官方文档" class="headerlink" title="Android Developer官方文档"></a><a href="https://developer.android.com/index.html" target="_blank" rel="external">Android Developer官方文档</a></h6><h6 id="Android官方培训课程中文版-v0-9-7"><a href="#Android官方培训课程中文版-v0-9-7" class="headerlink" title="Android官方培训课程中文版(v0.9.7)"></a><a href="http://hukai.me/android-training-course-in-chinese/index.html" target="_blank" rel="external">Android官方培训课程中文版(v0.9.7)</a></h6><h6 id="Android-官方中文-部分-培训文档"><a href="#Android-官方中文-部分-培训文档" class="headerlink" title="Android 官方中文(部分)培训文档"></a><a href="https://developer.android.google.cn/training/index.html" target="_blank" rel="external">Android 官方中文(部分)培训文档</a></h6><h6 id="wan-android-知识体系"><a href="#wan-android-知识体系" class="headerlink" title="wan android 知识体系"></a><a href="http://www.xueandroid.com/hierarchy?courseId=13" target="_blank" rel="external">wan android 知识体系</a></h6><h6 id="Material-Design-官方文档"><a href="#Material-Design-官方文档" class="headerlink" title="Material Design 官方文档"></a><a href="https://material.io/guidelines/" target="_blank" rel="external">Material Design 官方文档</a></h6><h6 id="Material-Design-中文版"><a href="#Material-Design-中文版" class="headerlink" title="Material Design 中文版"></a><a href="http://wiki.jikexueyuan.com/project/material-design/" target="_blank" rel="external">Material Design 中文版</a></h6><h6 id="Android-中文API"><a href="#Android-中文API" class="headerlink" title="Android 中文API"></a><a href="http://www.android-doc.com/index.html" target="_blank" rel="external">Android 中文API</a></h6></li>
</ul>
<p></p><h3 id="java">Java</h3><a href="#tags">点击此处回到Tags</a><p></p>
<ul>
<li><h4 id="Blogs-1"><a href="#Blogs-1" class="headerlink" title="Blogs"></a>Blogs</h4><h6 id="一分钟秒懂注解"><a href="#一分钟秒懂注解" class="headerlink" title="一分钟秒懂注解"></a><a href="https://dreamerhome.github.io/2016/08/02/annotaion/" target="_blank" rel="external">一分钟秒懂注解</a></h6><h6 id="浅谈依赖注入与控制反转"><a href="#浅谈依赖注入与控制反转" class="headerlink" title="浅谈依赖注入与控制反转"></a><a href="http://hersface.com/page/DI_IoC.html" target="_blank" rel="external">浅谈依赖注入与控制反转</a></h6><h6 id="公共技术点之-Java-反射-Reflection"><a href="#公共技术点之-Java-反射-Reflection" class="headerlink" title="公共技术点之 Java 反射 Reflection"></a><a href="http://p.codekk.com/blogs/detail/5596953ed6459ae7934997c5" target="_blank" rel="external">公共技术点之 Java 反射 Reflection</a></h6><h6 id="浅谈Java回调机制"><a href="#浅谈Java回调机制" class="headerlink" title="浅谈Java回调机制"></a><a href="http://mp.weixin.qq.com/s?__biz=MzA4MjA0MTc4NQ==&amp;mid=403109183&amp;idx=1&amp;sn=2909a7702c12c4ada2c908263626b642#rd" target="_blank" rel="external">浅谈Java回调机制</a></h6><h6 id="知道这20个正则表达式，能让你少写1000行代码"><a href="#知道这20个正则表达式，能让你少写1000行代码" class="headerlink" title="知道这20个正则表达式，能让你少写1000行代码"></a><a href="http://www.jianshu.com/p/e7bb97218946" target="_blank" rel="external">知道这20个正则表达式，能让你少写1000行代码</a></h6><h6 id="公共技术点之-Java-注解-Annotation"><a href="#公共技术点之-Java-注解-Annotation" class="headerlink" title="公共技术点之 Java 注解 Annotation"></a><a href="http://p.codekk.com/blogs/detail/54cfab086c4761e5001b253b" target="_blank" rel="external">公共技术点之 Java 注解 Annotation</a></h6><h6 id="反射、注解与依赖注入总结"><a href="#反射、注解与依赖注入总结" class="headerlink" title="反射、注解与依赖注入总结"></a><a href="http://www.jianshu.com/p/24820bf3df5c" target="_blank" rel="external">反射、注解与依赖注入总结</a></h6><h6 id="JAVA-decompiler-collections"><a href="#JAVA-decompiler-collections" class="headerlink" title="JAVA decompiler collections"></a><a href="http://www.figotan.org/2015/11/24/java-decompiler-collections/" target="_blank" rel="external">JAVA decompiler collections</a></h6><h6 id="Android-中的-Enum-到底占多少内存？该如何用？"><a href="#Android-中的-Enum-到底占多少内存？该如何用？" class="headerlink" title="Android 中的 Enum 到底占多少内存？该如何用？"></a><a href="http://www.jianshu.com/p/6052cd4ea9ae" target="_blank" rel="external">Android 中的 Enum 到底占多少内存？该如何用？</a></h6><h6 id="infoQ——java系列blog（成富）"><a href="#infoQ——java系列blog（成富）" class="headerlink" title="infoQ——java系列blog（成富）"></a><a href="http://www.infoq.com/cn/author/%E6%88%90%E5%AF%8C#文章" target="_blank" rel="external">infoQ——java系列blog（成富）</a></h6><h6 id="Java中的多线程你只要看这一篇就够了"><a href="#Java中的多线程你只要看这一篇就够了" class="headerlink" title="Java中的多线程你只要看这一篇就够了"></a><a href="http://www.jianshu.com/p/40d4c7aebd66" target="_blank" rel="external">Java中的多线程你只要看这一篇就够了</a></h6><h6 id="为什么说DOM操作很慢"><a href="#为什么说DOM操作很慢" class="headerlink" title="为什么说DOM操作很慢"></a><a href="https://leozdgao.me/why-dom-slow/" target="_blank" rel="external">为什么说DOM操作很慢</a></h6><h6 id="Android-多线程编程的总结"><a href="#Android-多线程编程的总结" class="headerlink" title="Android 多线程编程的总结"></a><a href="http://www.diycode.cc/topics/213" target="_blank" rel="external">Android 多线程编程的总结</a></h6><h6 id="第4章-类和接口"><a href="#第4章-类和接口" class="headerlink" title="第4章 类和接口"></a><a href="http://mp.weixin.qq.com/s?__biz=MzIxNDE1NjQ2Mw==&amp;mid=2649872269&amp;idx=1&amp;sn=3e96d3e374e3c958041383f653d8b2ab#rd" target="_blank" rel="external">第4章 类和接口</a></h6><h6 id="【深入理解Java虚拟机】垃圾回收机制"><a href="#【深入理解Java虚拟机】垃圾回收机制" class="headerlink" title="【深入理解Java虚拟机】垃圾回收机制"></a><a href="http://blog.csdn.net/shakespeare001/article/details/51749788" target="_blank" rel="external">【深入理解Java虚拟机】垃圾回收机制</a></h6><h6 id="Java对象锁和类锁全面解析（多线程synchronized关键字）"><a href="#Java对象锁和类锁全面解析（多线程synchronized关键字）" class="headerlink" title="Java对象锁和类锁全面解析（多线程synchronized关键字）"></a><a href="http://www.importnew.com/20444.html" target="_blank" rel="external">Java对象锁和类锁全面解析（多线程synchronized关键字）</a></h6><h6 id="探究Java中的克隆"><a href="#探究Java中的克隆" class="headerlink" title="探究Java中的克隆"></a><a href="http://droidyue.com/blog/2016/05/15/dive-into-java-clone/" target="_blank" rel="external">探究Java中的克隆</a></h6><h6 id="理解Java中的ThreadLocal"><a href="#理解Java中的ThreadLocal" class="headerlink" title="理解Java中的ThreadLocal"></a><a href="http://droidyue.com/blog/2016/03/13/learning-threadlocal-in-java/" target="_blank" rel="external">理解Java中的ThreadLocal</a></h6><h6 id="Java-帝国之Java-bean-上）"><a href="#Java-帝国之Java-bean-上）" class="headerlink" title="Java 帝国之Java bean (上）"></a><a href="http://mp.weixin.qq.com/s/w_U7MGwDign59BJ5XJvNVQ" target="_blank" rel="external">Java 帝国之Java bean (上）</a></h6><h6 id="Java-帝国之Java-bean（下）"><a href="#Java-帝国之Java-bean（下）" class="headerlink" title="Java 帝国之Java bean（下）"></a><a href="http://mp.weixin.qq.com/s/PtmrlDvzPVl76hjfscFihw" target="_blank" rel="external">Java 帝国之Java bean（下）</a></h6></li>
<li><h4 id="视频-1"><a href="#视频-1" class="headerlink" title="视频"></a>视频</h4><h6 id="Servlet-JSP（JavaEE开发进阶Ⅰ）"><a href="#Servlet-JSP（JavaEE开发进阶Ⅰ）" class="headerlink" title="Servlet+JSP（JavaEE开发进阶Ⅰ）"></a><a href="http://study.163.com/course/introduction.htm?courseId=1002907014#/courseDetail" target="_blank" rel="external">Servlet+JSP（JavaEE开发进阶Ⅰ）</a></h6><h6 id="Java课程-Java300集大型视频教程"><a href="#Java课程-Java300集大型视频教程" class="headerlink" title="Java课程 Java300集大型视频教程"></a><a href="http://study.163.com/course/introduction.htm?courseId=343001#/courseDetail" target="_blank" rel="external">Java课程 Java300集大型视频教程</a></h6><h6 id="JavaWeb工程师-极客学院"><a href="#JavaWeb工程师-极客学院" class="headerlink" title="JavaWeb工程师-[极客学院]"></a><a href="http://ke.jikexueyuan.com/zhiye/javaweb/" target="_blank" rel="external">JavaWeb工程师-[极客学院]</a></h6><h6 id="JavaEE视频教程"><a href="#JavaEE视频教程" class="headerlink" title="JavaEE视频教程"></a><a href="http://study.163.com/course/introduction/320027.htm#/courseDetail" target="_blank" rel="external">JavaEE视频教程</a></h6></li>
<li><h4 id="文档-1"><a href="#文档-1" class="headerlink" title="文档"></a>文档</h4><h6 id="Java-官方Tutorial"><a href="#Java-官方Tutorial" class="headerlink" title="Java 官方Tutorial"></a><a href="http://docs.oracle.com/javase/tutorial/" target="_blank" rel="external">Java 官方Tutorial</a></h6><h6 id="The-Java®-Language-Specification"><a href="#The-Java®-Language-Specification" class="headerlink" title="The Java® Language Specification"></a><a href="http://docs.oracle.com/javase/specs/jls/se8/html/index.html" target="_blank" rel="external">The Java® Language Specification</a></h6><h6 id="Java1-8-API在线文档"><a href="#Java1-8-API在线文档" class="headerlink" title="Java1.8 API在线文档"></a><a href="http://docs.oracle.com/javase/8/docs/api/index.html" target="_blank" rel="external">Java1.8 API在线文档</a></h6><h6 id="Java相关Wiki-极客学院"><a href="#Java相关Wiki-极客学院" class="headerlink" title="Java相关Wiki-[极客学院]"></a><a href="http://wiki.jikexueyuan.com/list/java/" target="_blank" rel="external">Java相关Wiki-[极客学院]</a></h6></li>
</ul>
<p></p><h3 id="kotlin">Kotlin</h3><a href="#tags">点击此处回到Tags</a><p></p>
<h6 id="Kotlin-官方参考文档-中文版"><a href="#Kotlin-官方参考文档-中文版" class="headerlink" title="Kotlin 官方参考文档 中文版"></a><a href="https://www.gitbook.com/book/hltj/kotlin-reference-chinese/details" target="_blank" rel="external">Kotlin 官方参考文档 中文版</a></h6><h6 id="Kotlin-官方教程"><a href="#Kotlin-官方教程" class="headerlink" title="Kotlin 官方教程"></a><a href="http://kotlinlang.org/docs/tutorials/" target="_blank" rel="external">Kotlin 官方教程</a></h6><h6 id="Kotlin-中文教程"><a href="#Kotlin-中文教程" class="headerlink" title="Kotlin 中文教程"></a><a href="https://github.com/mcxiaoke/kotlin-notes" target="_blank" rel="external">Kotlin 中文教程</a></h6><h6 id="Kotlin从入门到『放弃』系列-视频教程"><a href="#Kotlin从入门到『放弃』系列-视频教程" class="headerlink" title="Kotlin从入门到『放弃』系列 视频教程"></a><a href="https://github.com/enbandari/Kotlin-Tutorials" target="_blank" rel="external">Kotlin从入门到『放弃』系列 视频教程</a></h6><h6 id="Kotlin-Primer·第一章·启程"><a href="#Kotlin-Primer·第一章·启程" class="headerlink" title="Kotlin Primer·第一章·启程"></a><a href="https://www.kymjs.com/code/2017/02/03/01/" target="_blank" rel="external">Kotlin Primer·第一章·启程</a></h6><p></p><h3 id="shejimoshi">设计模式</h3><a href="#tags">点击此处回到Tags</a><p></p>
<h6 id="设计模式Java版"><a href="#设计模式Java版" class="headerlink" title="设计模式Java版"></a><a href="https://www.gitbook.com/book/quanke/design-pattern-java/details" target="_blank" rel="external">设计模式Java版</a></h6><h6 id="Android-源码中的设计模式"><a href="#Android-源码中的设计模式" class="headerlink" title="Android 源码中的设计模式"></a><a href="http://blog.csdn.net/amazing7/article/details/51719404" target="_blank" rel="external">Android 源码中的设计模式</a></h6><h6 id="从Android代码中来记忆23种设计模式"><a href="#从Android代码中来记忆23种设计模式" class="headerlink" title="从Android代码中来记忆23种设计模式"></a><a href="http://blog.csdn.net/huachao1001/article/details/51536074" target="_blank" rel="external">从Android代码中来记忆23种设计模式</a></h6><h6 id="【女朋友系列之找女朋友篇】简单工厂模式，工厂模式，抽象工厂模式"><a href="#【女朋友系列之找女朋友篇】简单工厂模式，工厂模式，抽象工厂模式" class="headerlink" title="【女朋友系列之找女朋友篇】简单工厂模式，工厂模式，抽象工厂模式"></a><a href="http://www.jianshu.com/p/3f824a91d73b" target="_blank" rel="external">【女朋友系列之找女朋友篇】简单工厂模式，工厂模式，抽象工厂模式</a></h6><h6 id="设计模式速谈：二、简单工厂模式"><a href="#设计模式速谈：二、简单工厂模式" class="headerlink" title="设计模式速谈：二、简单工厂模式"></a><a href="https://www.yhspy.com/blog/182/" target="_blank" rel="external">设计模式速谈：二、简单工厂模式</a></h6><h6 id="Android-设计模式"><a href="#Android-设计模式" class="headerlink" title="Android 设计模式"></a><a href="http://m.blog.csdn.net/article/details?plg_nld=1&amp;id=24985607&amp;plg_auth=1&amp;plg_uin=1&amp;plg_usr=1&amp;plg_vkey=1&amp;plg_nld=1&amp;plg_dev=1" target="_blank" rel="external">Android 设计模式</a></h6><p></p><h3 id="sql">数据库</h3><a href="#tags">点击此处回到Tags</a><p></p>
<h6 id="SQLite-官方文档"><a href="#SQLite-官方文档" class="headerlink" title="SQLite 官方文档"></a><a href="http://www.sqlite.org/docs.html" target="_blank" rel="external">SQLite 官方文档</a></h6><h6 id="SQL基础语句汇总"><a href="#SQL基础语句汇总" class="headerlink" title="SQL基础语句汇总"></a><a href="http://www.jcodecraeer.com/a/shujuku/2015/1024/3619.html" target="_blank" rel="external">SQL基础语句汇总</a></h6><h6 id="Android-中-SQLite-性能优化"><a href="#Android-中-SQLite-性能优化" class="headerlink" title="Android 中 SQLite 性能优化"></a><a href="http://droidyue.com/blog/2015/12/13/android-sqlite-tuning/" target="_blank" rel="external">Android 中 SQLite 性能优化</a></h6><p></p><h3 id="git">Git</h3><a href="#tags">点击此处回到Tags</a><p></p>
<h6 id="Git学习总结"><a href="#Git学习总结" class="headerlink" title="Git学习总结"></a><a href="http://ikookblog.com/2016/10/15/Git%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/">Git学习总结</a></h6><h6 id="ProGit中文版"><a href="#ProGit中文版" class="headerlink" title="ProGit中文版"></a><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="external">ProGit中文版</a></h6><h6 id="廖雪峰的Git教程"><a href="#廖雪峰的Git教程" class="headerlink" title="廖雪峰的Git教程"></a><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">廖雪峰的Git教程</a></h6><h6 id="Git简明指南"><a href="#Git简明指南" class="headerlink" title="Git简明指南"></a><a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="external">Git简明指南</a></h6><h6 id="从0开始学习-GitHub-系列之「Git-速成」"><a href="#从0开始学习-GitHub-系列之「Git-速成」" class="headerlink" title="从0开始学习 GitHub 系列之「Git 速成」"></a><a href="http://stormzhang.com/github/2016/05/30/learn-github-from-zero3/" target="_blank" rel="external">从0开始学习 GitHub 系列之「Git 速成」</a></h6><h6 id="从0开始学习-GitHub-系列之「Git-进阶」"><a href="#从0开始学习-GitHub-系列之「Git-进阶」" class="headerlink" title="从0开始学习 GitHub 系列之「Git 进阶」"></a><a href="http://stormzhang.com/github/2016/06/16/learn-github-from-zero5/" target="_blank" rel="external">从0开始学习 GitHub 系列之「Git 进阶」</a></h6><h6 id="常用的12个Git基本命令"><a href="#常用的12个Git基本命令" class="headerlink" title="常用的12个Git基本命令"></a><a href="https://www.sdk.cn/news/2957" target="_blank" rel="external">常用的12个Git基本命令</a></h6><h6 id="闯过这-54-关，点亮你的-Git-技能树"><a href="#闯过这-54-关，点亮你的-Git-技能树" class="headerlink" title="闯过这 54 关，点亮你的 Git 技能树"></a><a href="https://codingstyle.cn/topics/51" target="_blank" rel="external">闯过这 54 关，点亮你的 Git 技能树</a></h6><h6 id="闯过这-54-关，点亮你的-Git-技能树-一"><a href="#闯过这-54-关，点亮你的-Git-技能树-一" class="headerlink" title="闯过这 54 关，点亮你的 Git 技能树 (一)"></a><a href="https://codingstyle.cn/topics/57" target="_blank" rel="external">闯过这 54 关，点亮你的 Git 技能树 (一)</a></h6><h6 id="闯过这-54-关，点亮你的-Git-技能树-二"><a href="#闯过这-54-关，点亮你的-Git-技能树-二" class="headerlink" title="闯过这 54 关，点亮你的 Git 技能树 (二)"></a><a href="https://segmentfault.com/a/1190000005123830" target="_blank" rel="external">闯过这 54 关，点亮你的 Git 技能树 (二)</a></h6><h6 id="常用的几十个Git小技巧分类与总结"><a href="#常用的几十个Git小技巧分类与总结" class="headerlink" title="常用的几十个Git小技巧分类与总结"></a><a href="https://segmentfault.com/a/1190000005706707" target="_blank" rel="external">常用的几十个Git小技巧分类与总结</a></h6><p></p><h3 id="github">GitHub</h3><a href="#tags">点击此处回到Tags</a><p></p>
<h6 id="Github装逼指南——Travis-CI-和-Codecov"><a href="#Github装逼指南——Travis-CI-和-Codecov" class="headerlink" title="Github装逼指南——Travis CI 和 Codecov"></a><a href="https://segmentfault.com/a/1190000004415437" target="_blank" rel="external">Github装逼指南——Travis CI 和 Codecov</a></h6><h6 id="Starred-——-GitHub-增强使用工具"><a href="#Starred-——-GitHub-增强使用工具" class="headerlink" title="Starred —— GitHub 增强使用工具"></a><a href="http://www.oschina.net/p/starred" target="_blank" rel="external">Starred —— GitHub 增强使用工具</a></h6><h6 id="你与优秀源码之间只差一个Star"><a href="#你与优秀源码之间只差一个Star" class="headerlink" title="你与优秀源码之间只差一个Star"></a><a href="http://blog.fir.im/fir_im_weekly160729/?hmsr=gold.xitu.io/&amp;utm_medium=gold.xitu.io&amp;utm_source=gold.xitu.io" target="_blank" rel="external">你与优秀源码之间只差一个Star</a></h6><h6 id="awesome-github-：为了更好地使用-GitHub"><a href="#awesome-github-：为了更好地使用-GitHub" class="headerlink" title="awesome-github ：为了更好地使用 GitHub"></a><a href="https://gold.xitu.io/entry/56d7a0f31532bc0050741afc" target="_blank" rel="external">awesome-github ：为了更好地使用 GitHub</a></h6><h6 id="Android-Studio导入github项目详解"><a href="#Android-Studio导入github项目详解" class="headerlink" title="Android Studio导入github项目详解"></a><a href="http://blog.csdn.net/lyhhj/article/details/48789705" target="_blank" rel="external">Android Studio导入github项目详解</a></h6><h6 id="如何选择开源项目？"><a href="#如何选择开源项目？" class="headerlink" title="如何选择开源项目？"></a><a href="https://zhuanlan.zhihu.com/p/20840610" target="_blank" rel="external">如何选择开源项目？</a></h6><h6 id="我的开源项目从0到1024的过程"><a href="#我的开源项目从0到1024的过程" class="headerlink" title="我的开源项目从0到1024的过程"></a><a href="http://www.jianshu.com/p/f2483bd8da43" target="_blank" rel="external">我的开源项目从0到1024的过程</a></h6><h6 id="从0开始学习-GitHub-系列之「初识-GitHub」"><a href="#从0开始学习-GitHub-系列之「初识-GitHub」" class="headerlink" title="从0开始学习 GitHub 系列之「初识 GitHub」"></a><a href="http://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&amp;mid=2650661735&amp;idx=1&amp;sn=9aceac07d272e9202d1b5294f857a5ff&amp;scene=21#wechat_redirect" target="_blank" rel="external">从0开始学习 GitHub 系列之「初识 GitHub」</a></h6><h6 id="从0开始学习-GitHub-系列之「加入-GitHub」"><a href="#从0开始学习-GitHub-系列之「加入-GitHub」" class="headerlink" title="从0开始学习 GitHub 系列之「加入 GitHub」"></a><a href="http://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&amp;mid=2650661762&amp;idx=1&amp;sn=8282241cf7414030f4e1d315a173beb1&amp;scene=21#wechat_redirect" target="_blank" rel="external">从0开始学习 GitHub 系列之「加入 GitHub」</a></h6><h6 id="从0开始学习-GitHub-系列之「Git速成」"><a href="#从0开始学习-GitHub-系列之「Git速成」" class="headerlink" title="从0开始学习 GitHub 系列之「Git速成」"></a><a href="http://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&amp;mid=2650661788&amp;idx=1&amp;sn=b7c54f9b13f4e30fe151905f11c02800&amp;scene=21#wechat_redirect" target="_blank" rel="external">从0开始学习 GitHub 系列之「Git速成」</a></h6><h6 id="从0开始学习-GitHub-系列之「向GitHub-提交代码」"><a href="#从0开始学习-GitHub-系列之「向GitHub-提交代码」" class="headerlink" title="从0开始学习 GitHub 系列之「向GitHub 提交代码」"></a><a href="http://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&amp;mid=2650661821&amp;idx=1&amp;sn=c6116ed82bff2d083bb152fbd8cbc38d&amp;scene=21#wechat_redirect" target="_blank" rel="external">从0开始学习 GitHub 系列之「向GitHub 提交代码」</a></h6><h6 id="从0开始学习-GitHub-系列之「Git-进阶」-1"><a href="#从0开始学习-GitHub-系列之「Git-进阶」-1" class="headerlink" title="从0开始学习 GitHub 系列之「Git 进阶」"></a><a href="http://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&amp;mid=2650661929&amp;idx=1&amp;sn=69e00516a30723c5a20af3c7a84173a4&amp;scene=21#wechat_redirect" target="_blank" rel="external">从0开始学习 GitHub 系列之「Git 进阶」</a></h6><h6 id="从0开始学习-GitHub-系列之「团队合作利器-Branch」"><a href="#从0开始学习-GitHub-系列之「团队合作利器-Branch」" class="headerlink" title="从0开始学习 GitHub 系列之「团队合作利器 Branch」"></a><a href="http://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&amp;mid=2650661978&amp;idx=1&amp;sn=2f5329f5b2bfda7050822cc5e3a4f03f&amp;scene=21#wechat_redirect" target="_blank" rel="external">从0开始学习 GitHub 系列之「团队合作利器 Branch」</a></h6><h6 id="从0开始学习-GitHub-系列之「如何发现优秀的开源项目」"><a href="#从0开始学习-GitHub-系列之「如何发现优秀的开源项目」" class="headerlink" title="从0开始学习 GitHub 系列之「如何发现优秀的开源项目」"></a><a href="http://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&amp;mid=2650662079&amp;idx=1&amp;sn=65605f0d9bd741d38f0b179980dc09f1&amp;scene=21#wechat_redirect" target="_blank" rel="external">从0开始学习 GitHub 系列之「如何发现优秀的开源项目」</a></h6><h6 id="从0开始学习-GitHub-系列之「GitHub-常见的几种操作」"><a href="#从0开始学习-GitHub-系列之「GitHub-常见的几种操作」" class="headerlink" title="从0开始学习 GitHub 系列之「GitHub 常见的几种操作」"></a><a href="http://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&amp;mid=2650662303&amp;idx=1&amp;sn=3df7cba7cd85b33a82b4c05bb12cfff5&amp;chksm=87d138c0b0a6b1d6140da9bab6e58c6e2b258de6118175d31c1ac467b3c58bc1a7c0b1a7db9b&amp;scene=0#wechat_redirect" target="_blank" rel="external">从0开始学习 GitHub 系列之「GitHub 常见的几种操作」</a></h6><h6 id="如何选择开源许可证？"><a href="#如何选择开源许可证？" class="headerlink" title="如何选择开源许可证？"></a><a href="http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html" target="_blank" rel="external">如何选择开源许可证？</a></h6><p></p><h3 id="mvp">MVP</h3><a href="#tags">点击此处回到Tags</a><p></p>
<h6 id="从零开始的Android新项目3-MVPVM-in-Action-谁告诉你MVP和MVVM是互斥的"><a href="#从零开始的Android新项目3-MVPVM-in-Action-谁告诉你MVP和MVVM是互斥的" class="headerlink" title="从零开始的Android新项目3 - MVPVM in Action, 谁告诉你MVP和MVVM是互斥的"></a><a href="http://blog.zhaiyifan.cn/2016/03/16/android-new-project-from-0-p3/" target="_blank" rel="external">从零开始的Android新项目3 - MVPVM in Action, 谁告诉你MVP和MVVM是互斥的</a></h6><h6 id="todo-mvp–Google官方MVP推荐写法"><a href="#todo-mvp–Google官方MVP推荐写法" class="headerlink" title="todo-mvp–Google官方MVP推荐写法"></a><a href="https://github.com/googlesamples/android-architecture/tree/todo-mvp/" target="_blank" rel="external">todo-mvp–Google官方MVP推荐写法</a></h6><h6 id="一步一步实现Android的MVP框架"><a href="#一步一步实现Android的MVP框架" class="headerlink" title="一步一步实现Android的MVP框架"></a><a href="http://mp.weixin.qq.com/s?__biz=MzA3NTYzODYzMg==&amp;mid=2653577546&amp;idx=1&amp;sn=e10be159645a3aa8f6d6f209420fb412&amp;scene=0#wechat_redirect" target="_blank" rel="external">一步一步实现Android的MVP框架</a></h6><h6 id="Android官方MVP架构示例项目解析"><a href="#Android官方MVP架构示例项目解析" class="headerlink" title="Android官方MVP架构示例项目解析"></a><a href="http://mp.weixin.qq.com/s?__biz=MzA3ODg4MDk0Ng==&amp;mid=403539764&amp;idx=1&amp;sn=d30d89e6848a8e13d4da0f5639100e5f#rd" target="_blank" rel="external">Android官方MVP架构示例项目解析</a></h6><h6 id="MVP-实现的-Android-基础项目架构"><a href="#MVP-实现的-Android-基础项目架构" class="headerlink" title="MVP 实现的 Android 基础项目架构"></a><a href="https://github.com/xitu/gold-miner/blob/master/TODO/android-basic-project-architecture-for-mvp.md" target="_blank" rel="external">MVP 实现的 Android 基础项目架构</a></h6><h6 id="如何设计MVP中的Presentation层"><a href="#如何设计MVP中的Presentation层" class="headerlink" title="如何设计MVP中的Presentation层"></a><a href="http://blog.chengdazhi.com/index.php/115" target="_blank" rel="external">如何设计MVP中的Presentation层</a></h6><h6 id="解读Android官方MVP项目单元测试"><a href="#解读Android官方MVP项目单元测试" class="headerlink" title="解读Android官方MVP项目单元测试"></a><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2016/0425/4178.html" target="_blank" rel="external">解读Android官方MVP项目单元测试</a></h6><h6 id="google官方架构MVP解析与实战-（从零开始搭建android框架系列（3））"><a href="#google官方架构MVP解析与实战-（从零开始搭建android框架系列（3））" class="headerlink" title="google官方架构MVP解析与实战-（从零开始搭建android框架系列（3））"></a><a href="http://www.jianshu.com/p/569ab68da482" target="_blank" rel="external">google官方架构MVP解析与实战-（从零开始搭建android框架系列（3））</a></h6><h6 id="T-MVP：泛型深度解耦下的MVP大瘦身"><a href="#T-MVP：泛型深度解耦下的MVP大瘦身" class="headerlink" title="T-MVP：泛型深度解耦下的MVP大瘦身"></a><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2016/0513/4260.html" target="_blank" rel="external">T-MVP：泛型深度解耦下的MVP大瘦身</a></h6><h6 id="Android-MVP-Retrofit-RxJava实践小结"><a href="#Android-MVP-Retrofit-RxJava实践小结" class="headerlink" title="Android MVP+Retrofit+RxJava实践小结"></a><a href="http://wuxiaolong.me/2016/06/12/mvpRetrofitRxjava/" target="_blank" rel="external">Android MVP+Retrofit+RxJava实践小结</a></h6><h6 id="android-MVP模式介绍与实战"><a href="#android-MVP模式介绍与实战" class="headerlink" title="android MVP模式介绍与实战"></a><a href="http://dahei.me/2016/06/22/mvp/android%20MVP%E6%A8%A1%E5%BC%8F%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%9E%E6%88%98/" target="_blank" rel="external">android MVP模式介绍与实战</a></h6><h6 id="（Basic框架）Android中实现mvp模式的新思路"><a href="#（Basic框架）Android中实现mvp模式的新思路" class="headerlink" title="（Basic框架）Android中实现mvp模式的新思路"></a><a href="http://www.jianshu.com/p/31a202c0c264" target="_blank" rel="external">（Basic框架）Android中实现mvp模式的新思路</a></h6><h6 id="android-MVP-架构思路"><a href="#android-MVP-架构思路" class="headerlink" title="android MVP 架构思路"></a><a href="http://mp.weixin.qq.com/s?__biz=MzI1MjMyOTU2Ng==&amp;mid=2247483865&amp;idx=1&amp;sn=28d3c2f12138e5db0b0245efb1825d4f#rd" target="_blank" rel="external">android MVP 架构思路</a></h6><p></p><h3 id="kaiyuanxiangmu">开源项目</h3><a href="#tags">点击此处回到Tags</a><p></p>
<h6 id="GitHub-Top-100的Android开源库"><a href="#GitHub-Top-100的Android开源库" class="headerlink" title="GitHub Top 100的Android开源库"></a><a href="http://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&amp;mid=402675429&amp;idx=1&amp;sn=ba3afd2069004b220eaa8a77fdecbaf7#rd" target="_blank" rel="external">GitHub Top 100的Android开源库</a></h6><h6 id="GitHub-排名前-100-的安卓、iOS项目简介"><a href="#GitHub-排名前-100-的安卓、iOS项目简介" class="headerlink" title="GitHub 排名前 100 的安卓、iOS项目简介"></a><a href="http://www.devstore.cn/essay/essayInfo/6485.html" target="_blank" rel="external">GitHub 排名前 100 的安卓、iOS项目简介</a></h6><h6 id="Facebook开源软件列表"><a href="#Facebook开源软件列表" class="headerlink" title="Facebook开源软件列表"></a><a href="http://mp.weixin.qq.com/s?__biz=MzA5Nzc4OTA1Mw==&amp;mid=2659597383&amp;idx=1&amp;sn=a867ee13f294d38d02313a4c58d3da48&amp;scene=1&amp;srcid=06056GdF0vD6Jp3k7AfdizSn&amp;from=groupmessage&amp;isappinstalled=0#wechat_redirect" target="_blank" rel="external">Facebook开源软件列表</a></h6><h6 id="那些酷炫的RecyclerView开源库整理-1"><a href="#那些酷炫的RecyclerView开源库整理-1" class="headerlink" title="那些酷炫的RecyclerView开源库整理"></a><a href="http://www.jianshu.com/p/154891851fe2" target="_blank" rel="external">那些酷炫的RecyclerView开源库整理</a></h6><h6 id="Android-开源项目分类汇总"><a href="#Android-开源项目分类汇总" class="headerlink" title="Android 开源项目分类汇总"></a><a href="https://github.com/Trinea/android-open-project" target="_blank" rel="external">Android 开源项目分类汇总</a></h6><h6 id="Android-开源项目源码解析"><a href="#Android-开源项目源码解析" class="headerlink" title="Android 开源项目源码解析"></a><a href="https://github.com/android-cn/android-open-project-analysis" target="_blank" rel="external">Android 开源项目源码解析</a></h6><h6 id="Android开源项目大全之工具库"><a href="#Android开源项目大全之工具库" class="headerlink" title="Android开源项目大全之工具库 "></a><a href="http://www.neast.cn/forum.php?mod=viewthread&amp;tid=5487" target="_blank" rel="external">Android开源项目大全之工具库 </a></h6><h6 id="GitHub开源项目总结"><a href="#GitHub开源项目总结" class="headerlink" title="GitHub开源项目总结"></a><a href="http://neast.cn/forum.php?mod=viewthread&amp;tid=5377" target="_blank" rel="external">GitHub开源项目总结</a></h6><h6 id="Android开发人员不得不收集的代码"><a href="#Android开发人员不得不收集的代码" class="headerlink" title="Android开发人员不得不收集的代码"></a><a href="https://github.com/Blankj/AndroidUtilCode/blob/master/README-CN.md" target="_blank" rel="external">Android开发人员不得不收集的代码</a></h6><p></p><h3 id="linux">Linux</h3><a href="#tags">点击此处回到Tags</a><p></p>
<ul>
<li><h4 id="Blogs-2"><a href="#Blogs-2" class="headerlink" title="Blogs"></a>Blogs</h4><h6 id="非常全面的Linux知识点总结"><a href="#非常全面的Linux知识点总结" class="headerlink" title="非常全面的Linux知识点总结"></a><a href="http://www.codeceo.com/article/linux-tips.html" target="_blank" rel="external">非常全面的Linux知识点总结</a></h6><h6 id="我是如何学习Linux的"><a href="#我是如何学习Linux的" class="headerlink" title="我是如何学习Linux的"></a><a href="https://www.sdk.cn/news/3230" target="_blank" rel="external">我是如何学习Linux的</a></h6><h6 id="Linux中查找命令总结"><a href="#Linux中查找命令总结" class="headerlink" title="Linux中查找命令总结"></a><a href="http://www.36nu.com/post/124.html" target="_blank" rel="external">Linux中查找命令总结</a></h6><h6 id="ubuntu-工具-–-5分钟入手Terminator"><a href="#ubuntu-工具-–-5分钟入手Terminator" class="headerlink" title="ubuntu 工具 – 5分钟入手Terminator"></a><a href="http://www.jianshu.com/p/cee2de32ca28" target="_blank" rel="external">ubuntu 工具 – 5分钟入手Terminator</a></h6></li>
<li><h4 id="视频-2"><a href="#视频-2" class="headerlink" title="视频"></a>视频</h4><h6 id="Linux服务器基础"><a href="#Linux服务器基础" class="headerlink" title="Linux服务器基础"></a><a href="http://study.163.com/course/introduction.htm?courseId=788001#/courseDetail" target="_blank" rel="external">Linux服务器基础</a></h6></li>
</ul>
<p></p><h3 id="xiaolv">效率工具</h3><a href="#tags">点击此处回到Tags</a><p></p>
<h6 id="Android-Pixel计算器"><a href="#Android-Pixel计算器" class="headerlink" title="Android Pixel计算器"></a><a href="http://angrytools.com/android/pixelcalc/?winzoom=1" target="_blank" rel="external">Android Pixel计算器</a></h6><h6 id="有了这10款逆天级效率工具，每天提前下班2小时-DEMO8年度产品盘点"><a href="#有了这10款逆天级效率工具，每天提前下班2小时-DEMO8年度产品盘点" class="headerlink" title="有了这10款逆天级效率工具，每天提前下班2小时!#DEMO8年度产品盘点#"></a><a href="http://www.jianshu.com/p/a3312f1c7068" target="_blank" rel="external">有了这10款逆天级效率工具，每天提前下班2小时!#DEMO8年度产品盘点#</a></h6><h6 id="ClassyShark——apk分析利器"><a href="#ClassyShark——apk分析利器" class="headerlink" title="ClassyShark——apk分析利器"></a><a href="https://mp.weixin.qq.com/s/zieCldmExPYr_-9V6zKC3A" target="_blank" rel="external">ClassyShark——apk分析利器</a></h6><h6 id="Au开发者工具"><a href="#Au开发者工具" class="headerlink" title="Au开发者工具"></a><a href="http://eiyou.us/" target="_blank" rel="external">Au开发者工具</a></h6><p></p><h3 id="appium">Appium</h3><a href="#tags">点击此处回到Tags</a><p></p>
<h6 id="Appium-简明教程-持续更新"><a href="#Appium-简明教程-持续更新" class="headerlink" title=" Appium 简明教程 (持续更新)"></a><a href="https://testerhome.com/topics/1045" target="_blank" rel="external"> Appium 简明教程 (持续更新)</a></h6><h6 id="阿里云测Appium文档"><a href="#阿里云测Appium文档" class="headerlink" title="阿里云测Appium文档"></a><a href="https://mqc.aliyun.com/doc.htm?id=15" target="_blank" rel="external">阿里云测Appium文档</a></h6><h6 id="Appium官方Tutorial"><a href="#Appium官方Tutorial" class="headerlink" title="Appium官方Tutorial"></a><a href="http://appium.io/slate/en/tutorial/android.html?java#" target="_blank" rel="external">Appium官方Tutorial</a></h6><h6 id="Windows下部署Appium教程（Android-App自动化测试框架搭建）"><a href="#Windows下部署Appium教程（Android-App自动化测试框架搭建）" class="headerlink" title="Windows下部署Appium教程（Android App自动化测试框架搭建）"></a><a href="https://my.oschina.net/outcat/blog/491529" target="_blank" rel="external">Windows下部署Appium教程（Android App自动化测试框架搭建）</a></h6><h6 id="Appium常用方法介绍"><a href="#Appium常用方法介绍" class="headerlink" title="Appium常用方法介绍"></a><a href="http://blog.csdn.net/birdlee0524/article/details/52461347" target="_blank" rel="external">Appium常用方法介绍</a></h6><p></p><h3 id="kuangjia">框架</h3><a href="#tags">点击此处回到Tags</a><p></p>
<h6 id="Android通用流行框架大全"><a href="#Android通用流行框架大全" class="headerlink" title="Android通用流行框架大全"></a><a href="https://segmentfault.com/a/1190000005073746" target="_blank" rel="external">Android通用流行框架大全</a></h6><h6 id="Android开发常用开源框架推荐"><a href="#Android开发常用开源框架推荐" class="headerlink" title="Android开发常用开源框架推荐"></a><a href="http://www.jianshu.com/p/deb55cf2f0c1" target="_blank" rel="external">Android开发常用开源框架推荐</a></h6><h6 id="android-architecture-Google-官方推荐架构写法"><a href="#android-architecture-Google-官方推荐架构写法" class="headerlink" title="android-architecture(Google 官方推荐架构写法)"></a><a href="https://github.com/googlesamples/android-architecture/tree/master" target="_blank" rel="external">android-architecture(Google 官方推荐架构写法)</a></h6><h6 id="ButterKnife-view注入框架"><a href="#ButterKnife-view注入框架" class="headerlink" title="ButterKnife-view注入框架"></a><a href="http://stormzhang.com/openandroid/android/2014/01/12/android-butterknife/" target="_blank" rel="external">ButterKnife-view注入框架</a></h6><h6 id="LeakCanary-中文使用说明"><a href="#LeakCanary-中文使用说明" class="headerlink" title="LeakCanary 中文使用说明"></a><a href="https://www.liaohuqiu.net/cn/posts/leak-canary-read-me/" target="_blank" rel="external">LeakCanary 中文使用说明</a></h6><p></p><h3 id="mantan">技术漫谈</h3><a href="#tags">点击此处回到Tags</a><p></p>
<h6 id="Android学习之路-stormzhang"><a href="#Android学习之路-stormzhang" class="headerlink" title="Android学习之路 - stormzhang"></a><a href="http://stormzhang.com/android/2014/07/07/learn-android-from-rookie/" target="_blank" rel="external">Android学习之路 - stormzhang</a></h6><h6 id="假如时光能够倒流，-我会这么学习Java"><a href="#假如时光能够倒流，-我会这么学习Java" class="headerlink" title="假如时光能够倒流， 我会这么学习Java"></a><a href="http://mp.weixin.qq.com/s/3Yu-A_k-NznTGv-JTlDjRA" target="_blank" rel="external">假如时光能够倒流， 我会这么学习Java</a></h6><h6 id="如何自学Android编程？"><a href="#如何自学Android编程？" class="headerlink" title="如何自学Android编程？"></a><a href="http://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&amp;mid=402135493&amp;idx=1&amp;sn=c2e040f95551082cbe2bdf7182dc3e9f&amp;scene=21#wechat_redirect" target="_blank" rel="external">如何自学Android编程？</a></h6><h6 id="如何自学Android"><a href="#如何自学Android" class="headerlink" title="如何自学Android"></a><a href="https://segmentfault.com/a/1190000005059402" target="_blank" rel="external">如何自学Android</a></h6><h6 id="一个2年安卓开发者的一些忠告"><a href="#一个2年安卓开发者的一些忠告" class="headerlink" title="一个2年安卓开发者的一些忠告"></a><a href="http://jcodecraeer.com/a/anzhuokaifa/androidkaifa/2016/1006/6659.html" target="_blank" rel="external">一个2年安卓开发者的一些忠告</a></h6><h6 id="如何自学Android-技术文摘-LUPA开源社区"><a href="#如何自学Android-技术文摘-LUPA开源社区" class="headerlink" title="如何自学Android - 技术文摘 - LUPA开源社区"></a><a href="http://www.lupaworld.com/article-258258-1.html" target="_blank" rel="external">如何自学Android - 技术文摘 - LUPA开源社区</a></h6><h6 id="程序员之路-学习经验总结分享"><a href="#程序员之路-学习经验总结分享" class="headerlink" title="程序员之路-学习经验总结分享"></a><a href="http://blog.csdn.net/cjpx00008/article/details/55252916" target="_blank" rel="external">程序员之路-学习经验总结分享</a></h6><h6 id="关于Java-初学者需要知道的10件事"><a href="#关于Java-初学者需要知道的10件事" class="headerlink" title="关于Java 初学者需要知道的10件事"></a><a href="https://mp.weixin.qq.com/s/3nuEQP8Wz6MO7QSp2Xbp2A" target="_blank" rel="external">关于Java 初学者需要知道的10件事</a></h6><p></p><h3 id="qita">其他收集类GitHub地址</h3><a href="#tags">点击此处回到Tags</a><p></p>
<h6 id="Andriod-collect-blogs"><a href="#Andriod-collect-blogs" class="headerlink" title="Andriod-collect-blogs"></a><a href="https://github.com/ZQiang94/Andriod-collect-blogs" target="_blank" rel="external">Andriod-collect-blogs</a></h6><h6 id="Android开发资源汇总整理"><a href="#Android开发资源汇总整理" class="headerlink" title="Android开发资源汇总整理"></a><a href="https://github.com/MobDevGroup/AndroidDevelopmentTutorial" target="_blank" rel="external">Android开发资源汇总整理</a></h6><h6 id="Android-学习资料收集"><a href="#Android-学习资料收集" class="headerlink" title="Android 学习资料收集"></a><a href="https://github.com/Freelander/Android_Data" target="_blank" rel="external">Android 学习资料收集</a></h6><p><br>ikook<br>2017.02.21</p>
]]></content>
      
        <categories>
            
            <category> 技术栈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> Git </tag>
            
            <tag> 常用技术 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我的 2016， 展望 2017]]></title>
      <url>/2017/01/07/old2016_new2017/</url>
      <content type="html"><![CDATA[<blockquote>
<p>2016匆匆过去，2017仍在路上。</p>
</blockquote>
<a id="more"></a>
<h2 id="我的-2016"><a href="#我的-2016" class="headerlink" title="我的 2016"></a>我的 2016</h2><h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><p>今年最大的收获莫过于此了，是 Android 让我真正走上技术这条路。虽说以后不一定绝对会走 Android，但它可以说是我技术路上的指明灯，让我真正爱上编程。我相信我会在 Android 路上越走越远，希望自己也可以为 Android 贡献一份力。开源的项目一个大特点就是所有程序员都可以参与到创作上，为这个项目献出一份力。</p>
<p>这一年可以说学习 Android 的时间最多，虽说这期间有很长一段时间有过间断。2015 年年末，基本上玩了一学期的我，突然兴致来袭，想要学习一下 java。所以就在网上找了套视频教程，一直到 2016 年年初，java 算是入门。2016 年上半年，也就是大一下学期，因为参加了学校的移动互联网大赛，要做一个 App，所以就接触到了 Android。由于自己学了 java， Android 入门起来还算顺利，我的入门书籍是郭神的《第一行代码》，可以说是这本书让我入了 Android 的门，期间关注了 stormzhang 的公号，也可以说是 stormzhang 让我热爱上了 Android。因为比赛，系统学习 Android 差不多有2个月的时间，期间都是靠自学，自己摸索，踩了很多坑，进步很慢。</p>
<p>后面因为其他事情停止了学习，暑假又因为比赛拾起 Android，齐鲁软件大赛。到作品完成差不多用了 20 天左右。之后，觉得自己应该好好的系统学习一下 Android 了，就系统学习了《Android 权威编程指南》一书，花了差不多也得20天左右。大二上学期自己就在网上看一些视频、博客来提高自己觉得薄弱的地方，期间也学了点别的东西。10月中旬左右学校通知有个全国软件测试大赛很有分量，所以就决定先放下 Android，来弄这个比赛，再加上期末考试，就到了现在。</p>
<p>从大一上学期漫无目的的玩，到大一下学期接触到 Android，再到大二上学期彻底被技术所吸引。这个过程可以说是幸运的，这对我未来的发展产生了很大的影响。</p>
<h3 id="我的侄子"><a href="#我的侄子" class="headerlink" title="我的侄子"></a>我的侄子</h3><p>这一年，对我一家来说很重要的事情就是：我的哥哥、嫂子有了儿子，我爸妈有了孙子，我有了侄子。这对我家产生了很大的影响，可以说是翻天覆地的。自从有了小侄子，我家的生活方式彻底变了个样，全家人都围着小侄子转，全家人的目光都投到了小侄子身上，家里多了更多的欢声笑语，在爸妈脸上可以看到更多幸福的目光、看到更多的笑容。</p>
<p>这无疑是很重要的，他的到来，使家庭更加和睦；使家庭有了更多的欢声笑语；使爸妈少了嘴上的争吵、多了一份欢笑和爱，对孙子的爱，也让我看到了他们对我的爱；使哥哥多了一份责任，家庭的重担，他不得不承担起来，孩子未来的发展，孩子生活的好与坏；使我多了一份成熟，让我感受到自己已不是那个陪在妈妈身边的孩子，而是一个大人，我应该成熟起来，为家庭贡献一份力，努力学习、工作。</p>
<p>昨日，农历腊月初九，侄子的生日，家里请了师傅，炖了个鸡，晚上一家人还吃了蛋糕，唯独我没有在家。哥哥发来照片，看到家里这样幸福美满，我倍感高兴，虽说自己不能陪在家人身边，孩子的陪伴能使他们幸福很好，我不在依然会美好。</p>
<p>侄子，他到来使我们的家庭有了质的变化，他到来使生活更加美好，使日子变得丰富，使家庭充斥欢笑。</p>
<p>望，侄子健健康康的成长。</p>
<h3 id="我的她"><a href="#我的她" class="headerlink" title="我的她"></a>我的她</h3><p>我们，这一年基本时刻都陪伴在彼此身边。我想世间最幸福的事莫过于此了吧，一起上课，一起吃饭，一起生活在一块，哈哈。今年，我们在一起已经三年了。这一年不易，我们争吵偏多，不过都从未想多放弃，依然坚守着彼此，这也许就是所谓的不离不弃吧。我为自己能拥有这样的感情、能拥有这样的伴侣感到自豪。</p>
<p>三年一路走来，从异地恋到一起奋战高考再到相守彼此身边。这一路走的真是崎岖，这三年我的生活发生了翻天覆地的变化，我在外打工，为了所谓的感情回到了校园，又为了所谓的感情一起奋斗到高考，我们上了同一所大学，虽说不是什么好大学，不过既然在一起就不要要求太多了，是吧，哈哈。是她，是我们的感情，让我相信了所谓的爱情。真的是很强大呦，哈哈，我在赤裸裸的秀恩爱，好吧，别打我。</p>
<p>这一年，由于自己搞技术较多，参加比赛之类的较多，导致自己没陪她多久，有时候甚至于一天也说不了多少话，这可能就是搞技术的坏处吧，一旦弄起来真的没时间。但她从来都没有半句怨言，很多时候都是陪我到深夜，实在困得不行才去睡。实在很对不起她，没有抽时间好好陪陪她，真是倍感愧疚。虽她嘴上说没事，但是女孩子谁又不想自己的男友多陪陪自己呢，说是无所谓那是假话，如果真的是无所谓，好吧，那就真无所谓了。</p>
<p>谢谢你的一路陪伴，让我陪感欣慰，16 年没能好好陪你，17 年定会规划出一定时间陪你玩耍。</p>
<h3 id="我的改变与感悟"><a href="#我的改变与感悟" class="headerlink" title="我的改变与感悟"></a>我的改变与感悟</h3><p>这一年虽说没什么大事发生，自己的技术也没什么大的发展，然而这一年来我仍有不少的改变与感悟</p>
<ul>
<li><strong>技术</strong><br><br>技术驱动生活质量，让我认识了技术的重要性，一个人有一技在身是多么重要。和自己的发展、生活质量有必然的关联性。<br>我认识了技术的重要性，这一年我最大的改变可以说就是在技术方面。<br><br></li>
<li><strong>认清自己</strong><br><br>没记错的话，stormzhang 在他的年终总结中也有提到过这一条。”人总是会额外的高看自己，取得点小小的成就就觉得自己很了不起，很容易被冲昏头脑，阻碍自己的判断力。” 这是他提到的，是的，人很容易就迷失自己，哪怕是小小的成就也会很容易的冲昏头脑。<br><br>记得我自己在学习 Android 过程中曾做出过点小小的小东西，但就是这点小东西让我觉得自己很牛逼，觉得自己的技术很牛逼之类的，其实并非这样。就是这点成就差点就让我迷失自我，停止在技术上的发展，止于眼前。之后我在网上接触的大牛越来越多，才知道天外有天，比自己厉害的人有的是，别人都还在学习，自己又有何颜面觉得自己牛逼。再加上北京之行，更加让我懂得了认清自己的重要性，世界很大，应该出去看看，找找差距。不要太过自信，太自信，容易变成自负。<br><br>自信是好的品质，但是不能过于自信，自信过火变自负，学会认清自己才能长久的发展。</li>
</ul>
<h2 id="展望2017"><a href="#展望2017" class="headerlink" title="展望2017"></a>展望2017</h2><p>16年，这一年的点点滴滴改变了我，我可以认为 16 年是自己的转折年，从无知到认知自己。来展望一下 17。</p>
<h3 id="学习方面"><a href="#学习方面" class="headerlink" title="学习方面"></a>学习方面</h3><ul>
<li><strong>继续 Android 之行</strong><br><br>自己的水平自己知道，我在 Android 方面欠缺的还太多了。一定要拿出时间来再系统的学习一下基础知识，然后就是进阶的知识，再就是做一些小东西，在实战中提高自己。阅读几本 Android 书籍，将书中程序认真弄明白，敲一遍。<br><br></li>
<li><strong>java</strong><br><br>java web、java ee。都要好好学，对自己的发展很重要，自己对后端还是很感兴趣的，将 java 这门语言学好，再去学习其他的语言也就会相对轻松许多，语言基本都是相通的。所以一定要把 java 学好。<br><br></li>
<li><strong>React Native</strong><br><br>学习一下跨平台移动开发工具 React Native（Android版）。感觉现在掌握一门跨平台技术挺重要的。所以接触接触，入门一下，学习一下。哈哈。<br><br></li>
<li><strong>英语</strong><br><br>我的英语水平真的是难以恭维，可以用一塌糊涂来形容，一点都不为过。上大学之前，我的英语水平是，除去26个字母别的东西啥也不会，真的，没有看错，就是这样。高考英语 40 多分，山东英语总分是 150。可以，完全是蒙的，当然，也偷看了别人几眼，哈哈。<br><br>由于接触了软件技术，接触了编程，所以自己不得不去接触英语了，也没有太刻意的去学习英语，编程学习过程中遇到不会的单词就去查，到现在也认识了一些单词，基本的差不多可以看懂了，我对象说我开窍了，哈哈。之前的水平太差了，不对，没有水平可言。所以 17 年一定要做的事情就是学习英语。每周至少 5 天都必须拿出 30 分钟以上的时间来学习英语。无论发生什么事，必须坚持下去！！！<br><br></li>
<li><strong>实习</strong><br><br>最好能够找个实习。可是前几天问老师实习情况的时候，得知，大三上学期不能够去企业实习，只能够企业培训或者在校做企业实习项目。真是苦逼，真心想找个实习锻炼下自己。到时候视情况而定，最好找机会去找个实习工作。锻炼下自己还是蛮不错的。<br><br></li>
<li><strong>阅读</strong><br><br>坚持阅读，自己的阅读时间太少，一般就是看看一些公号，17年要把入手的书籍好好看看，以后阅读养成“只字不差的阅读”习惯。对，就是这样。培养阅读习惯，这是很必要的，坚持。<br><br></li>
<li><strong>博客</strong><br><br>定期总结，技术、生活等。总结自己。让更多人认识自己，建立自己的品牌。<br><br>总结。每周都要有一次总结，周六或者周天对一周的生活和学习加以总结，比如一周收藏的技术文章等。每月总结，每年总结。恩，就是这样。入手了一本“趁早”效率手册，合理的规划时间，让时间看得见。<br><br>总结不一定非要博客形式，可以别的方式。但博客不能少，坚持写博客，坚持写作，提高自己的写作能力，一项很必要的技能。</li>
</ul>
<h3 id="生活方面"><a href="#生活方面" class="headerlink" title="生活方面"></a>生活方面</h3><ul>
<li><strong>多陪女友</strong><br><br>从大一下学期学习 Android 以后到现在基本没有抽时间好好陪陪她，觉得很不好。所以，17 年必须拿出一定时间来陪她耍。<br><br></li>
<li><strong>坚持锻炼</strong><br><br>每周至少 4 天拿出 30 分钟以上的时间锻炼身体。对近两年来自己的身体状况感到担忧，很少运动和出门，手机上的运动记录基本很少超过 1000 步，最少的时候居然只记录了几十步，当然和自己有没有拿手机有关，不过出门不拿手机的情况基本没有，所以这个数据还是可以参考的。so，要为了自己和未来的自己，锻炼身体必须提到日程上来了。<br><br></li>
<li><strong>社交</strong><br><br>多接触一些新的朋友，和朋友们多联系。上大学 1 年半了，感觉自己朋友越来越少，是因为时间都用来学习了吗？想想也没有。总之，和朋友们接触的很少。所以新的一年，一定要多交朋友，多和朋友们联系。人脉很重要，基本上一个人生存靠的就是人脉，不然基本没办法活下去。</li>
</ul>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><h3 id="2017，希望以上打算都实现，希望自己在技术上有显著的进步，希望自己-17-年过的顺利。16-再见，17-你好。"><a href="#2017，希望以上打算都实现，希望自己在技术上有显著的进步，希望自己-17-年过的顺利。16-再见，17-你好。" class="headerlink" title="2017，希望以上打算都实现，希望自己在技术上有显著的进步，希望自己 17 年过的顺利。16 再见，17 你好。"></a><strong>2017，希望以上打算都实现，希望自己在技术上有显著的进步，希望自己 17 年过的顺利。16 再见，17 你好。</strong></h3><p><br>ikook<br>2017.01.07</p>
]]></content>
      
        <categories>
            
            <category> 随笔集 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 生活 </tag>
            
            <tag> 感悟 </tag>
            
            <tag> 年终总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[重建 Blog]]></title>
      <url>/2017/01/06/rebuild_blog/</url>
      <content type="html"><![CDATA[<blockquote>
<p>重新搭建起个人blog：<a href="https://ikookblog.com">https://ikookblog.com</a></p>
</blockquote>
<a id="more"></a>
<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a><strong>起因</strong></h2><p>由于参加全国软件测试大赛，导致11月份和12月上半月没时间写博客，都在弄测试和被老师拉去辅导同学。比赛之后想要写篇博客记录下的，可是由于期间重装了笔记本系统，导致博客崩塌。只怪自己一时疏忽忘记备份配置文件。。让我哭会吧，只能重新折腾了。又由于要期末考试了，一学期基本没有上课、根本没听课的我，只能临时抱佛脚了。所以打算先放一放blog 的事，一心复习。</p>
<h2 id="Material"><a href="#Material" class="headerlink" title="Material"></a>Material</h2><p>恩，事情都有两面性。虽然由于自己的失误导致不得不重新折腾blog，但是如果没有这件事，好像自己会错过使用这么好的主题的机会，那就是—— Material。这个主题给我的第一印象就是好看，简洁，爽。简洁又不失个性。我自己本身对Google非常来感，对Google推出的设计语言Material Design情有独钟，MD给我的感觉就是比iOS好看的多。交互上的设计，视觉上的设计等，让我相信Android会发展的更好，Android程序员再也不用去想如何去做一个iOS风格的Android App了。</p>
<p>今天的主题不是Android，是Material，所以来说说<a href="https://material.viosey.com/" target="_blank" rel="external">Material</a>。该主题是由一位在校大学生写了，我只能说: 服！16年下半年才上线的吧，具体时间我也不清楚，好像是国庆节后。该主题遵循Material Design设计风格，并且非常简洁大方，又不失可观赏性。喜欢的可以加入到Material阵营了，目测该主题要火。GitHub地址为：<a href="https://github.com/viosey/hexo-theme-material" target="_blank" rel="external">hexo-theme-material</a>，作者博客地址: <a href="https://blog.viosey.com/" target="_blank" rel="external">Viosey’s Blog</a>。</p>
<h2 id="填坑"><a href="#填坑" class="headerlink" title="填坑"></a><strong>填坑</strong></h2><p>今天顺便把以前遗留的一个坑给填上了。GitHub上博客的仓库主页空荡荡，没有README。并且GitHub建议填写README。如果把README.md放入到 source 文件夹，<code>hexo g</code> 生成时会被解析成 html 文件，放到 public 文件夹，生成时又会自动删除。在GitHub添加时，在本地<code>hexo g -d</code>也会自动删除(删除的原因和以上说的一样)。</p>
<p>试了很多办法，查了好久，终于解决。</p>
<p>解决方法很简单，在 source 目录下新建文件<code>README.mdown</code>，在里面写README即可。<code>hexo g</code> 会把它复制到 public 文件夹，且不会被解析成 html。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a><strong>结语</strong></h2><p>就写这么多，关于如何搭建blog，网上一搜一大些，教程多的数不过来。hexo官方文档也有说明，每个主题也都有相应说明。这里就不做这些无用功了。再说明一下，本人以前的主题是Next，该主题很好用，并且很简洁。</p>
<p><strong>推荐几篇较为完整的教程:</strong></p>
<ul>
<li><a href="https://note.leodev.me/2016/09/01/Hexo-3-1-1-Staic-Blog-Build-Guide/" target="_blank" rel="external">Hexo 3.1.1 静态博客搭建指南</a></li>
<li><a href="https://lijianchang.xyz/2016/03/16/%E5%B0%8F%E7%99%BD%E7%8B%AC%E7%AB%8B%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2-Github-Pages%E5%92%8CHexo%E7%AE%80%E6%98%8E%E6%95%99%E7%A8%8B/" target="_blank" rel="external">小白独立搭建博客-Github-Pages和Hexo简明教程</a></li>
<li><a href="https://dukecuichen.com/2016/04/08/%E5%9F%BA%E4%BA%8EHexo%E6%A1%86%E6%9E%B6-GitHub-Pages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/" target="_blank" rel="external">基于Hexo框架+GitHub Pages搭建个人博客</a></li>
<li><a href="https://material.viosey.com/" target="_blank" rel="external">Material Theme官方文档</a></li>
</ul>
<p><br>ikook<br>2017.01.06</p>
]]></content>
      
        <categories>
            
            <category> 技术栈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 常用技术 </tag>
            
            <tag> hexo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Oracle Database 12c安装教程(Windows版)]]></title>
      <url>/2016/12/11/oracle_database12c/</url>
      <content type="html"><![CDATA[<blockquote>
<p>自己在安装过程中踩了好多坑，记录一下。</p>
</blockquote>
<a id="more"></a>
<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p> 首先，要说的是为了安装Oracle Database我花费了大量的时间，在安装过程中出现了各种各样的问题。在此记录一下，以便自己总结并方便查询，同时也为各位广大朋友提供借鉴。</p>
<h1 id="Oracle数据库："><a href="#Oracle数据库：" class="headerlink" title="Oracle数据库："></a>Oracle数据库：</h1><p>Oracle Database，又名Oracle RDBMS，或简称Oracle。是甲骨文公司的一款关系数据库管理系统。它是在数据库领域一直处于领先地位的产品。可以说Oracle数据库系统是目前世界上流行的关系数据库管理系统，系统可移植性好、使用方便、功能强，适用于各类大、中、小、微机环境。它是一种高效率、可靠性好的 适应高吞吐量的数据库解决方案。</p>
<h1 id="安装："><a href="#安装：" class="headerlink" title="安装："></a>安装：</h1><ul>
<li><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ul>
<li>下载安装包：<br>首先下载Oracle Database 12c的Servers和Client压缩包到本地。这里只贴上win64位的连接地址。其他版本自行访问<a href="http://www.oracle.com/technetwork/cn/database/enterprise-edition/downloads/index.html" target="_blank" rel="external">Oracle Database 软件下载</a>进行下载。<br>Servers(服务器端)：<br><a href="http://120.52.72.22/download.oracle.com/c3pr90ntc0td/otn/nt/oracle12c/121020/winx64_12102_database_1of2.zip" target="_blank" rel="external">winx64_12102_database_1of2.zip</a><br><a href="http://download.oracle.com/otn/nt/oracle12c/121020/winx64_12102_database_2of2.zip?AuthParam=1481383491_65acf9e1231a462986564765ba630da3" target="_blank" rel="external">winx64_12102_database_2of2.zip</a><br>Client(客户端)：<br><a href="http://download.oracle.com/otn/nt/oracle12c/121020/winx64_12102_client.zip?AuthParam=1481383698_446c62928f2c93843bc7e18812ca548b" target="_blank" rel="external">winx64_12102_client.zip</a></li>
<li>解压下载好的两个压缩文件：<br>将两个压缩包解压到同一个目录下，即“database”；</li>
</ul>
</li>
</ul>
<p><img src="https://meto.chinakook.com/blog-images/ping.png" alt="datebase文件夹"></p>
<ul>
<li><h3 id="Servers安装"><a href="#Servers安装" class="headerlink" title="Servers安装"></a>Servers安装</h3><ul>
<li>以管理员的身份运行”setup.exe”进行安装：<br>软件会加载并初步校验系统是否可以达到了数据库安装的最低配置,如果达到要求,就会直接加载程序并进行下一步的安装;<br><img src="https://meto.chinakook.com/blog-images/ping2.png" alt="Paste_Image.png"></li>
<li>“配置安全更新”窗口：<br>取消“我希望通过My Oracle Support接受安全更新”，单击“下一步”；<br><img src="https://meto.chinakook.com/blog-images/ping3.png" alt="Paste_Image.png">此时可能遇到的问题：在[INS-30131] 执行安装程序验证所需的初始设置失败<br><img src="https://meto.chinakook.com/blog-images/ping4.png" alt="Paste_Image.png"><br>问题原因及解决办法：<br>1.问题：用户文件中含有中文（如你的账户名字包含汉字   C:\Users\张三）<br>解决办法：打开计算机管理——本地用户和组——用户——Administrator（右键属性）——账户已禁用（取消勾选）——确定<br><img src="https://meto.chinakook.com/blog-images/ping5.png" alt="Paste_Image.png">到此，就可以切换到Administrator用户，在Administrator用户下安装。<br>2.问题：未共享C盘<br>解决方法：打开计算机管理——共享文件夹——共享（右键“新建共享”）——下一步——（文件路径填）C:\——下一步——是——共享名C$——下一步——选中（“管理员有完全访问权限；其他管理员只有读写权限”）——完成——完成。由于大部分人都不是这个原因，这里就不上图了，并且网上有很多。</li>
<li>“安装选项”窗口<br>选择“创建和配置数据库”，单击“下一步”；<br><img src="https://meto.chinakook.com/blog-images/ping6.png" alt="Paste_Image.png"></li>
<li>选择”桌面类”还是”服务器类”<br>选择”服务器类”可以进行高级的配置,我这里选择”桌面类”,单击”下一步“，大多数情况下是选择“桌面类”，原因操作说明很清楚；<br><img src="https://meto.chinakook.com/blog-images/ping7.png" alt="Paste_Image.png"></li>
<li>创建oracle管理用户<br>这步是其他版本没有的,这个的作用就可以更安全的管理orcl,主要是防止登录win系统勿删了oracle文件，这里选择第二个”创建新windows用户“，输入用户名和口令，专门管理oracle文件的，单击”下一步“；<br><img src="https://meto.chinakook.com/blog-images/ping8.png" alt="Paste_Image.png"></li>
<li>“典型安装”窗口(安装位置)<br>选择Oracle的基目录，选择“企业版”和“默认值”并输入统一的密码为：Oracle12c，单击“下一步”;<br>注意：Oracle为了安全起见，要求密码强度比较高，你输入的密码Oracle认为不能复制,我试过了，即使简单的数字字母组合Oracle也认为是不符合).Oracle建议的标准密码组合为：小写字母+数字+大写字母，这回就合格了，当然字符长度还必须保持着Oracle 12c数据库要求的范围之内。<br><img src="https://meto.chinakook.com/blog-images/ping9.png" alt="Paste_Image.png"></li>
<li>“执行先决条件检查”窗口<br>上一步设置好了后,将进行检查，在“执行先决条件检查”窗口中，单击“下一步”；<br><img src="https://meto.chinakook.com/blog-images/ping10.png" alt="Paste_Image.png"></li>
<li>上一步检查没有问题后<br>会生成安装设置概要信息,可以保持这些设置到本地,方便以后查阅,在这步确认后,单击”安装”,数据库通过这些配置将进行整个的安装过程:注意:在安装过程中,最好将杀毒软件,安全卫士什么的都强行关闭,安装成功后重启电脑就可以了.<br><img src="https://meto.chinakook.com/blog-images/ping11.png" alt="Paste_Image.png"></li>
<li>安装过程中<br>这里是一个漫长的等待过程，切勿不小心关闭了程序，或者断电，电脑重启。<br><img src="https://meto.chinakook.com/blog-images/ping12.png" alt="Paste_Image.png"></li>
<li>创建数据库实例<br>“Database Configuration Assistant”界面,特别的长时间等待，大约半个钟头，需耐心等待；<br><img src="https://meto.chinakook.com/blog-images/ping13.png" alt="Paste_Image.png"></li>
<li>数据库实例安装成功后，会弹出口令管理,进入口令管理<br>选择“口令管理”，查看并修改以下用户：<br><strong>（1）普通管理员：SYSTEM（密码：”自己填写”）</strong><br><strong>（2）超级管理员：SYS（密码：“自己填写”）</strong><br>修改完成后，单击“确定”。 这里的口令也是需要符合oracle口令规范的，参考前面设置数据库实例口令设置方式。<br><img src="https://meto.chinakook.com/blog-images/ping14.png" alt="Paste_Image.png"></li>
<li>安装完成<br>会出现如下界面，单击“关闭”即可。<br><img src="https://meto.chinakook.com/blog-images/ping15.png" alt="Paste_Image.png"><br>至此Servers安装完毕。</li>
</ul>
</li>
<li><h3 id="Client安装："><a href="#Client安装：" class="headerlink" title="Client安装："></a>Client安装：</h3><p>Client安装非常简单，有了Servers的安装我相信Client肯定能自己装好，毕竟连我这么笨的人都装好了。因此就不再赘述了。<br>需要说明的是，在Servers安装中说到可能会遇到<strong>“在[INS-30131] 执行安装程序验证所需的初始设置失败”</strong>的问题，如果是第一种情况的话，Client也要使用Servers安装时的方法，在Administrator用户下安装。安装完成后再切换回原来用户模式下，再禁用Administrator即可。</p>
</li>
<li><h3 id="检查是否安装成功："><a href="#检查是否安装成功：" class="headerlink" title="检查是否安装成功："></a>检查是否安装成功：</h3><p>可在安装后软件中找到“SQL Plus”，后以管理员身份运行。<br>输入用户名和口令，在保证用户名和口令正确的情况下，查看是否连接，连接后输入select sysdate from dual;<br>打印出当前系统日期则说明安装完全成功。<br><img src="https://meto.chinakook.com/blog-images/ping16.png" alt="Paste_Image.png"></p>
</li>
<li><h3 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h3>以上就是Oracle Database 12c windows64位安装教程。其中部分内容来自网络借鉴。</li>
</ul>
<p><br>ikook<br>2016.12.11</p>
]]></content>
      
        <categories>
            
            <category> 技术栈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> Oracle </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[感悟，16年12月6日]]></title>
      <url>/2016/12/06/16.12.6_gnosis/</url>
      <content type="html"><![CDATA[<blockquote>
<ul>
<li><h3 id="孤独是成长中不可缺少的调味"><a href="#孤独是成长中不可缺少的调味" class="headerlink" title="孤独是成长中不可缺少的调味"></a>孤独是成长中不可缺少的调味</h3><a id="more"></a></li>
<li><h3 id="再成功的人也会寂寞"><a href="#再成功的人也会寂寞" class="headerlink" title="再成功的人也会寂寞"></a>再成功的人也会寂寞</h3></li>
<li><h3 id="和家人在一起有时也会"><a href="#和家人在一起有时也会" class="headerlink" title="和家人在一起有时也会"></a>和家人在一起有时也会</h3></li>
<li><h3 id="孤独是自己的内心"><a href="#孤独是自己的内心" class="headerlink" title="孤独是自己的内心"></a>孤独是自己的内心</h3></li>
<li><h3 id="你想要什么？需要做什么？做什么的时候你找到自己？"><a href="#你想要什么？需要做什么？做什么的时候你找到自己？" class="headerlink" title="你想要什么？需要做什么？做什么的时候你找到自己？"></a>你想要什么？需要做什么？做什么的时候你找到自己？</h3></li>
<li><h3 id="能够全心全意的快乐，充实自己的内心和精神？"><a href="#能够全心全意的快乐，充实自己的内心和精神？" class="headerlink" title="能够全心全意的快乐，充实自己的内心和精神？"></a>能够全心全意的快乐，充实自己的内心和精神？</h3></li>
<li><h3 id="想清楚，觉得对就去做。"><a href="#想清楚，觉得对就去做。" class="headerlink" title="想清楚，觉得对就去做。"></a>想清楚，觉得对就去做。</h3></li>
<li><h3 id="不要气馁，不要放弃"><a href="#不要气馁，不要放弃" class="headerlink" title="不要气馁，不要放弃"></a>不要气馁，不要放弃</h3></li>
<li><h3 id="坚持"><a href="#坚持" class="headerlink" title="坚持"></a>坚持</h3></li>
</ul>
</blockquote>
<p><br></p>
<p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=41653795&auto=1&height=66"></iframe> <br> <center> 间奏很美 </center></p>
<p><br>ikook<br>2016.12.06</p>
]]></content>
      
        <categories>
            
            <category> 随笔集 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 生活 </tag>
            
            <tag> 感悟 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git 学习总结]]></title>
      <url>/2016/10/15/git_learn/</url>
      <content type="html"><![CDATA[<p>Git是什么？ Git是目前世界上最先进的分布式版本控制系统（没有之一）。</p>
<a id="more"></a>
<p>作为一个开发者，Git 的使用基本上是必备技能了。关于 Git 的教程网上很多，我就不展开写 Git 教程了，文末会有推荐的教程链接。本文涵盖 Git 的介绍、安装和常用的命令。</p>
<h3 id="什么是-Git？"><a href="#什么是-Git？" class="headerlink" title="什么是 Git？"></a>什么是 Git？</h3><p>Git 是目前世界上最先进的分布式版本控制系统，是由 Linux 发明者 Linus 开发的一款新时代的版本控制系统。 </p>
<p><strong>那什么是版本控制系统呢？</strong></p>
<p>网络定义：版本控制（Revision control）是维护工程蓝图的标准作法，能追踪工程蓝图从诞生一直到定案的过程。此外，版本控制也是一种软件工程技巧，借此能在软件开发的过程中，确保由不同人所编辑的同一代码文件案都得到同步。是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。 </p>
<p>简单来讲，版本控制系统就是在开发过程中对我们的代码进行管理的系统。比如：为了防止代码的丢失，我们会把本地和服务器都放置一份或者多份，这时候版本控制系统就可以使本地和远程同步； 在多人协作完成一个项目时，我们需要对一份代码进行更改和管理，这时候不影响别人工作就可以同步别人的代码；代码出现 bug，对代码进行紧急的管理或者还原等等。</p>
<h3 id="Git-的安装"><a href="#Git-的安装" class="headerlink" title="Git 的安装"></a>Git 的安装</h3><p>Git 是一个版本控制系统，所以我们必须下载安装才能使用。Mac 系统是自带 Git 的，为了避免特殊情况，这里也说一下 Mac 下的安装方式。</p>
<p><strong>Linux</strong></p>
<p>通过一条「sudo apt-get install git」命令就可以直接完成 Git 的安装，非常简单。</p>
<p>可以通过命令「git –version」查看版本，如：「git version 2.14.1」</p>
<p><strong>Mac OS X</strong></p>
<p>两种安装方式。</p>
<p>1.安装 homebrew，然后通过 homebrew 安装 Git，具体方法请参考 homebrew 的文档：<a href="http://brew.sh/" target="_blank" rel="external">http://brew.sh/</a></p>
<p>2.从 AppStore 安装 Xcode，Xcode 集成了 Git，不过默认没有安装，需要运行 Xcode，选择菜单“Xcode”-&gt;“Preferences”，在弹出窗口中找到“Downloads”，选择“Command Line Tools”，点“Install”就可以完成安装了。</p>
<p><strong>Windows</strong></p>
<p>Windows 系统是默认没有安装 Git，也没有内置 Git 安装包的。需要手动下载安装。访问下载 Git 安装包：<a href="https://git-for-windows.github.io/" target="_blank" rel="external">https://git-for-windows.github.io/</a>。下载完成后默认安装即可（可以修改一下安装路径）。 </p>
<p>安装完成，在开始菜单里找到“Git”-&gt;“Git Bash”打开，出现一个类似命令行窗口的软件，就说明Git安装成功。</p>
<p>顺便说一句，Windows 是对开发最不友好的系统了，劝大家有机会果断放弃，我相信会为你的决定感到高兴的。</p>
<p>安装完成后，还需要最后一步设置，在命令行输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ git config --global user.name &quot;Your Name&quot;</div><div class="line">$ git config --global user.email &quot;email@example.com&quot;</div></pre></td></tr></table></figure></p>
<h3 id="Git-常用命令归纳"><a href="#Git-常用命令归纳" class="headerlink" title="Git 常用命令归纳"></a>Git 常用命令归纳</h3><p><strong>常用操作：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">$ git init：初始化一个仓库。 </div><div class="line"></div><div class="line">$ git add &lt;file&gt;：把文件添加到仓库。(注意：是添加到仓库，需要执行提交操作才能把文件放到仓库。本操作实际上就是把文件修改添加到暂存区) </div><div class="line"></div><div class="line">$ git commit : 把文件提交到仓库。 </div><div class="line"></div><div class="line">$ git status：查看工作区的状态。 </div><div class="line"></div><div class="line">$ git diff：查看修改的内容 </div><div class="line"></div><div class="line">$ git log：查看日志 </div><div class="line"></div><div class="line">$ git log --pretty=oneline：查看排版的日志 </div><div class="line"></div><div class="line">$ git reset --hard commit_id：回退到以前的版本。Git 中用 HEAD 表示当前版本，上一版本为HEAD^，上上版本为HEAD^^，假如为往上100版本，则可表示为：HEAD~100。 </div><div class="line"></div><div class="line">$ git reflog：查看命令历史。可用来确定要回到未来的哪个版本。 </div><div class="line"></div><div class="line">$ git reset HAED file：把暂存区的修改撤销掉，重新放回工作区。 </div><div class="line"></div><div class="line">$ git checkout --file：丢弃工作区的修改。git checkout 其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。 </div><div class="line"></div><div class="line">$ git rm file：删除一个文件。</div></pre></td></tr></table></figure></p>
<p><strong>远程操作：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">$ git remote add origin git@github.com:GitHubName/repo-name.git：关联一个 GitHub 远程库。通用结构：git remote add origin git@server-name：path/repo-name.git。 </div><div class="line"></div><div class="line">$ git push -u origin master：第一次向远程库推送 master 分支的所有内容。 </div><div class="line"></div><div class="line">$ git push origin master：向远程库推送最新修改。 </div><div class="line"></div><div class="line">$ git pull：抓取远程的新提交，保持本地和远程同步。 </div><div class="line"></div><div class="line">$ git pull origin master：把 master 分支的最新状态抓取到本地。 </div><div class="line"></div><div class="line">$ git remote -v：查看远程库信息。 </div><div class="line"></div><div class="line">$ git clone git@github.com:GitHubName/repo-name.git：将 github 项目 clone 到本地，被 clone 的项目将作为远程库。</div><div class="line"></div><div class="line">$ git checkout -b branch-name origin/branch-name：在本地创建和远程分支对应的分支，名称最好一致。 </div><div class="line"></div><div class="line">$ git branch --set-upstream branch-name origin/branch-name：建立本地分支和远程分支的关联。 </div><div class="line"></div><div class="line">$ git push origin &lt;tagname&gt;：推送某个标签到远程。 </div><div class="line"></div><div class="line">$ git push origin --tags：一次性推送全部尚未推送到远程的本地标签。 </div><div class="line"></div><div class="line">$ git push origin：refs/tags/&lt;tagname&gt;：删除远程标签。(先删除本地的标签)</div></pre></td></tr></table></figure></p>
<p><strong>分支操作：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ git branch：查看所有分支 </div><div class="line"></div><div class="line">$ git branch &lt;name&gt;：创建分支 </div><div class="line"></div><div class="line">$ git checkout &lt;neme&gt;：切换分支 </div><div class="line"></div><div class="line">$ git checkout -b &lt;name&gt;：创建+切换分支 </div><div class="line"></div><div class="line">$ git merge &lt;name&gt;：合并某个分支都当前分支 </div><div class="line"></div><div class="line">$ git branch -d &lt;name&gt;：删除分支 </div><div class="line"></div><div class="line">$ git merge --no-ff -m &quot;描述&quot; &lt;name&gt;：记录分支情况的合并分支方法。</div></pre></td></tr></table></figure></p>
<p><strong>stash 操作：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ git stash：储藏当前工作状态 </div><div class="line"></div><div class="line">$ git stash list：查看储藏的工作列表。 </div><div class="line"></div><div class="line">$ git stash apply：恢复工作状态，但恢复后stash的内容并不删除。 </div><div class="line"></div><div class="line">$ git stash drop：删除最近一次stash的内容 </div><div class="line"></div><div class="line">$ git stash clear：清空所有的stash内容。 </div><div class="line"></div><div class="line">$ git stash pop：恢复工作状态并删除相关stash内容。</div></pre></td></tr></table></figure></p>
<p><strong>标签操作：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$ git tag &lt;name&gt;：新建一个标签。 </div><div class="line"></div><div class="line">$ git tag -a &lt;tagname&gt; -m &quot;描述&quot;：新建标签并指定标签信息。 </div><div class="line"></div><div class="line">$ git tag -s &lt;tagname&gt; -m &quot;描述&quot;：PGP签名标签。 </div><div class="line"></div><div class="line">$ git tag：查看所有标签。 </div><div class="line"></div><div class="line">$ git tag -d &lt;tagname&gt;：删除一个本地标签。 </div><div class="line"></div><div class="line">$ git push origin &lt;tagname&gt;：推送某个标签到远程。 </div><div class="line"></div><div class="line">$ git push origin --tags：一次性推送全部尚未推送到远程的本地标签。 </div><div class="line"></div><div class="line">$ git push origin :refs/tags/&lt;tagname&gt;：删除远程标签。(先删除本地的标签)</div></pre></td></tr></table></figure></p>
<p>以上只是 Git 常用的命令。Git 极其强大，命令繁多，我只是总结了一些较为常用的命令。但是，以上命令就足够我们平常使用了。</p>
<h3 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h3><p>我们学习了 Git 之后，怎么才能充分使用这项技能呢？ 答案是 GitHub。</p>
<p>GitHub 是世界上最大的开(同)源(性)社区。我相信程序员没有不知道 GitHub 的了，熟练使用 GitHub 同样是程序员的必备技能。当然，Git 并不只是在 GitHub 上使用。我们在工作以后团队之间的合作、代码的管理基本上都是使用 Git。 </p>
<p>那么，Git 与 GitHub 之间有什么联系呢？ </p>
<p>Git 是一款免费、开源的分布式版本控制系统。不管是学习 GitHub，还是以后想从事编程行业，Git 都可以算是必备技能了。 </p>
<p>GitHub 主要提供基于 Git 的版本托管服务，也就是说现在 GitHub 上托管的所有项目代码都是基于 Git 来进行版本控制的，所以 Git 只是 GitHub 上用来管理项目的一个工具而已，GitHub 的功能远不止于此。所以建议去系统学习一下 GitHub。</p>
<p>GitHub 的学习资料见下。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>由于我只是学习了 Git 的基础，所以对 Git 只是初步的了解。Git 的功能非常强大，本文只是罗列出了一些常用命令。Git 绝不是两天就可以完全掌握的，但是可以学会 Git 的基本使用。常用的 Git 命令本文基本涵盖，并且工作中常用的命令就那么十几条，掌握好这十几条命令，就基本可以得心应手的使用 Git。</p>
<p>我是通过「廖雪峰」前辈的教程来学习的 Git，教程链接同样在下面。他的这份教程非常好，没有任何基础的人一样可以看得懂，这也就是我不写 Git 教程的原因了，因为没有必要，我不觉得我会比廖前辈写的好，不敢造次，但帮助盆友们做一些小总结还是可以的，也可以方便自己查看。</p>
<h3 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h3><p><strong>Git 学习资料：</strong></p>
<p>廖雪峰 Git 教程：<a href="http://t.cn/zQ6LFwE" target="_blank" rel="external">http://t.cn/zQ6LFwE</a><br>ProGit 中文版：<a href="https://git-scm.com/book/zh/v2" target="_blank" rel="external">https://git-scm.com/book/zh/v2</a><br>Git 简易指南：<a href="http://rogerdudler.github.io/git-guide/index.zh.html" target="_blank" rel="external">http://rogerdudler.github.io/git-guide/index.zh.html</a></p>
<p><strong>GitHub 学习资料：</strong></p>
<p>这里只附上 stormzhang 的教程，是一个系列，还算比较全面，值得学习。我就是通过这份教程学习的 GitHub，网上的教程也不少，大家可以自行 Google。</p>
<p>GitHub 系列教程：<br><a href="http://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&amp;mid=2650661735&amp;idx=1&amp;sn=9aceac07d272e9202d1b5294f857a5ff&amp;scene=21#wechat_redirect" target="_blank" rel="external">从0开始学习 GitHub 系列之「初识 GitHub」</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&amp;mid=2650661762&amp;idx=1&amp;sn=8282241cf7414030f4e1d315a173beb1&amp;scene=21#wechat_redirect" target="_blank" rel="external">从0开始学习 GitHub 系列之「加入 GitHub」</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&amp;mid=2650661788&amp;idx=1&amp;sn=b7c54f9b13f4e30fe151905f11c02800&amp;scene=21#wechat_redirect" target="_blank" rel="external">从0开始学习 GitHub 系列之「Git速成」</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&amp;mid=2650661821&amp;idx=1&amp;sn=c6116ed82bff2d083bb152fbd8cbc38d&amp;scene=21#wechat_redirect" target="_blank" rel="external">从0开始学习 GitHub 系列之「向GitHub 提交代码」</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&amp;mid=2650661929&amp;idx=1&amp;sn=69e00516a30723c5a20af3c7a84173a4&amp;scene=21#wechat_redirect" target="_blank" rel="external">从0开始学习 GitHub 系列之「Git 进阶」</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&amp;mid=2650661978&amp;idx=1&amp;sn=2f5329f5b2bfda7050822cc5e3a4f03f&amp;scene=21#wechat_redirect" target="_blank" rel="external">从0开始学习 GitHub 系列之「团队合作利器 Branch」</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&amp;mid=2650662079&amp;idx=1&amp;sn=65605f0d9bd741d38f0b179980dc09f1&amp;scene=21#wechat_redirect" target="_blank" rel="external">从0开始学习 GitHub 系列之「如何发现优秀的开源项目」</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzA4NTQwNDcyMA==&amp;mid=2650662303&amp;idx=1&amp;sn=3df7cba7cd85b33a82b4c05bb12cfff5&amp;chksm=87d138c0b0a6b1d6140da9bab6e58c6e2b258de6118175d31c1ac467b3c58bc1a7c0b1a7db9b&amp;scene=0#wechat_redirect" target="_blank" rel="external">从0开始学习 GitHub 系列之「GitHub 常见的几种操作」</a></p>
<p>大家也可以关注我的微信公众号「ikook」，然后后台回复「GitHub」即可获取该系列教程的 pdf 版。微信扫以下二维码即可关注。</p>
<p><br>ikook<br>2016.10.15</p>
]]></content>
      
        <categories>
            
            <category> 技术栈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
            <tag> 常用技术 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[2016MDCC移动开发者大会总结]]></title>
      <url>/2016/09/27/2016mdcc/</url>
      <content type="html"><![CDATA[<blockquote>
<p>托stormzhang张哥洪福，有幸参加MDCC大会。收获颇多，总结一番。</p>
</blockquote>
<a id="more"></a>
<h4 id="2016-11-11更："><a href="#2016-11-11更：" class="headerlink" title="2016.11.11更："></a>2016.11.11更：</h4><p> 之前参加大会后视频没有马上放出来，所以今天给大家分享一下。本来以为参加会议之后视频很快就会出来的，没有想到出来的有点慢。不过，肯定比我分享出来的要早很多。因为这段时间学习的问题，所有时间不算很充裕，更新的有点迟了，抱歉。这也算是双十一的福利吧，哈哈。<br>说明一下，MDCC大会上分享经验的都是一些大牛，视频没有前后顺序之分，都值得一看。由于不知道的原因，Android开发者峰会的视频并没有全都放出来。我知道的都在这儿了。<br>Android开发者峰会：<a href="http://edu.csdn.net/course/detail/3103" target="_blank" rel="external">微信 Tinker 热补丁实践演进之路</a><br>Android开发者峰会：<a href="http://edu.csdn.net/course/detail/3104" target="_blank" rel="external">Fresco - loading images fast</a><br>Android开发者峰会：<a href="http://edu.csdn.net/course/detail/3108" target="_blank" rel="external">Android应用性能优化经验分享</a><br>Android开发者峰会：<a href="http://edu.csdn.net/course/detail/3094" target="_blank" rel="external">滴滴国际化 Android 端演进</a></p>
<p>   ======================================我是华丽的分割线===================================</p>
<h3 id="9月22日，凌晨。托stormzhang张哥的洪福，有幸去参加2016MDCC移动开发者大会。在此特别感谢张哥，不然怎么可能有这样的机会去参加如此高逼格的会议啊。"><a href="#9月22日，凌晨。托stormzhang张哥的洪福，有幸去参加2016MDCC移动开发者大会。在此特别感谢张哥，不然怎么可能有这样的机会去参加如此高逼格的会议啊。" class="headerlink" title="9月22日，凌晨。托stormzhang张哥的洪福，有幸去参加2016MDCC移动开发者大会。在此特别感谢张哥，不然怎么可能有这样的机会去参加如此高逼格的会议啊。"></a>9月22日，凌晨。托stormzhang张哥的洪福，有幸去参加2016MDCC移动开发者大会。在此特别感谢张哥，不然怎么可能有这样的机会去参加如此高逼格的会议啊。</h3><h3 id="因为路途遥远，要提前一天踏上旅程。"><a href="#因为路途遥远，要提前一天踏上旅程。" class="headerlink" title="因为路途遥远，要提前一天踏上旅程。"></a>因为路途遥远，要提前一天踏上旅程。</h3><h3 id="9月23日，上午全体大会。"><a href="#9月23日，上午全体大会。" class="headerlink" title="9月23日，上午全体大会。"></a>9月23日，上午全体大会。</h3><p>分别由CSDN&amp;极客帮创始人——<em>蒋涛</em>、微软亚洲研究院院长——<em>刘振</em>、京东技术副总裁——<em>赵一鸿</em>、图灵机器人CEO——<em>俞志晨</em>、360智能家居总裁、360车联网CEO——<em>邓邱伟</em>演讲，有幸见到各大科技公司的领军人物甚是激动。下面大体讲解一下他们各自的议题，不做深入讨论，主要还是要讨论Android开发峰会。</p>
<ul>
<li><h4 id="从移动时代走向-AIR-智能时代——蒋涛"><a href="#从移动时代走向-AIR-智能时代——蒋涛" class="headerlink" title="从移动时代走向 AIR 智能时代——蒋涛"></a>从移动时代走向 AIR 智能时代——<em>蒋涛</em></h4>未来十年产业将进入 AIR 时代，即人工智能、IoT、AR时代。A时代的标志是AlphaGo，深度学习已彻底改变了图像识别领域；I时代的标志是软银收购ARM，2015年人均芯片拥有量为2颗，十年后将达到人均100颗；R时代的标志是PokeMon Go，且VR头显的销售会逐年呈指数式增长。</li>
<li><h4 id="智能应用的普及化——刘震"><a href="#智能应用的普及化——刘震" class="headerlink" title="智能应用的普及化——刘震"></a>智能应用的普及化——<em>刘震</em></h4>介绍在大数据的时代，分析已经成为商业成功的一个关键推动点。深厚的数学知识是人工智能的基础，海量的数据是建立良好模型的关键，然而这些构建分析所必需的条件却是大多数开发者所缺乏的。基于机器学习的人工智能和基于语境的人机交互已变为可能，刘震也结合微软认知服务的实际案例，从计算机视觉API、人脸识别API、情绪识别API、语言理解智能服务等方面多方位角度进行解读。<br>详情请访问：<a href="http://geek.csdn.net/news/detail/103401" target="_blank" rel="external">微软亚洲工程院院长刘震：智能应用的普及化</a></li>
<li><h4 id="移动时代的大数据电商技术探索与实践——赵一鸿"><a href="#移动时代的大数据电商技术探索与实践——赵一鸿" class="headerlink" title="移动时代的大数据电商技术探索与实践——赵一鸿"></a>移动时代的大数据电商技术探索与实践——<em>赵一鸿</em></h4>移动端的普及提升了碎片化时间的利用率，在家电、母婴、体育、超市方面京东移动的渗透率已近80%。这一背景下，数据的价值体现在洞察、决策、挖掘、开放，利用大数据去设计买点成为了重点。用户画像如何从静态变为动态，实现变化，是大数据的基本特点。他以“智能卖场”的例子从应用层面展示了动态数据的价值，通过京东大脑对用户行为、商品属性等大数据的挖掘，产生用户及商品画像，完成推荐预测，实现个性化选品和排序，能够有效地提升点击率和订单转化率，同时缩短用户购买路径。演讲主要围绕以下三个方面探讨：移动互联网对电商企业的挑战，移动电商的发展潜力，以及移动时代电商大数据的价值。<br>详情请访问：<a href="http://geek.csdn.net/news/detail/103490" target="_blank" rel="external">京东集团技术副总裁赵一鸿：移动时代的大数据电商技术探索与实践</a></li>
<li><h4 id="智能机器人开发关键技术——俞志晨"><a href="#智能机器人开发关键技术——俞志晨" class="headerlink" title="智能机器人开发关键技术——俞志晨"></a>智能机器人开发关键技术——<em>俞志晨</em></h4>他把智能机器人定义为：外在硬件载体＋人工智能系统和应用。他指出机器人操作层、感知层、认知层分别对应人的四肢、五官和大脑的概念。今天，智能机器人产业硬件所需要的投入要大于软件，只有产生优秀的硬件载体软件才能有意义，这涉及到各位传感器和控制单元，但这一天屏正在慢慢开始平衡。</li>
<li><h4 id="智能硬件设计及关键实现技术——邓邱伟"><a href="#智能硬件设计及关键实现技术——邓邱伟" class="headerlink" title="智能硬件设计及关键实现技术——邓邱伟"></a>智能硬件设计及关键实现技术——<em>邓邱伟</em></h4><p>他认为现在智能硬件行业整体呈高速增长状态，2015年达到300%，巨头从各个链条进入布局；而产品现状仍处于初期，缺乏联通，资本快速进入押宝智能家居；人工智能应用实用性大幅提升；在服务上，线上渠道仍为主要购买途径，而第三方服务尚却未大规模介入产业链。<br>详情请访问：<a href="http://geek.csdn.net/news/detail/103552" target="_blank" rel="external">360智能家居总裁、360车联网CEO邓邱伟：智能硬件设计及关键实现技术</a><br>以上就是全体大会的大体内容了。</p>
<h4 id="下午的技术专场说起来就有点遗憾了。"><a href="#下午的技术专场说起来就有点遗憾了。" class="headerlink" title="下午的技术专场说起来就有点遗憾了。"></a>下午的技术专场说起来就有点遗憾了。</h4><p><strong>本人对新鲜事物比较好奇，尤其是好玩的东西，听起来比较高大上的东西。比如人工智能、深度学习。由于上午各位大佬们的演讲太过于精彩，让我对人工智能提起来很大的兴趣，有一种想要立马研究一下的冲动。所以就决定先放弃预先安排的去跨平台专场，而去人工智能与机器人专场听听。因为之前没有接触过人工智能，所以听起来简直比上高数课还难受，根本不知道说的什么，因为比较感兴趣所以想继续试着听下去。听了很久之后觉悟到还是去跨平台吧，那时候离下午专场的结束还有不到一个小时的时间。真是蛮遗憾的。</strong></p>
<p>  附上跨平台技术专场的PPT及Demo，大家自行研究。<br><a href="https://github.com/MDCC2016/Cross-Platform-Session" target="_blank" rel="external">MDCC 2016跨平台开发专场的演讲 PPT 以及 Demo</a></p>
</li>
</ul>
<h3 id="9月24日，终于到了拭目以待的Android开发峰会了，此次峰会可谓大神云集，往届肯定也是，不过我没有参加也没有关注，毕竟是才走入正途。"><a href="#9月24日，终于到了拭目以待的Android开发峰会了，此次峰会可谓大神云集，往届肯定也是，不过我没有参加也没有关注，毕竟是才走入正途。" class="headerlink" title="9月24日，终于到了拭目以待的Android开发峰会了，此次峰会可谓大神云集，往届肯定也是，不过我没有参加也没有关注，毕竟是才走入正途。"></a>9月24日，终于到了拭目以待的Android开发峰会了，此次峰会可谓大神云集，往届肯定也是，不过我没有参加也没有关注，毕竟是才走入正途。</h3><h4 id="先附上一张议题和演讲嘉宾的表格："><a href="#先附上一张议题和演讲嘉宾的表格：" class="headerlink" title="先附上一张议题和演讲嘉宾的表格："></a><strong>先附上一张议题和演讲嘉宾的表格</strong>：</h4><p><img src="https://meto.chinakook.com/%5DY%603%6008GY%7D3%7B%7D%29240F2T%29CP.png" alt=""><br><br><strong>有必要重点说明的是这次Android会场的主持人是<em>秋百万（廖祜秋）</em>前辈。</strong> 他在主持的同时也讲解了不少东西，实在佩服<em>秋百万</em>前辈</p>
<ul>
<li><h2 id="滴滴国际化Android端演进——吴更新"><a href="#滴滴国际化Android端演进——吴更新" class="headerlink" title="滴滴国际化Android端演进——吴更新"></a>滴滴国际化Android端演进——<em>吴更新</em></h2><h3 id="1-国家化技术上的特殊性"><a href="#1-国家化技术上的特殊性" class="headerlink" title="1.国家化技术上的特殊性"></a>1.国家化技术上的特殊性</h3><ul>
<li><strong>地图</strong><br>  地图选型、地图切换。国内用户使用国外地图服务的限制。</li>
<li><strong>网络</strong><br>   网络的限制。由于大家众所周知的原因，国外的很多服务国内用户是不可用的，墙的原因导致漫游网络不可用， 所以         国际化面临的技术问题还是很多的。</li>
<li><strong>运力来源</strong><br>   运力的来源问题。需要与其他国家合作来提供司机，在国内只需要司机注册就可以使用，而在国外需要和其他国家的合作伙伴做接入。</li>
</ul>
<h3 id="2-地图（地图选型、地图切换）"><a href="#2-地图（地图选型、地图切换）" class="headerlink" title="2.地图（地图选型、地图切换）"></a>2.地图（地图选型、地图切换）</h3><ul>
<li><strong>地图选型</strong><br>考虑的方面很全面。主要在功能与需求，数据源，技术支持力度，性能，用户，包大小，demo和文档等方面。选取了Bing、Tomtom、Here、Nutiteq、Mapbox作为研究对象。综合分析来看Mapbox是最合适的。<br>分析如下图：<br><img src="https://meto.chinakook.com/blog-images/0.png" alt="Paste_Image.png"></li>
<li><strong>地图切换</strong><br>选型可能无法通用，随意切换。对地图切换来说，关键是要有一套自己的抽象，再对应具体的实现搞一个Adapter就行。<br>好处：解耦、通用、学习成本低<br><img src="https://meto.chinakook.com/blog-images/1.png" alt="Paste_Image.png"><br><img src="https://meto.chinakook.com/blog-images/222.png" alt="Paste_Image.png"><br>问题：Api规范、适配所有的Api、标尺（如：缩放尺度、经纬度）、未支持API<br>解决方案：<br>1.主要按照Google Map的API为标准来做标准的API、对用到Mapbox的API做完全的适配<br>2.先对初始版本的API做完整的适配，后面再对其他版本做竞争<br>3.要保持地图的缩放级别是保持不变的，以国际的标尺为准。<br>4.debug 版本抛出异常 crash，release 版本打 log。</li>
</ul>
<h3 id="3-漫游网络"><a href="#3-漫游网络" class="headerlink" title="3.漫游网络"></a>3.漫游网络</h3><p>滴滴主要服务的是国内用户去国外的情况。地图服务器是 不在AWS上面的。所以主要有海外运营商、用户依然使用国内版本的app在海外漫游的情况。主要讨论用户在海外漫游的情况。<br>国内用户在国外漫游访问国外服务器慢。<br>漫游网络，运营商，aws……<br>用户在国外访问网络的简单流程：<br>先访问海外运营商，通过海外运营商访问国内运营商，再去访问web。由于墙的存在一般用户是访问不到网络的。<br><img src="https://meto.chinakook.com/blog-images/ni.png" alt="在国外访问网络的简单流程"><br>为了解决这个问题使用了通过国内运营商去访问公网，通过公网访问AWS上的服务器。这种访问方式是比较慢的。<br><img src="https://meto.chinakook.com/blog-images/ws.png" alt="通过访问公网来获取数据"><br>为了解决访问慢的缺陷，做了网络优化。在去访问AWS的时候在中间加一个中转服务器来实现专线访问<br><img src="https://meto.chinakook.com/blog-images/qw.png" alt="专线访问"><br>对于客户端来说，访问专线网络时大概会有三步：<br>1.拉取中转服务器域名列表<br>2.对于漫游用户访问中转服务器<br>3.一定时机及推送更新域名列表<br><strong>这样做速度大概会比之前快一倍。</strong></p>
<h3 id="4-项目演进"><a href="#4-项目演进" class="headerlink" title="4.项目演进"></a>4.项目演进</h3><ul>
<li>问题<br>1.按照包名划分，仍会存在大量的耦合。<br>2.由于不同国家业务不同的原因等，添加新业务不便。<ul>
<li>解决方案<br>分SDK和业务模块，但都作为独立的Module，最后再整合成一个apk。</li>
</ul>
</li>
<li>实现技术<br>单项目依赖：按照SDK和业务模块拆分成单独的项目，单项目依赖单独的SDK。之后再整合到成一个SDK，聚合成整个的工程，再实现SDK分层。<br><img src="https://meto.chinakook.com/blog-images/xm.png" alt="单项目依赖"><br><img src="https://meto.chinakook.com/blog-images/zxm.png" alt="整个工程"><br><img src="https://meto.chinakook.com/blog-images/fc.png" alt="SDK分层"><br>使用模块划分的原则：单一、开闭原则，依赖关系，拓展规范，避免重复依赖。<br>好处：解耦，并行开发、测试，组件单独测试。<br><img src="https://meto.chinakook.com/blog-images/cb.png" alt="Paste_Image.png"><br><img src="https://meto.chinakook.com/blog-images/ip.png" alt="Paste_Image.png"><h3 id="5-现场问答"><a href="#5-现场问答" class="headerlink" title="5.现场问答"></a>5.现场问答</h3><strong>问题：Integrated Project怎么个打包法？Lyft、GradTaxi这些合并吗？还是它们会被打包成独立的apk？<br>回答：所有的module都是输出aar，最后一个整合成滴滴app。</strong><br>我讲解的可能是比较乱，同时可能也不怎么清晰，因为我自身理解的也是不怎么深刻。Piasy的视频连接：<a href="https://share.yoloyolo.tv/bcs/1224531?sign=ccab65bdcd9d4f36269aefb249d85666&amp;group_id=272492" target="_blank" rel="external">滴滴国际化 Android 端演进（包括冯老师分享的开头）</a> 有时间可以自行观看。</li>
</ul>
</li>
<li><h2 id="回归初心，从容器化到组件化——冯森林"><a href="#回归初心，从容器化到组件化——冯森林" class="headerlink" title="回归初心，从容器化到组件化——冯森林"></a>回归初心，从容器化到组件化——<em>冯森林</em></h2><p>近年来插件化，module化的原因，已经不再像过去那样，庞大的软件，改一行代码，测试，耗费开发人员较长时间（虽然我没有亲身体验过以前开发的难度，但是可想而知）。组件化作为独立模块，协同开发时，可以提供release版本进行集成。平时，只须在自己的dev分支上进行开发。大大提高开发效率。各模块之间解耦，当然这其中也面临相关的问题，如大量的反射方式。各rom厂商对系统的改动，就很容易产生各种问题。何俊林在会上请教了apk与apk数据之间如何共享的问题。冯老师建议可用contentprovider。建议在项目的早期做拆分，避免后期组件化的抽离困难。<br><img src="https://meto.chinakook.com/blog-images/ap.png" alt="Paste_Image.png"><br><strong>以我现在的能力是很难听懂冯老师这个分享的，或者说我完全听不懂这个分享。是的，完全没有听懂。<br>还是分享一下别人的理解吧。</strong></p>
<h5 id="Piasy"><a href="#Piasy" class="headerlink" title="Piasy"></a><strong>Piasy</strong></h5><p>原文链接：<a href="http://mp.weixin.qq.com/s?__biz=MzAxMjM0OTA3Nw==&amp;mid=2650203819&amp;idx=1&amp;sn=1e5a7a2ae8195d5e85b0918a96916526&amp;chksm=83b17d51b4c6f447ca4a15dc82c872a1c902c635230aee1455d63086fd435da4ba451684eda4" target="_blank" rel="external">MDCC 参会纪要</a><br>【大公司的方案，不一定符合小公司<br>模块化，从硬件，系统到软件<br>APP 的模块化</p>
<ul>
<li>隔离各个模块</li>
<li>特性：独立，可替换，可互操作</li>
<li>代价：解耦，契约，兼容性</li>
<li>从第一天开始坚持解耦，为中长期打好基础</li>
<li>独立并行开发测试，高效，快速</li>
<li>灵活的集成，发布，升级</li>
<li>64k问题</li>
<li>选择性安装，非常轻量</li>
<li>hybrid友好，web native 可切换</li>
<li>高度可扩展</li>
<li>包隔离，最简单，太宽松</li>
<li>gradle library module 隔离，有很好的工具链，构建效率低</li>
<li>多 apk，构建、安装更高效，用户体验差</li>
<li>multidex，工具链支持，弱</li>
<li>容器 droid plugin，hook 和代理，兼容性问题</li>
<li>半容器，直接合并，但需要类加载支持，轻量，兼容性好</li>
<li>activity 作为入口，提前准备好，后续开发都是 fragment。</li>
<li>activity 用 url 启动</li>
<li>禁止状态共享</li>
<li>……】这是Piasy大神的分享。</li>
</ul>
<p><strong>我自己的理解是把一个项目隔离出各个模块，使分离出的模块成为独立的、可替换的、维护性强的小项目。这样做的带来好处是解耦、兼容性、可维护性。从一开始项目就做好项目的分离工作，使其解耦，为以后打好基础。</strong></p>
<h5 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a><strong>组件化</strong></h5><ul>
<li><strong>特性</strong><br>1.独立性<br>2.可替换性<br>3.互操作性</li>
<li><strong>成本</strong><br>1.解耦<br>2.契约<br>3.兼容性</li>
<li><strong>收益</strong><br>1.强制建立一个解耦<br>2.模块的独立性<br>3.组件粒度的测试<br>4.灵活的测试<br>5.组件粒度的升级<br>6.混合开发性平滑地过渡</li>
<li><strong>基础解决方案</strong><br>1.Java package name<br>2.Gradle Library modules<br>3.multiple App<br><img src="https://meto.chinakook.com/blog-images/bs.png" alt="Paste_Image.png"></li>
<li>进一步解决方案<br>1.multi-Dex<br>2.Container<br>3.semi-Container<br><img src="https://meto.chinakook.com/blog-images/if.png" alt="Paste_Image.png"><br>由于我自己能力的限制，不能讲解清楚，所以附上Piasy的视频连接：<a href="https://share.yoloyolo.tv/bcs/1224573?sign=4358a1148993c705e4e896cd5b912c5f&amp;group_id=272492" target="_blank" rel="external">回归初心，从容器化到组件化</a></li>
</ul>
</li>
<li><h2 id="云信-IM-推送保障及网络优化实践——周江华"><a href="#云信-IM-推送保障及网络优化实践——周江华" class="headerlink" title="云信 IM 推送保障及网络优化实践——周江华"></a>云信 IM 推送保障及网络优化实践——<em>周江华</em></h2><p>现在IM应用范围很广泛，人与人要通过网络交流就离不开IM，可以说现在大多数的应用都有IM。<br>比如：社交、电商、教育、医疗等…</p>
<ul>
<li><h5 id="IM是什么"><a href="#IM是什么" class="headerlink" title="IM是什么"></a><strong>IM是什么</strong></h5><strong>Instant：</strong>有新消息能立即收到，消息推送无延迟<br><strong>Messaging：</strong>稳定可靠，安全，消息不丢，不乱，不重复</li>
<li><h5 id="怎么推"><a href="#怎么推" class="headerlink" title="怎么推"></a><strong>怎么推</strong></h5>后台运行。答案就是后台运行。</li>
<li><h5 id="LMK"><a href="#LMK" class="headerlink" title="LMK"></a>LMK</h5>需解决的问题：内存占用、进程优先级<br>方案：<br>1.Sticky Service、Alarm、Receiver、JobSchedule<br>2.建立多进程、双进程。避免使用单进程。<br><img src="https://meto.chinakook.com/blog-images/er.png" alt="Paste_Image.png"><br>SDK架构的设计<br><img src="https://meto.chinakook.com/blog-images/sd.png" alt="Paste_Image.png"></li>
<li><h5 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h5>云信IM SDK使用的连接类型有：TCP，UDP，HTTP。<br>TCP实现长连接，UDP实现一个需要加密处理的连接，HTTP实现收发文件等。<br>在复杂的Android生态环境下，多种因素都会造成消息推送不能及时达到客户端。另外，不稳定的移动网络也给数据传输的速率和可靠性增加了障碍。演讲从这两个方面出发，讲述了云信IM SDK如何实现不影响用户体验的后台保活，改善的长连接加推送组合方案，以及在弱网环境大数据传输的优化实践。<br>关于进程怎么在后台活，目前较好的解决方案包括：长连接+推送，系统推送（MIUI、华为为代表）。<br><img src="https://meto.chinakook.com/blog-images/chang.png" alt="长连接+推送"><br><img src="https://meto.chinakook.com/blog-images/chang2.png" alt="长连接+推送优化"><br><img src="https://meto.chinakook.com/blog-images/os.png" alt="系统优化"><br><img src="https://meto.chinakook.com/blog-images/os2.png" alt="系统推送优化"><br>而关于如何活好（主要问题是慢、断、贵），解决办法包括协议选择；<br>协议选择使用二进制的协议，牺牲了可读性换来的是包非常非常的小，同时拓展性也是比较好的。<br><img src="https://meto.chinakook.com/blog-images/xie.png" alt="协议选择"><br>登录加速（长连接中经常使用，步骤包括Lbs、Connect、Handshake、Login，Sync；优化思路为：尽量减少交互步骤，尽可能并行步骤）；<br>使用TCP的连接方式。<br>通过减少交互的步骤，尽可能的使用并行步骤来实现登录的加速。连接和LBS并行、捂手和登录并行。<br><img src="https://meto.chinakook.com/blog-images/deng.png" alt="登录加速"><br>UDP优化（常用于音视频服务，对弱网环境更敏感，优化包括：FEC，自适应初始化包频，动态包频和码率调整，数据缓冲Buffer，音频PLC丢包补偿，Temporal Scalability视频编码，以及视频关键帧多重保障）；<br><img src="https://meto.chinakook.com/blog-images/shi.png" alt="实时音视频优化"><br>HTTP优化（断点续传，图片预加载，pipeline，边录边传）。<br><img src="https://meto.chinakook.com/blog-images/wenjian.png" alt="文件传输优化"><br><img src="https://meto.chinakook.com/blog-images/pi.png" alt="pipeline优化"><br><img src="https://meto.chinakook.com/blog-images/bian.png" alt="边录边传"><br>周江华老师讲的还是比较清晰，内容比较丰富的，基本涵盖了IM开发所要主要的问题。由于我自身能力的限制，理解的还是比较浅显的。附上Piasy的视频连接：<a href="https://share.yoloyolo.tv/bcs/1224631?sign=4b126eaf9de530cd39095e676b5933c6&amp;group_id=272492" target="_blank" rel="external">【云信 IM 推送保障及网络优化实践上】</a><a href="https://share.yoloyolo.tv/bcs/1224642?sign=b2cbf4d2bf962aeb8502de27aa8da70b&amp;group_id=272492" target="_blank" rel="external">【云信 IM 推送保障及网络优化实践下】</a></li>
</ul>
</li>
<li><h2 id="微信Tinker热补丁实践演进之路——张绍文"><a href="#微信Tinker热补丁实践演进之路——张绍文" class="headerlink" title="微信Tinker热补丁实践演进之路——张绍文"></a><strong>微信Tinker热补丁实践演进之路</strong>——<em>张绍文</em></h2><h5 id="总体说明："><a href="#总体说明：" class="headerlink" title="总体说明："></a>总体说明：</h5><ul>
<li>这场分享听的还是比较激动的，因为亲眼见证了大腾讯开源的第一个项目。真的是很激动，开源标志着我们可以阅读源码，可以清楚的理解其框架的内部实现，真的太帮了。Tinker的开源标志着腾讯走上了开源之路，各大BAT都在走向开源。真的是拥抱开源拥抱未来啊。</li>
<li>近半年很热的hot fix技术，走过坑是在art平台，dalvik平台的差异，让全量合成技术面临挑战，最后借鉴studio install run的原理及市场实际情况，发展到目前的阶段。</li>
<li>Tinker是微信Android团队推出的开源热补丁框架，在MDCC现场，张绍文点击GitHub上的项目“公开”按钮——Tinker宣布开源！ 它可以帮助应用快速获得动态更新能力。演讲首先介绍Tinker项目的演进历程，重点分析在开发过程中遇到的问题（曾经遇到了启动耗时警报，Dex格式异常复杂）以及解决方案。然后剖析Tinker框架的核心架构设计，讲述Tinker是如何保证一致性、安全性、稳定性、高性能等关键问题。最后结合热补丁在微信的应用与实践，分享如何使用Tinker快速动态部署。目前热补丁有两大流派，Native（AndFix、KKFix）和Java。微信设计的目标是：稳定性于兼容性、性能、易用。1.0版三天成功率达到96.3%，启动耗时下降31%，补丁包大小为500KB。2.0版本（2016年2月）基于全量合并方式，Diff算法（设计目标为Diff结果小，占用内存小，合成速度快），其他技术挑战还包括Android N、Xposed、Classloader、DexDiff等。张绍文说，也许有人觉得Tinker过于臃肿，过于复杂。这是因为热补丁并不是仅仅加载一个dex或so文件，事实上它要关心的细节有很多。进程的一致性，控制可修改类的范围，版本的管理，扩展性等等。微信未来的开源计划，都以高可用为核心，除了Tinker，还有Mars和MMDB。</li>
<li>减小安装大小，对特定有问题的用户推送补丁包，获取调试信息。技术是用来解决问题的，明确需求：稳定兼容，性能，易用。</li>
<li>什么是热补丁：可以让应用无需重新安装下能够自动更新。</li>
</ul>
<h5 id="具体说明："><a href="#具体说明：" class="headerlink" title="具体说明："></a><strong>具体说明：</strong></h5><ul>
<li>热补丁两大流派：<br>1.Native：AndFix、KKFix<br>2.Java： Qzone、nuwa、rocooFix、Tinker、amigo、 robust</li>
<li>微信的设计目标<br>“高可用”的补丁框架：<br>1.稳定性与兼容性：微信数亿用户的设备上稳定运行；<br>2.性能：非补丁版本影响补丁大小；<br>3.易用性：简单易用，完整支持。</li>
<li><h4 id="1-0-小试牛刀"><a href="#1-0-小试牛刀" class="headerlink" title="1.0 小试牛刀"></a>1.0 小试牛刀</h4>基于 classloader 的方案<br>preverify 问题，内存地址错乱，性能差，补丁包大<br><img src="https://meto.chinakook.com/blog-images/t.png" alt="classloader方案"><br><img src="https://meto.chinakook.com/blog-images/t2.png" alt="V1.0-结果"></li>
<li><h4 id="2-0-自创功法"><a href="#2-0-自创功法" class="headerlink" title="2.0 自创功法"></a>2.0 自创功法</h4><ol>
<li><strong>基于全量合并方式：</strong><br>Gradle Instant run<br>Buck exopackage</li>
<li><strong>Diff算法：</strong><br>BsDiff<br>DexMerge<br>DexDiff</li>
<li><p><strong>Diff设计目标：</strong><br>Diff结果小<br>占用内存小、合成速度快<br>支持新增、删除、修改class</p>
<h5 id="Dex格式：直接上图。"><a href="#Dex格式：直接上图。" class="headerlink" title="Dex格式：直接上图。"></a>Dex格式：直接上图。</h5><p><img src="https://meto.chinakook.com/blog-images/v.png" alt="Dex格式"></p>
<h5 id="Diff方案："><a href="#Diff方案：" class="headerlink" title="Diff方案："></a>Diff方案：</h5><p><img src="https://meto.chinakook.com/blog-images/v2.png" alt="Diff方案"></p>
<ul>
<li>anr，dex 太大，分平台合成 dex，art 上合成小 dex<br><img src="https://meto.chinakook.com/blog-images/tiao.png" alt="挑战"></li>
<li>illegal access。</li>
<li>性能好，兼容性和稳定性差<br><img src="https://meto.chinakook.com/blog-images/jie.png" alt="V2.0-结果"></li>
</ul>
</li>
</ol>
</li>
<li><h4 id="3-0-修炼内功"><a href="#3-0-修炼内功" class="headerlink" title="3.0 修炼内功"></a>3.0 修炼内功</h4><p>主要在异常熔断、监控回调、安全、一致性、合成、加载方面进行优化。比较不容易理解，上图。<br><img src="https://meto.chinakook.com/blog-images/mubiao.png" alt="V3.0目标"></p>
<ul>
<li><strong>异常熔断</strong><br><img src="https://meto.chinakook.com/blog-images/duan.png" alt="异常熔断"></li>
<li><strong>监控回调</strong><br><img src="https://meto.chinakook.com/blog-images/diao.png" alt="监控回调"></li>
<li><strong>一致性</strong><br><img src="https://meto.chinakook.com/blog-images/yizhi.png" alt="一致性"></li>
<li><strong>加载与合成</strong><br><img src="https://meto.chinakook.com/blog-images/jiazai.png" alt="加载与合成"><h5 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h5><img src="https://meto.chinakook.com/blog-images/v3.png" alt="V3.0-结果"></li>
</ul>
</li>
<li><h4 id="4-0-内外兼修"><a href="#4-0-内外兼修" class="headerlink" title="4.0 内外兼修"></a>4.0 内外兼修</h4><p>提升易用性和稳定性</p>
<ul>
<li><h5 id="Library处理"><a href="#Library处理" class="headerlink" title="Library处理"></a><strong>Library处理</strong></h5>核心问题：<br>1.多API获取不准确，反射出问题<br>2.32位与64位问题<br>尽量少的hook：<br>1.LoadLibraryFromTinker(“assets/86”，“stloprt_shared”)；<br>2.LoadLibrary(“stlport_shared”);</li>
<li><h5 id="资源处理"><a href="#资源处理" class="headerlink" title="资源处理"></a><strong>资源处理</strong></h5>预埋entry count：<br>1.编译强耦合<br>2.影响基础版本<br>3.无法随心所欲<br>全量替换<br>1.Atlas或者携程的插件化框架<br>2.Gradle-instant run</li>
<li><h5 id="异常情况"><a href="#异常情况" class="headerlink" title="异常情况"></a><strong>异常情况</strong></h5>Transition动画：ResID无法新增、删除，可能出现Res not found<br>Notification：ResID无法新增、删除，可能出现Res not found<br>ShortcutResID无法新增、删除，可能会变成默认图标<br>Assets：读取 source apk方式无法修改</li>
<li><h5 id="资源问题"><a href="#资源问题" class="headerlink" title="资源问题"></a><strong>资源问题</strong></h5>直接上图<br><img src="https://meto.chinakook.com/blog-images/ziyuan.png" alt="资源包生成"><br><img src="https://meto.chinakook.com/blog-images/ziz.png" alt="资源处理-资源包生成"><br><img src="https://meto.chinakook.com/blog-images/yan.png" alt="资源处理-资源包校验"></li>
<li><h5 id="编译目标"><a href="#编译目标" class="headerlink" title="编译目标"></a><strong>编译目标</strong></h5>简单易用：<br>1.只要输入一个旧的基础包，即可生成补丁包<br>2.proguard<br>3.mainDex<br>4.日志与校验<br>灵活控制<br>1.可通过pattern灵活控制需要的内容<br>2.版本控制<br>减少补丁包<br>1.applyMapping<br>2.appyResourceMapping<br>3.force jumbo<br>4.7zip<br>…</li>
<li><h5 id="V4-0结果"><a href="#V4-0结果" class="headerlink" title="V4.0结果"></a><strong>V4.0结果</strong></h5><img src="https://meto.chinakook.com/blog-images/v4.png" alt="V4.0-结果"></li>
</ul>
<p><strong>微信开源计划</strong>：<a href="https://github.com/Tencent/tinker" target="_blank" rel="external">Tinker开源地址</a><br><strong>同样附上Piasy视频网址</strong>：<a href="https://share.yoloyolo.tv/bcs/1224654?sign=8459ca748f9dc1508a920880f2acaaf1&amp;group_id=272492" target="_blank" rel="external">微信Tinker热补丁实践演进之路</a><br><strong>YouTube上Jacks录制的网址</strong>：<a href="https://www.youtube.com/playlist?list=PLmUDvA65lNp28eLBicTEt9oOdpdnGBl9O" target="_blank" rel="external">微信 Tinker 热补丁实践演进之路——张绍文</a><br><strong>微信开发团队公号：</strong><a href="http://mp.weixin.qq.com/s?__biz=MzAwNDY1ODY2OQ==&amp;mid=2649286384&amp;idx=1&amp;sn=f1aff31d6a567674759be476bcd12549&amp;scene=0#wechat_redirect" target="_blank" rel="external">微信开发团队公号</a> (详细介绍可点击链接，非常详细的介绍，基本是按照演讲的时候介绍思路进行的)</p>
<p><strong>方案选择，最重要的依据还是我们的需求，回到初心。</strong></p>
</li>
</ul>
</li>
<li><h2 id="Fresco-loading-images-fast——王洁（Jie-Wang）"><a href="#Fresco-loading-images-fast——王洁（Jie-Wang）" class="headerlink" title="Fresco - loading images fast——王洁（Jie Wang）"></a><strong>Fresco - loading images fast</strong>——<em>王洁（Jie Wang）</em></h2><ul>
<li>我对这个框架所知甚少，在参加MDCC之前没有听说过，更别说用了。打算近期对这个Fresco图片处理框架研究一番。</li>
<li>Fresco一个目前为止非常好用的或者说是最好用的加载图片、显示图片的框架。Fresco（单词的中文含义是湿壁画）是运用于Android设备的图片加载组件，使用了Fresco就可以不必烦恼图片的加载、显示这种繁琐的问题。Fresco中设计有Image Pipeline模块。它负责从网络、从本地文件系统、本地资源加载图片。为了最大限度节省空间和CPU时间，它含有3级缓存设计（2级内存，1级磁盘）。Fresco中的Drawees模块，会在图片加载完成前显示占位图，加载成功后自动替换为目标图片。当图片不再显示在屏幕上时，会及时释放内存和空间占用。解压后的图片，即Android中的Bitmap，占用大量的内存。大的内存占用势必引发更加频繁的GC。在5.0以下，GC将会显著地引发界面卡顿。在5.0以下系统，Fresco将图片放到一个特别的内存区域。当然，在图片不显示的时候，占用的内存会自动被释放。这会使得APP更加流畅，减少因图片内存占用而引发的OOM。Fresco在低端机器上表现一样出色，再也不用因图片内存占用而思前想后。未来Fresco的目标包括：更小的库和.so，令Image Pipeline插件化等</li>
<li><strong>这里引用一段<em>秋百万</em>前辈的一点简单点评</strong><br>【王洁同学中文已经没有她的英文流利了，:)。作为 Fresco 文档的译者，也反复看了源码，以为对 Fresco 已   经足够了解了。还是补了好多知识。<br>对于不能 wrap_content 的事情，如何做到提前知道图片的宽高，我现在的做法是把宽高信息放到 uri 中。】</li>
<li>这里再次引用别人的点评和理解——<em>何俊林</em>前辈<br>【分想了fresco一些思想及实现，主要用到了匿名共享内存Ashmem ，在native层处理，减少在java层内存的处理问题。现场有人提问，如果都来申请这样一个匿名共享内存，会不会导致机器很卡，等。这个Ashmem实际上是直接站在巨人的肩膀（Linux 共享内存机制）上的，对于Android基于Linux系统，各个app都是一个process，当然一个app也有可能多个process,共享内存的创建（open）、映射（mmap）、读写（read/write）以及锁定和解锁（pin/unpin）四个使用情景.详细了解Ashmem可以参考：<a href="http://blog.chinaunix.net/uid-20321537-id-3482938.html" target="_blank" rel="external">http://blog.chinaunix.net/uid-20321537-id-3482938.html</a>。另一个问题是说fresco用Drawee的问题，提问的小伙伴说他们之前都是用ImageView，现在切fresco，发现Drawee不是继承ImageView，王洁告知在起初定用Drawee,就不会把Drawee继承ImageView，我觉得应该有相应的解决方案吧，毕竟那么多人都在用fresco。哈哈】</li>
<li>附上几张图，我本人英文惨不忍睹，基本翻译不出来。所以直接上图。（当然为了更好的理解<em>王洁</em>前辈所分析的干货，我私下会想办法翻译理解的，各位自行解决，有利无害）<br><img src="https://meto.chinakook.com/blog-images/fa.png" alt="Paste_Image.png"><br><img src="https://meto.chinakook.com/blog-images/fa2.png" alt="Paste_Image.png"><br><img src="https://meto.chinakook.com/blog-images/fa3.png" alt="Paste_Image.png"><br><img src="https://meto.chinakook.com/blog-images/fa4.png" alt="Paste_Image.png"><br><img src="https://meto.chinakook.com/blog-images/fa5.png" alt="Paste_Image.png"><br><img src="https://meto.chinakook.com/blog-images/fa6.png" alt="Paste_Image.png"><br><img src="https://meto.chinakook.com/blog-images/fa7.png" alt="Paste_Image.png"></li>
<li><strong>抱歉，别找了，没视频。官方视频没出来之前别指望找到了，静等官方视频吧，不过官方也不一定会放出来。</strong></li>
<li>我只有PPT，<a href="https://github.com/MDCC2016/Android-Session-Slides/blob/master/05-Fresco-loading-image-faster.pdf" target="_blank" rel="external">05-Fresco-loading-image-faster.pdf</a><br>其余的全部会在文末放上。<br>其中包括：<br>[01-滴滴国际化 Android 端演进.pdf]<br>[02-From.Containerization.To.Modularity.pdf]<br>[03-云信 IM 推送保障及网络优化实践.pptx]<br>[04-微信 Tinker 热补丁实践演进之路.pdf]<br>[05-Fresco-loading-image-faster.pdf]<br>[06-如何开发一款优雅的 SDK.pptx]<br>[09-Android应用性能优化经验分享-张明云.pdf]</li>
</ul>
</li>
<li><h2 id="如何开发一款优雅的-SDK？——吕观祥"><a href="#如何开发一款优雅的-SDK？——吕观祥" class="headerlink" title="如何开发一款优雅的 SDK？——吕观祥"></a><strong>如何开发一款优雅的 SDK？</strong>——<em>吕观祥</em></h2><ul>
<li><em>吕观祥</em>前辈的分享是完全围绕着其公司的SDK产品来讲的。从SDK的设计到内核架构，讲解的比较全面。不过个人觉得，讲的有点高大上了，都是去寻求干货的，讲点技术比较实际。内核就没有必要拿出这么长的时间来讲解了，毕竟内部的东西不是一两句就能讲清楚的。</li>
<li>用当下的MVC,MVP等设计一个SDK。现场提问，是说这么多渠道和客户，如何管理分支问题。SDK打包及升级不同客户，确实都是很实在的问题。这个实际上是可以做一些渠道的标识的。不同的客户和厂商。在发版可以记录。build不同的sdk，脚本也是可以做到的。</li>
<li>个推推送数亿SDK独立设备上稳定运行多年的经验为切口，从SDK的开发、集成、发布等多方面深挖SDK与APP开发的不同之处，从架构、接口设计、兼容性等多维度来阐述如何开发一款优雅的SDK，使其满足易用、稳定、灵活等特点。吕观祥认为SDK的设计要点包括：开发方面需要接入简单，可自解释，可定制，防止误用；接口设计要周全考虑生命周期和异常处理；兼容性则考虑Android API、ROM版本，so版本，SDK版本；安全性要考虑本地和通信数据安全（HTTPS ECDHE-AES-GCM）；性能指标（电量、流量、内存、包大小）。发布方面，则需要实现灰度发布，补货Crash趋势和详情。发布包管理方面，需要包含日志更新，Sample工程代码等。其他还需要关注的有：第三方jar包，低污染（及时清理运行过程中创建的临时文件），以及全平台支持（Cocos2dx、Unity3D等）。</li>
<li><em>秋百万</em>前辈的简单点评：开发，CI，测试三个方面，尤其 CI 方面的介绍，如果目前还没 CI 的团队，可以立刻按照这个配备搭建一个了。</li>
<li>还是说以我目前的能力理解的不怎么样，或者说根本没怎么听懂。所以大家自行学习，我也会继续学习。</li>
<li>附几张图，体会一下。<br><img src="https://meto.chinakook.com/blog-images/jia1.png" alt="架构设计——APP"><br><img src="https://meto.chinakook.com/blog-images/jia2.png" alt="架构设计——SDK"><br><img src="https://meto.chinakook.com/blog-images/jia3.png" alt="CI"><br><img src="https://meto.chinakook.com/blog-images/jia4.png" alt="发布"><br><img src="https://meto.chinakook.com/blog-images/jia5.png" alt="其他"></li>
<li>继续学习才能深入理解</li>
</ul>
</li>
<li><h2 id="打造可信赖的-Android-设备-ID-——杨玉奇"><a href="#打造可信赖的-Android-设备-ID-——杨玉奇" class="headerlink" title="打造可信赖的 Android 设备 ID ——杨玉奇"></a><strong>打造可信赖的 Android 设备 ID</strong> ——<em>杨玉奇</em></h2><ul>
<li>什么都不想说了。</li>
<li>还是说一句吧。不然憋得慌。少一点广告多一点真诚啊。</li>
<li>技术人搞什么推销呢，打起广告来没玩啊，全场刮台风。根本找不到自我。</li>
<li>这里要有<em>秋百万</em>前辈的点评：Slide 做得不错，台风也不错。嗯。我觉得<em>秋百万</em>前辈也是比较无语啊。</li>
<li>还是要来点有用的。</li>
<li>改IEMI、MAC，刷浏览、留存广泛存在，传统Android设备ID标识已经无法应对无孔不入的造假手段，推广效果难以评估。他认为，Android设备需要一个新的、可信赖的ID，而这种ID需要有四种特性：唯一（有统一维护中心），可校验（确保ID可靠），安全防伪造（防伪策略需要多重动态可调整），高可用（处理能力强）。数盟这套系统的平台架构分为五部分：系统应用层，消息枢纽层（Kafka+ZooKeeper），数据统计层，数据存储层，以及监控管理层。</li>
</ul>
</li>
<li><h2 id="Android-中-Native-的内存泄露检测-——德胜（季丹）"><a href="#Android-中-Native-的内存泄露检测-——德胜（季丹）" class="headerlink" title="Android 中 Native 的内存泄露检测 ——德胜（季丹）"></a><strong>Android 中 Native 的内存泄露检测</strong> ——<em>德胜（季丹）</em></h2><ul>
<li>ANMAT是阿里Android团队内部使用的一套检查C++的crash和内存泄露的框架。它可以帮助开发者快速找到Native中Crash和内存泄露的函数栈。演讲首先介绍是关于ANMAT的演进历程，重点分析在开发过程中遇到的问题以及方法的提炼，然后剖析ANMAT架构的核心架构设计，最后结合ANMAT的解决思路，分享项目过程中的最佳实践。</li>
<li>阿里这位前辈的演讲使我听过的最快的演讲了，我感觉还没开始就结束了。:).</li>
<li>内存泄露问题后面的明云前辈也有讲解，所以这里就不赘述了。</li>
<li>其实想要赘述也没得说，根本没听懂，也还没开始听就结束了。</li>
<li>当我没说。</li>
</ul>
</li>
<li><h2 id="Android应用性能优化经验分享——张明云"><a href="#Android应用性能优化经验分享——张明云" class="headerlink" title="Android应用性能优化经验分享——张明云"></a><strong>Android应用性能优化经验分享</strong>——<em>张明云</em></h2><ul>
<li>与普通开发者不同，张明云所在公司的产品优化是针对整个平台，而非单个应用。他从产品经理和开发人员的视角，分别就性能优化的必要性、性能优化的工具和方法以及性能问题的改善方案做详细介绍。张明云举了一个例子：他们团队发现手机在静置的情况下，一晚会掉电20%，研究发现原因包括：60%的应用，启动时间超过2秒，SDK使用不合理，在系统回调或频繁调用代码块中创建新的实例，几乎所有App都存在过度绘制，Activity和Window都设置了背景，json库使用不合理导致Launcher卡顿严重，近10个应用监听开启广播，应用内存占用不合理，系统SDK导致内存泄漏，非静态内部类导致内存泄漏，四大组件的Context和Application Contex使用不合理，I/O操作完成后没有关闭文件。关于性能优化，张明云给出了需要遵循的原则和指标，并推荐了几款强大的工具——ASinpectCode、ASPerfarmance Monitor。</li>
<li>应用性能状况<ol>
<li>约60%应用冷启动时间超过2s<br>对应用的启动速度进行优化，尤其是冷启动。控制应用的冷启动时间在一个合理的时间内</li>
<li>SDK的不合理使用（基础类型和装箱类型、HashMap、SparseArray）<br>SDK的不合理使用是造成应用性能欠佳很重要的原因。要注意合理使用基础类型和装箱类型、HashMap、SparseArray等</li>
<li>在系统回调或频繁调用的代码块中创建新的实例<br>对应用的代码进行合理的解耦，减低应用的耦合性是避免在系统回调或频繁调用的代码块中创建新实例的关  键。频繁的创建新实例导致应用的包过大，同时在运行阶段导致应用大量占用系统内存。导致应用的性能下降</li>
<li>几乎所有APP都存在过度绘制问题，Activity和Window都设置了背景<br>APP的过度绘制问题，同样会导致占用应用性能下降，对用户的体验造成很大的影响。例如Activity和Window都设置了背景。</li>
<li>json库的不合理使用，导致 Launcher严重卡顿<br>json库类的不合理使用，导致应用运行严重卡顿。要用好json库并不容易，要在合理的时机使用json，避免滥用json库</li>
<li>近10个应用监听开机广播，导致开机后一段时间内Launcher严重卡顿<br>关闭不需要的应用开机广播。过多的应用同时监听开机广播，会导致开机后一段时间内的应用运行严重卡顿。尽可能的避免应用开机广播</li>
<li>应用内存占用不合理（适配不规范、缓存不合理、回收不及时）<br>不合理的内存占用。对不用的实例及时回收，避免不合理的缓存，规范的适配api</li>
<li>系统SDK导致的内存泄露（InputMethodManager、WebView，<strong>AndroidExcludedRefs.java</strong>）<br>合理设计SDK架构。避免SDK导致内存泄露</li>
<li>非静态内部类导致的内存泄漏（ Handler、Observer、 AsyncTask）<br>合理使用Handle、AsyncTask等非静态内部类。避免导致内存泄露</li>
<li>四大组件的Context和Application Context的不合理使用<br>四大组件的Context和Application Context的不合理使用。优先使用四大组件的Context。合理使用Application Context</li>
<li>IO操作后没有关闭文件（ Cursor、TypedArray、File等）<br>尤其注意Cursor。Cursor使用不合理导致文件重复读写。</li>
<li>功耗问题明显（循环动画、过度绘制、网络请求不合理、后台服务常驻等）<br>循环动画、过度绘制、网络请求不合理、后台服务常驻问题是造成功耗大的主要原因。要注意。</li>
</ol>
</li>
<li><p>性能优化</p>
<ol>
<li>性能优化流程<br>发现问题（性能检测工具）——&gt;定位问题（性能检测工具）——&gt;改善问题（性能优化方法）——&gt;验证问题（性能检测工具）</li>
<li>性能优化原则<ul>
<li>不能凭感觉，要看数据说话，有足够多的测量</li>
<li>尽量使用低配置设备进行测试</li>
<li>权衡利弊，以保证进度、稳定为主</li>
<li>改善后一定要验证，保证每一次改善都有效，不会导致其他的问题</li>
</ul>
</li>
<li>性能优化指标<br>在指标、现象、原因、检测工具几个方面讨论，上图。<br><img src="https://meto.chinakook.com/blog-images/xing1.png" alt="性能优化指标"></li>
<li>性能优化工具<ul>
<li>AS Inspect Code<br><img src="https://meto.chinakook.com/blog-images/xing2.png" alt="AS Inspect Code"></li>
<li>AS Performance Monitor<br><img src="https://meto.chinakook.com/blog-images/xing3.png" alt="AS Performance Monitor"></li>
<li>AS Date Analysis<br><img src="https://meto.chinakook.com/blog-images/xing4.png" alt="AS Date Analysis"></li>
<li>开发者选项<ul>
<li>过度描绘<br><img src="https://meto.chinakook.com/blog-images/xing5.png" alt="开发者选项——过度描绘"></li>
<li>GPU呈现模式分析<br><img src="https://meto.chinakook.com/blog-images/xing6.png" alt="开发者选项——GPU呈现模式分析"></li>
</ul>
</li>
<li>StrictMode<br><img src="https://meto.chinakook.com/blog-images/xing7.png" alt="StrictMode"></li>
<li>TraceView<br><img src="https://meto.chinakook.com/blog-images/xing8.png" alt="TraceView"></li>
<li>方法耗时打印Hugo<br><img src="https://meto.chinakook.com/blog-images/xing9.png" alt="方法耗时打印"></li>
<li>布局性能查看 Hierarcher Viewer<br><img src="https://meto.chinakook.com/blog-images/xing10.png" alt="布局性能查看Hierarcher Viewer"></li>
<li>内存泄露检测 Leakcanary<br><img src="https://meto.chinakook.com/blog-images/xing11.png" alt="Leakcanary"></li>
</ul>
</li>
<li><p>性能优化实战</p>
<ul>
<li><p>启动速度优化</p>
<ul>
<li><p>三种启动模式</p>
<ol>
<li>首次启动：<br>耗时漫长，fork进程+生成数据+dex编译为本地代码+应用初始化</li>
<li>冷启动：<br>fork进程+应用初始化</li>
<li>热启动：<br>应用恢复</li>
</ol>
<p><strong>应该以冷启动速度为优化指标，首次启动频次低，热启动耗时少，没多大意义。</strong></p>
</li>
<li>冷启动平均耗时统计<br><img src="https://meto.chinakook.com/blog-images/ing1.png" alt="冷启动平均耗时统计"><br>详情扫码<br><strong>Google Play排名前100的非游戏类应用：39个冷启动时间在2秒内，73个冷启动时间在3秒内</strong><br><img src="https://meto.chinakook.com/blog-images/ing2.png" alt="启动速度优化"></li>
<li>Hugo大致定位耗时位置<br><img src="https://meto.chinakook.com/blog-images/ing3.png" alt="Hugo大致耗时位置"></li>
<li>TraceView精确定位<br><img src="https://meto.chinakook.com/blog-images/ing4.png" alt="TraceView精确定位"></li>
<li>改善后<br><img src="https://meto.chinakook.com/blog-images/ing5.png" alt="改善后"><br><img src="https://meto.chinakook.com/blog-images/ing6.png" alt="改善后"><br><img src="https://meto.chinakook.com/blog-images/ing7.png" alt="改善后"></li>
</ul>
</li>
<li>流畅度优化<br><img src="https://meto.chinakook.com/blog-images/ing8.png" alt="流畅度优化"></li>
<li>内存优化<br><img src="https://meto.chinakook.com/blog-images/ing9.png" alt="内存优化"></li>
<li>功耗优化<br><img src="https://meto.chinakook.com/blog-images/ing10.png" alt="功耗优化"></li>
</ul>
</li>
</ol>
</li>
<li>实际优化效果<ol>
<li>超过80%的应用冷启动时间速度基本都控制在了1.5s以内</li>
<li>解决图文混排控件界面因为图片太多导致滑动卡顿的问题</li>
<li>对大部分模块完成静态代码分析，解决了明显的性能问题（Handler内部类、IO操作导致的内存泄露）</li>
<li>解决两个APP因为适配不合理（图片存放的Drawable文件夹不对）导致耗内存的问题</li>
<li>超过80%的应用基本做到无内存泄露（除系统导致的内存泄露问题外）</li>
<li>解决了两个系统导致的内存泄露问题（WebView、InputMethodManager）</li>
<li>超过80%的应用过度绘制层数控制在3X以内（无红色）</li>
<li>超过95%的应用安装包大小控制在10M以内</li>
</ol>
</li>
</ul>
</li>
<li><p>2016MDCC大会 Android开发峰会讲师PPT<br><a href="https://github.com/MDCC2016/Android-Session-Slides" target="_blank" rel="external">https://github.com/MDCC2016/Android-Session-Slides</a></p>
</li>
</ul>
<p><strong>最后附上Android峰会结束后的合影</strong><br><img src="https://meto.chinakook.com/blog-images/ing11.jpg" alt="Android峰会合影"></p>
<h4 id="以上是我此次参加MDCC大会总结的全部内容。大多数材料来自于讲师PPT，秋百万前辈、Piasy前辈、何俊林前辈的总结等。欢迎大家提意见，共同进步。有不对的地方还请见谅，请指出我会加以改正。"><a href="#以上是我此次参加MDCC大会总结的全部内容。大多数材料来自于讲师PPT，秋百万前辈、Piasy前辈、何俊林前辈的总结等。欢迎大家提意见，共同进步。有不对的地方还请见谅，请指出我会加以改正。" class="headerlink" title=" 以上是我此次参加MDCC大会总结的全部内容。大多数材料来自于讲师PPT，秋百万前辈、Piasy前辈、何俊林前辈的总结等。欢迎大家提意见，共同进步。有不对的地方还请见谅，请指出我会加以改正。"></a><strong> 以上是我此次参加MDCC大会总结的全部内容。大多数材料来自于讲师PPT，<em>秋百万</em>前辈、<em>Piasy</em>前辈、<em>何俊林</em>前辈的总结等。欢迎大家提意见，共同进步。有不对的地方还请见谅，请指出我会加以改正。</strong></h4><h4 id="再次感谢stormzhang张哥给的机会，非常感谢，我会继续努力。"><a href="#再次感谢stormzhang张哥给的机会，非常感谢，我会继续努力。" class="headerlink" title="再次感谢stormzhang张哥给的机会，非常感谢，我会继续努力。"></a>再次感谢<em>stormzhang</em>张哥给的机会，非常感谢，我会继续努力。</h4><p><br>ikook<br>2016.09.27</p>
]]></content>
      
        <categories>
            
            <category> 技术栈 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
            <tag> MDCC </tag>
            
            <tag> 移动互联网 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2016/08/28/hello-world/</url>
      <content type="html"><![CDATA[<p>我使用 <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a> 搭建了个人Blog：<a href="http://ikookblog.com/">ikook Blog</a> !</p>
<a id="more"></a>
<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="创建一个新的Blog"><a href="#创建一个新的Blog" class="headerlink" title="创建一个新的Blog"></a>创建一个新的Blog</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>更多信息: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><p>开启Hexo server进行本地预览</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>更多信息: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>更多信息: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="部署到远程仓库"><a href="#部署到远程仓库" class="headerlink" title="部署到远程仓库"></a>部署到远程仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>更多信息: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
<p><br>ikook<br>2016.08.28</p>
]]></content>
      
        <categories>
            
            <category> 随笔集 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title></title>
      <url>/guestbook/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[About Me]]></title>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[<blockquote>
<p>过去的已然失去意义，现在和将来才尤为重要</p>
</blockquote>
<h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><p><br><br>我就是我，相信你们通过 code 和 blog 会了解我的。<br><br></p>
<h2 id="公众号"><a href="#公众号" class="headerlink" title="公众号"></a>公众号</h2><p><br><br>微信公众号「ikook」运营者，公号 ID：by-ikook；</p>
<p>我的原创文章（包括技术文章）会首发于公众号，建议大家关注。</p>
<p><br></p>
<center>扫码下方二维码关注，和我一起成长</center><br><center><img src="https://meto.chinakook.com/blog-images/8cm.jpg" alt="ikook 二维码"></center>

<h2 id="联系我"><a href="#联系我" class="headerlink" title="联系我"></a>联系我</h2><ul>
<li><a href="https://github.com/china-kook" target="_blank" rel="external">GitHub</a></li>
<li><a href="https://www.jianshu.com/users/c7a6bbb6855a/latest_articles" target="_blank" rel="external">简书</a></li>
<li><a href="https://blog.csdn.net/applydev" target="_blank" rel="external">CSDN</a></li>
<li><a href="https://gold.xitu.io/user/576e6f2379bc44005bf4500e" target="_blank" rel="external">掘金</a></li>
<li><a href="https://weibo.com/chinakook?sudaref=ikookblog.com&amp;retcode=6102&amp;is_all=1" target="_blank" rel="external">weibo</a></li>
</ul>
<p><br></p>
<p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=25707139&auto=1&height=66"></iframe><br></p>
<p><br>ikook<br>2016.10.07</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[gallery]]></title>
      <url>/gallery/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[links]]></title>
      <url>/links/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[tags]]></title>
      <url>/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[timeline]]></title>
      <url>/timeline/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
